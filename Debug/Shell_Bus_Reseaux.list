
Shell_Bus_Reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008354  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  080084e4  080084e4  000184e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d64  08008d64  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008d64  08008d64  00018d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d6c  08008d6c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d70  08008d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001604  20000084  08008df8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001688  08008df8  00021688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e011  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000421e  00000000  00000000  0003e0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  000422e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  00043788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a776  00000000  00000000  00044a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001836d  00000000  00000000  0006f1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7414  00000000  00000000  00087553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017e967  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b80  00000000  00000000  0017e9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084cc 	.word	0x080084cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080084cc 	.word	0x080084cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <BMP280_check>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

int BMP280_check() {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 800056e:	23d0      	movs	r3, #208	; 0xd0
 8000570:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 8000572:	23ee      	movs	r3, #238	; 0xee
 8000574:	b299      	uxth	r1, r3
 8000576:	1d3a      	adds	r2, r7, #4
 8000578:	f04f 33ff 	mov.w	r3, #4294967295
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2301      	movs	r3, #1
 8000580:	4819      	ldr	r0, [pc, #100]	; (80005e8 <BMP280_check+0x80>)
 8000582:	f002 f805 	bl	8002590 <HAL_I2C_Master_Transmit>
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d002      	beq.n	8000596 <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 8000590:	4816      	ldr	r0, [pc, #88]	; (80005ec <BMP280_check+0x84>)
 8000592:	f007 f8ed 	bl	8007770 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 8000596:	23ee      	movs	r3, #238	; 0xee
 8000598:	b299      	uxth	r1, r3
 800059a:	2301      	movs	r3, #1
 800059c:	b29b      	uxth	r3, r3
 800059e:	1d3a      	adds	r2, r7, #4
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	9000      	str	r0, [sp, #0]
 80005a6:	4810      	ldr	r0, [pc, #64]	; (80005e8 <BMP280_check+0x80>)
 80005a8:	f002 f8e6 	bl	8002778 <HAL_I2C_Master_Receive>
 80005ac:	4603      	mov	r3, r0
 80005ae:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <BMP280_check+0x54>
		printf("Problem with check (I2C Receive) \r\n");
 80005b6:	480e      	ldr	r0, [pc, #56]	; (80005f0 <BMP280_check+0x88>)
 80005b8:	f007 f8da 	bl	8007770 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 80005bc:	793b      	ldrb	r3, [r7, #4]
 80005be:	4619      	mov	r1, r3
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <BMP280_check+0x8c>)
 80005c2:	f007 f84f 	bl	8007664 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 80005c6:	793b      	ldrb	r3, [r7, #4]
 80005c8:	2258      	movs	r2, #88	; 0x58
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d104      	bne.n	80005d8 <BMP280_check+0x70>
		printf("Ok\r\n");
 80005ce:	480a      	ldr	r0, [pc, #40]	; (80005f8 <BMP280_check+0x90>)
 80005d0:	f007 f8ce 	bl	8007770 <puts>
		return 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e003      	b.n	80005e0 <BMP280_check+0x78>
	} else {
		printf("not Ok!\r\n");
 80005d8:	4808      	ldr	r0, [pc, #32]	; (80005fc <BMP280_check+0x94>)
 80005da:	f007 f8c9 	bl	8007770 <puts>
		return 1;
 80005de:	2301      	movs	r3, #1
	}
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20001368 	.word	0x20001368
 80005ec:	080084e4 	.word	0x080084e4
 80005f0:	08008508 	.word	0x08008508
 80005f4:	0800852c 	.word	0x0800852c
 80005f8:	08008538 	.word	0x08008538
 80005fc:	0800853c 	.word	0x0800853c

08000600 <BMP280_init>:

int BMP280_init() {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 8000606:	2357      	movs	r3, #87	; 0x57
 8000608:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 800060a:	480d      	ldr	r0, [pc, #52]	; (8000640 <BMP280_init+0x40>)
 800060c:	f007 f8b0 	bl	8007770 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 8000610:	22f4      	movs	r2, #244	; 0xf4
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4619      	mov	r1, r3
 8000616:	4610      	mov	r0, r2
 8000618:	f000 f818 	bl	800064c <BMP280_Write_Reg>
 800061c:	4603      	mov	r3, r0
 800061e:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d104      	bne.n	8000630 <BMP280_init+0x30>
		printf("Config Ok\r\n");
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <BMP280_init+0x44>)
 8000628:	f007 f8a2 	bl	8007770 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	//BMP280_get_trimming();
	return 0;
 800062c:	2300      	movs	r3, #0
 800062e:	e003      	b.n	8000638 <BMP280_init+0x38>
		printf("Config not Ok!\r\n");
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <BMP280_init+0x48>)
 8000632:	f007 f89d 	bl	8007770 <puts>
		return 1;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	08008548 	.word	0x08008548
 8000644:	08008558 	.word	0x08008558
 8000648:	08008564 	.word	0x08008564

0800064c <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af02      	add	r7, sp, #8
 8000652:	4603      	mov	r3, r0
 8000654:	460a      	mov	r2, r1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	4613      	mov	r3, r2
 800065a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8000664:	23ee      	movs	r3, #238	; 0xee
 8000666:	b299      	uxth	r1, r3
 8000668:	f107 020c 	add.w	r2, r7, #12
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2302      	movs	r3, #2
 8000674:	4814      	ldr	r0, [pc, #80]	; (80006c8 <BMP280_Write_Reg+0x7c>)
 8000676:	f001 ff8b 	bl	8002590 <HAL_I2C_Master_Transmit>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 8000684:	4811      	ldr	r0, [pc, #68]	; (80006cc <BMP280_Write_Reg+0x80>)
 8000686:	f007 f873 	bl	8007770 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800068a:	23ee      	movs	r3, #238	; 0xee
 800068c:	b299      	uxth	r1, r3
 800068e:	f107 020c 	add.w	r2, r7, #12
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2301      	movs	r3, #1
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <BMP280_Write_Reg+0x7c>)
 800069c:	f002 f86c 	bl	8002778 <HAL_I2C_Master_Receive>
 80006a0:	4603      	mov	r3, r0
 80006a2:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 80006aa:	4809      	ldr	r0, [pc, #36]	; (80006d0 <BMP280_Write_Reg+0x84>)
 80006ac:	f007 f860 	bl	8007770 <puts>
	}

	if (buf[0] == value) {
 80006b0:	7b3b      	ldrb	r3, [r7, #12]
 80006b2:	79ba      	ldrb	r2, [r7, #6]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d101      	bne.n	80006bc <BMP280_Write_Reg+0x70>
		return 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	e000      	b.n	80006be <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 80006bc:	2301      	movs	r3, #1
	}
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20001368 	.word	0x20001368
 80006cc:	08008574 	.word	0x08008574
 80006d0:	08008590 	.word	0x08008590

080006d4 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af02      	add	r7, sp, #8
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 80006e4:	23ee      	movs	r3, #238	; 0xee
 80006e6:	b299      	uxth	r1, r3
 80006e8:	1dfa      	adds	r2, r7, #7
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	4814      	ldr	r0, [pc, #80]	; (8000744 <BMP280_Read_Reg+0x70>)
 80006f4:	f001 ff4c 	bl	8002590 <HAL_I2C_Master_Transmit>
 80006f8:	4603      	mov	r3, r0
 80006fa:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <BMP280_Read_Reg+0x74>)
 8000704:	f007 f834 	bl	8007770 <puts>
	}

	buf = (uint8_t*) malloc(length);
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	4618      	mov	r0, r3
 800070c:	f006 fee8 	bl	80074e0 <malloc>
 8000710:	4603      	mov	r3, r0
 8000712:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8000714:	23ee      	movs	r3, #238	; 0xee
 8000716:	b299      	uxth	r1, r3
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	b29b      	uxth	r3, r3
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	9200      	str	r2, [sp, #0]
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <BMP280_Read_Reg+0x70>)
 8000726:	f002 f827 	bl	8002778 <HAL_I2C_Master_Receive>
 800072a:	4603      	mov	r3, r0
 800072c:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <BMP280_Read_Reg+0x78>)
 8000736:	f007 f81b 	bl	8007770 <puts>
	}

	return buf;
 800073a:	68bb      	ldr	r3, [r7, #8]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20001368 	.word	0x20001368
 8000748:	08008574 	.word	0x08008574
 800074c:	08008590 	.word	0x08008590

08000750 <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8000756:	23fa      	movs	r3, #250	; 0xfa
 8000758:	2203      	movs	r2, #3
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ffb9 	bl	80006d4 <BMP280_Read_Reg>
 8000762:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	031a      	lsls	r2, r3, #12
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3301      	adds	r3, #1
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	011b      	lsls	r3, r3, #4
 8000772:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	3202      	adds	r2, #2
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	0912      	lsrs	r2, r2, #4
 800077c:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800077e:	4313      	orrs	r3, r2
 8000780:	603b      	str	r3, [r7, #0]

	free(buf);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f006 feb4 	bl	80074f0 <free>

	/*printf("Temperature: ");
	printf("0X%05lX", adc_T);
	printf("\r\n");*/

	return adc_T;
 8000788:	683b      	ldr	r3, [r7, #0]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <BMP280_get_pressure>:

int BMP280_get_pressure() {
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 8000798:	23f7      	movs	r3, #247	; 0xf7
 800079a:	2203      	movs	r2, #3
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff98 	bl	80006d4 <BMP280_Read_Reg>
 80007a4:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	031a      	lsls	r2, r3, #12
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3301      	adds	r3, #1
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	3202      	adds	r2, #2
 80007ba:	7812      	ldrb	r2, [r2, #0]
 80007bc:	0912      	lsrs	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80007c0:	4313      	orrs	r3, r2
 80007c2:	603b      	str	r3, [r7, #0]

	free(buf);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f006 fe93 	bl	80074f0 <free>

	/*printf("Pressure:    0x");
	printf("%05lX", adc_P);
	printf("\r\n");*/

	return adc_P;
 80007ca:	683b      	ldr	r3, [r7, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_CAN1_Init+0x64>)
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <MX_CAN1_Init+0x68>)
 80007dc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_CAN1_Init+0x64>)
 80007e0:	2220      	movs	r2, #32
 80007e2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_CAN1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_CAN1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_CAN1_Init+0x64>)
 80007f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007f6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_CAN1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_CAN1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_CAN1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_CAN1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_CAN1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_CAN1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_CAN1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_CAN1_Init+0x64>)
 8000824:	f001 f8aa 	bl	800197c <HAL_CAN_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800082e:	f000 fc78 	bl	8001122 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000133c 	.word	0x2000133c
 800083c:	40006400 	.word	0x40006400

08000840 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_CAN_MspInit+0x7c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d128      	bne.n	80008b4 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_CAN_MspInit+0x80>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <HAL_CAN_MspInit+0x80>)
 8000868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800086c:	6593      	str	r3, [r2, #88]	; 0x58
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_CAN_MspInit+0x80>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_CAN_MspInit+0x80>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_CAN_MspInit+0x80>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_CAN_MspInit+0x80>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000892:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008a4:	2309      	movs	r3, #9
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <HAL_CAN_MspInit+0x84>)
 80008b0:	f001 fc1c 	bl	80020ec <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40006400 	.word	0x40006400
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000400 	.word	0x48000400

080008c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80008d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <vApplicationGetIdleTaskMemory+0x30>)
 80008de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	200000a0 	.word	0x200000a0
 80008f8:	200000f4 	.word	0x200000f4

080008fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_FREERTOS_Init+0x30>)
 8000904:	1d3c      	adds	r4, r7, #4
 8000906:	461d      	mov	r5, r3
 8000908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f005 fb69 	bl	8005ff0 <osThreadCreate>
 800091e:	4603      	mov	r3, r0
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <MX_FREERTOS_Init+0x34>)
 8000922:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bdb0      	pop	{r4, r5, r7, pc}
 800092c:	080085b8 	.word	0x080085b8
 8000930:	20001364 	.word	0x20001364

08000934 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800093c:	2001      	movs	r0, #1
 800093e:	f005 fba3 	bl	8006088 <osDelay>
 8000942:	e7fb      	b.n	800093c <StartDefaultTask+0x8>

08000944 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b4b      	ldr	r3, [pc, #300]	; (8000a88 <MX_GPIO_Init+0x144>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a4a      	ldr	r2, [pc, #296]	; (8000a88 <MX_GPIO_Init+0x144>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b48      	ldr	r3, [pc, #288]	; (8000a88 <MX_GPIO_Init+0x144>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	4b45      	ldr	r3, [pc, #276]	; (8000a88 <MX_GPIO_Init+0x144>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a44      	ldr	r2, [pc, #272]	; (8000a88 <MX_GPIO_Init+0x144>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b42      	ldr	r3, [pc, #264]	; (8000a88 <MX_GPIO_Init+0x144>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b3f      	ldr	r3, [pc, #252]	; (8000a88 <MX_GPIO_Init+0x144>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a3e      	ldr	r2, [pc, #248]	; (8000a88 <MX_GPIO_Init+0x144>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <MX_GPIO_Init+0x144>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b39      	ldr	r3, [pc, #228]	; (8000a88 <MX_GPIO_Init+0x144>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a38      	ldr	r2, [pc, #224]	; (8000a88 <MX_GPIO_Init+0x144>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <MX_GPIO_Init+0x144>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b33      	ldr	r3, [pc, #204]	; (8000a88 <MX_GPIO_Init+0x144>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a32      	ldr	r2, [pc, #200]	; (8000a88 <MX_GPIO_Init+0x144>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b30      	ldr	r3, [pc, #192]	; (8000a88 <MX_GPIO_Init+0x144>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2120      	movs	r1, #32
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009da:	f001 fd31 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_GPIO_Init+0x148>)
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4827      	ldr	r0, [pc, #156]	; (8000a90 <MX_GPIO_Init+0x14c>)
 80009f4:	f001 fb7a 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009f8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80009fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fe:	2303      	movs	r3, #3
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4820      	ldr	r0, [pc, #128]	; (8000a90 <MX_GPIO_Init+0x14c>)
 8000a0e:	f001 fb6d 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8000a12:	f649 73d3 	movw	r3, #40915	; 0x9fd3
 8000a16:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f001 fb5f 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a2e:	2320      	movs	r3, #32
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f001 fb50 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000a4c:	f64f 4337 	movw	r3, #64567	; 0xfc37
 8000a50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a52:	2303      	movs	r3, #3
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <MX_GPIO_Init+0x150>)
 8000a62:	f001 fb43 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a66:	2304      	movs	r3, #4
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <MX_GPIO_Init+0x154>)
 8000a7a:	f001 fb37 	bl	80020ec <HAL_GPIO_Init>

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	10210000 	.word	0x10210000
 8000a90:	48000800 	.word	0x48000800
 8000a94:	48000400 	.word	0x48000400
 8000a98:	48000c00 	.word	0x48000c00

08000a9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000aa2:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <MX_I2C1_Init+0x78>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <MX_I2C1_Init+0x7c>)
 8000aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000ad8:	f001 fcca 	bl	8002470 <HAL_I2C_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ae2:	f000 fb1e 	bl	8001122 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000aea:	f002 fe8f 	bl	800380c <HAL_I2CEx_ConfigAnalogFilter>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000af4:	f000 fb15 	bl	8001122 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af8:	2100      	movs	r1, #0
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000afc:	f002 fed1 	bl	80038a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b06:	f000 fb0c 	bl	8001122 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20001368 	.word	0x20001368
 8000b14:	40005400 	.word	0x40005400
 8000b18:	10909cec 	.word	0x10909cec

08000b1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0ac      	sub	sp, #176	; 0xb0
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2288      	movs	r2, #136	; 0x88
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f006 fcdf 	bl	8007500 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a29      	ldr	r2, [pc, #164]	; (8000bec <HAL_I2C_MspInit+0xd0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d14a      	bne.n	8000be2 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b4c:	2340      	movs	r3, #64	; 0x40
 8000b4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 fd3f 	bl	80045dc <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b64:	f000 fadd 	bl	8001122 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <HAL_I2C_MspInit+0xd4>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6c:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <HAL_I2C_MspInit+0xd4>)
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_I2C_MspInit+0xd4>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b80:	23c0      	movs	r3, #192	; 0xc0
 8000b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b86:	2312      	movs	r3, #18
 8000b88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <HAL_I2C_MspInit+0xd8>)
 8000ba6:	f001 faa1 	bl	80020ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_I2C_MspInit+0xd4>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_I2C_MspInit+0xd4>)
 8000bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_I2C_MspInit+0xd4>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2105      	movs	r1, #5
 8000bc6:	201f      	movs	r0, #31
 8000bc8:	f001 f9cd 	bl	8001f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bcc:	201f      	movs	r0, #31
 8000bce:	f001 f9e6 	bl	8001f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2105      	movs	r1, #5
 8000bd6:	2020      	movs	r0, #32
 8000bd8:	f001 f9c5 	bl	8001f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000bdc:	2020      	movs	r0, #32
 8000bde:	f001 f9de 	bl	8001f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000be2:	bf00      	nop
 8000be4:	37b0      	adds	r7, #176	; 0xb0
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48000400 	.word	0x48000400

08000bf8 <calcul>:
uint32_t mail;
//buffer communication I2C
uint8_t buff_temp;
uint8_t buff_press;

int calcul(){
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bfa:	b08d      	sub	sp, #52	; 0x34
 8000bfc:	af08      	add	r7, sp, #32
	if (val_cpt<TAB_SIZE){
 8000bfe:	4b52      	ldr	r3, [pc, #328]	; (8000d48 <calcul+0x150>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b09      	cmp	r3, #9
 8000c04:	dc22      	bgt.n	8000c4c <calcul+0x54>
		temp = BMP280_get_temperature();
 8000c06:	f7ff fda3 	bl	8000750 <BMP280_get_temperature>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <calcul+0x154>)
 8000c10:	601a      	str	r2, [r3, #0]
		pres = BMP280_get_pressure();
 8000c12:	f7ff fdbe 	bl	8000792 <BMP280_get_pressure>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b4d      	ldr	r3, [pc, #308]	; (8000d50 <calcul+0x158>)
 8000c1c:	601a      	str	r2, [r3, #0]

		val[val_cpt][0] = pres;
 8000c1e:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <calcul+0x158>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b49      	ldr	r3, [pc, #292]	; (8000d48 <calcul+0x150>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4a4a      	ldr	r2, [pc, #296]	; (8000d54 <calcul+0x15c>)
 8000c2a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		val[val_cpt][1] = temp;
 8000c2e:	4b47      	ldr	r3, [pc, #284]	; (8000d4c <calcul+0x154>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <calcul+0x150>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4a46      	ldr	r2, [pc, #280]	; (8000d54 <calcul+0x15c>)
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	4413      	add	r3, r2
 8000c3e:	6059      	str	r1, [r3, #4]
		val_cpt++;
 8000c40:	4b41      	ldr	r3, [pc, #260]	; (8000d48 <calcul+0x150>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a40      	ldr	r2, [pc, #256]	; (8000d48 <calcul+0x150>)
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e078      	b.n	8000d3e <calcul+0x146>
	} else {
		printf("Tableau plein, voici le tableaud dans son intégralité. \r\n");
 8000c4c:	4842      	ldr	r0, [pc, #264]	; (8000d58 <calcul+0x160>)
 8000c4e:	f006 fd8f 	bl	8007770 <puts>
		printf("Pres1 = %x, Pres2 = %x, Pres3 = %x, Pres4 = %x, Pres5 = %x, Pres6 = %x, Pres7 = %x, Pres8 = %x, Pres9 = %x, Pres10 = %x \r\n",
 8000c52:	4b40      	ldr	r3, [pc, #256]	; (8000d54 <calcul+0x15c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b3e      	ldr	r3, [pc, #248]	; (8000d54 <calcul+0x15c>)
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	; (8000d54 <calcul+0x15c>)
 8000c60:	6918      	ldr	r0, [r3, #16]
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <calcul+0x15c>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a3a      	ldr	r2, [pc, #232]	; (8000d54 <calcul+0x15c>)
 8000c6a:	6a12      	ldr	r2, [r2, #32]
 8000c6c:	4939      	ldr	r1, [pc, #228]	; (8000d54 <calcul+0x15c>)
 8000c6e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000c70:	4838      	ldr	r0, [pc, #224]	; (8000d54 <calcul+0x15c>)
 8000c72:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8000c74:	4c37      	ldr	r4, [pc, #220]	; (8000d54 <calcul+0x15c>)
 8000c76:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8000c78:	4d36      	ldr	r5, [pc, #216]	; (8000d54 <calcul+0x15c>)
 8000c7a:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 8000c7c:	4e35      	ldr	r6, [pc, #212]	; (8000d54 <calcul+0x15c>)
 8000c7e:	6cb6      	ldr	r6, [r6, #72]	; 0x48
 8000c80:	9606      	str	r6, [sp, #24]
 8000c82:	9505      	str	r5, [sp, #20]
 8000c84:	9404      	str	r4, [sp, #16]
 8000c86:	9003      	str	r0, [sp, #12]
 8000c88:	9102      	str	r1, [sp, #8]
 8000c8a:	9201      	str	r2, [sp, #4]
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68ba      	ldr	r2, [r7, #8]
 8000c92:	68f9      	ldr	r1, [r7, #12]
 8000c94:	4831      	ldr	r0, [pc, #196]	; (8000d5c <calcul+0x164>)
 8000c96:	f006 fce5 	bl	8007664 <iprintf>
				val[0][0], val[1][0], val[2][0], val[3][0], val[4][0], val[5][0], val[6][0], val[7][0], val[8][0], val[9][0]);
		printf("Temp1 = %x, Temp2 = %x, Temp3 = %x, Temp4 = %x, Temp5 = %x, Temp6 = %x, Temp7 = %x, Temp8 = %x, Temp9 = %x, Temp10 = %x \r\n",
 8000c9a:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <calcul+0x15c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <calcul+0x15c>)
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <calcul+0x15c>)
 8000ca8:	6958      	ldr	r0, [r3, #20]
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <calcul+0x15c>)
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	4a28      	ldr	r2, [pc, #160]	; (8000d54 <calcul+0x15c>)
 8000cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000cb4:	4927      	ldr	r1, [pc, #156]	; (8000d54 <calcul+0x15c>)
 8000cb6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000cb8:	4826      	ldr	r0, [pc, #152]	; (8000d54 <calcul+0x15c>)
 8000cba:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000cbc:	4c25      	ldr	r4, [pc, #148]	; (8000d54 <calcul+0x15c>)
 8000cbe:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8000cc0:	4d24      	ldr	r5, [pc, #144]	; (8000d54 <calcul+0x15c>)
 8000cc2:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8000cc4:	4e23      	ldr	r6, [pc, #140]	; (8000d54 <calcul+0x15c>)
 8000cc6:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
 8000cc8:	9606      	str	r6, [sp, #24]
 8000cca:	9505      	str	r5, [sp, #20]
 8000ccc:	9404      	str	r4, [sp, #16]
 8000cce:	9003      	str	r0, [sp, #12]
 8000cd0:	9102      	str	r1, [sp, #8]
 8000cd2:	9201      	str	r2, [sp, #4]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	68f9      	ldr	r1, [r7, #12]
 8000cdc:	4820      	ldr	r0, [pc, #128]	; (8000d60 <calcul+0x168>)
 8000cde:	f006 fcc1 	bl	8007664 <iprintf>
				val[0][1], val[1][1], val[2][1], val[3][1], val[4][1], val[5][1], val[6][1], val[7][1], val[8][1], val[9][1]);
		printf("Tableau réinitialisé... \r\n");
 8000ce2:	4820      	ldr	r0, [pc, #128]	; (8000d64 <calcul+0x16c>)
 8000ce4:	f006 fd44 	bl	8007770 <puts>
		val_cpt = 0;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <calcul+0x150>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
		temp = BMP280_get_temperature();
 8000cee:	f7ff fd2f 	bl	8000750 <BMP280_get_temperature>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <calcul+0x154>)
 8000cf8:	601a      	str	r2, [r3, #0]
		pres = BMP280_get_pressure();
 8000cfa:	f7ff fd4a 	bl	8000792 <BMP280_get_pressure>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <calcul+0x158>)
 8000d04:	601a      	str	r2, [r3, #0]

		pres = 3;
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <calcul+0x158>)
 8000d08:	2203      	movs	r2, #3
 8000d0a:	601a      	str	r2, [r3, #0]
		temp = 5;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <calcul+0x154>)
 8000d0e:	2205      	movs	r2, #5
 8000d10:	601a      	str	r2, [r3, #0]
		val[val_cpt][0] = pres;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <calcul+0x158>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <calcul+0x150>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <calcul+0x15c>)
 8000d1e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		val[val_cpt][1] = temp;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <calcul+0x154>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <calcul+0x150>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <calcul+0x15c>)
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	4413      	add	r3, r2
 8000d32:	6059      	str	r1, [r3, #4]
		val_cpt++;
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <calcul+0x150>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <calcul+0x150>)
 8000d3c:	6013      	str	r3, [r2, #0]
	}

	return 0;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d48:	200002f4 	.word	0x200002f4
 8000d4c:	2000148c 	.word	0x2000148c
 8000d50:	200013b8 	.word	0x200013b8
 8000d54:	20001518 	.word	0x20001518
 8000d58:	080085d4 	.word	0x080085d4
 8000d5c:	08008610 	.word	0x08008610
 8000d60:	0800868c 	.word	0x0800868c
 8000d64:	08008708 	.word	0x08008708

08000d68 <get_pres>:

int get_pres(int argc, char ** argv) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	if(argc==2){
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d138      	bne.n	8000dea <get_pres+0x82>
		if(strncmp("all", argv[1], 1)==0){
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4619      	mov	r1, r3
 8000d82:	4821      	ldr	r0, [pc, #132]	; (8000e08 <get_pres+0xa0>)
 8000d84:	f006 fd0c 	bl	80077a0 <strncmp>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d114      	bne.n	8000db8 <get_pres+0x50>
			for(int k=0; k<val_cpt; k++){
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	e00c      	b.n	8000dae <get_pres+0x46>
				//printf("all\r\n");
				printf("Pres%d = %x \r\n",k+1, val[k][0]);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	1c59      	adds	r1, r3, #1
 8000d98:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <get_pres+0xa4>)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000da0:	461a      	mov	r2, r3
 8000da2:	481b      	ldr	r0, [pc, #108]	; (8000e10 <get_pres+0xa8>)
 8000da4:	f006 fc5e 	bl	8007664 <iprintf>
			for(int k=0; k<val_cpt; k++){
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <get_pres+0xac>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbed      	blt.n	8000d94 <get_pres+0x2c>
			}
		}
		if(strncmp("now", argv[1], 1)==0){
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	3304      	adds	r3, #4
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4815      	ldr	r0, [pc, #84]	; (8000e18 <get_pres+0xb0>)
 8000dc4:	f006 fcec 	bl	80077a0 <strncmp>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d116      	bne.n	8000dfc <get_pres+0x94>
			int c = calcul();
 8000dce:	f7ff ff13 	bl	8000bf8 <calcul>
 8000dd2:	60b8      	str	r0, [r7, #8]
			//printf("P=\r\n");
			printf("P = 0X%05lX \r\n", val[val_cpt-1][0]);
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <get_pres+0xac>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <get_pres+0xa4>)
 8000ddc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000de0:	4619      	mov	r1, r3
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <get_pres+0xb4>)
 8000de4:	f006 fc3e 	bl	8007664 <iprintf>
 8000de8:	e008      	b.n	8000dfc <get_pres+0x94>
		}
	}
	else{
		printf("Erreur: nombre d'arguments incorrect\r\n");
 8000dea:	480d      	ldr	r0, [pc, #52]	; (8000e20 <get_pres+0xb8>)
 8000dec:	f006 fcc0 	bl	8007770 <puts>
		printf("Usage : %s <'now' pour avoir la valeur du moment ou 'all' pour avoir toutes les valeurs>\r\n", argv[0]);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	480b      	ldr	r0, [pc, #44]	; (8000e24 <get_pres+0xbc>)
 8000df8:	f006 fc34 	bl	8007664 <iprintf>
	}
	return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	08008724 	.word	0x08008724
 8000e0c:	20001518 	.word	0x20001518
 8000e10:	08008728 	.word	0x08008728
 8000e14:	200002f4 	.word	0x200002f4
 8000e18:	08008738 	.word	0x08008738
 8000e1c:	0800873c 	.word	0x0800873c
 8000e20:	0800874c 	.word	0x0800874c
 8000e24:	08008774 	.word	0x08008774

08000e28 <get_temp>:

int get_temp(int argc, char ** argv) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	if(argc==2){
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d138      	bne.n	8000eaa <get_temp+0x82>
		if(strncmp("all", argv[1], 1)==0){
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	3304      	adds	r3, #4
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4619      	mov	r1, r3
 8000e42:	4821      	ldr	r0, [pc, #132]	; (8000ec8 <get_temp+0xa0>)
 8000e44:	f006 fcac 	bl	80077a0 <strncmp>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d114      	bne.n	8000e78 <get_temp+0x50>
			for(int k=0; k<val_cpt; k++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	e00c      	b.n	8000e6e <get_temp+0x46>
				//printf("all\r\n");
				printf("Temp%d = %x \r\n",k+1, val[k][0]);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1c59      	adds	r1, r3, #1
 8000e58:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <get_temp+0xa4>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e60:	461a      	mov	r2, r3
 8000e62:	481b      	ldr	r0, [pc, #108]	; (8000ed0 <get_temp+0xa8>)
 8000e64:	f006 fbfe 	bl	8007664 <iprintf>
			for(int k=0; k<val_cpt; k++){
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <get_temp+0xac>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbed      	blt.n	8000e54 <get_temp+0x2c>
			}
		}
		if(strncmp("now", argv[1], 1)==0){
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4619      	mov	r1, r3
 8000e82:	4815      	ldr	r0, [pc, #84]	; (8000ed8 <get_temp+0xb0>)
 8000e84:	f006 fc8c 	bl	80077a0 <strncmp>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d116      	bne.n	8000ebc <get_temp+0x94>
			int c = calcul();
 8000e8e:	f7ff feb3 	bl	8000bf8 <calcul>
 8000e92:	60b8      	str	r0, [r7, #8]
			//printf("P=\r\n");
			printf("T =0X%05lX \r\n", val[val_cpt-1][0]);
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <get_temp+0xac>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <get_temp+0xa4>)
 8000e9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480e      	ldr	r0, [pc, #56]	; (8000edc <get_temp+0xb4>)
 8000ea4:	f006 fbde 	bl	8007664 <iprintf>
 8000ea8:	e008      	b.n	8000ebc <get_temp+0x94>
		}
	}
	else{
		printf("Erreur: nombre d'arguments incorrect\r\n");
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <get_temp+0xb8>)
 8000eac:	f006 fc60 	bl	8007770 <puts>
		printf("Usage : %s <'now' pour avoir la valeur du moment ou 'all' pour avoir toutes les valeurs>\r\n", argv[0]);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <get_temp+0xbc>)
 8000eb8:	f006 fbd4 	bl	8007664 <iprintf>
	}
	return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	08008724 	.word	0x08008724
 8000ecc:	20001518 	.word	0x20001518
 8000ed0:	080087d0 	.word	0x080087d0
 8000ed4:	200002f4 	.word	0x200002f4
 8000ed8:	08008738 	.word	0x08008738
 8000edc:	080087e0 	.word	0x080087e0
 8000ee0:	0800874c 	.word	0x0800874c
 8000ee4:	08008774 	.word	0x08008774

08000ee8 <thermo>:


	vTaskDelete(NULL);
}

int thermo(int argc, char ** argv){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	//xTaskCreate(vTaskCAN, "", STACK_SIZE, (void *) NULL, 1, xHandleC);

	//configuring CAN
	HAL_CAN_Start (&hcan1);
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <thermo+0x84>)
 8000ef4:	f000 fe3d 	bl	8001b72 <HAL_CAN_Start>
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId=0x61;
 8000ef8:	2361      	movs	r3, #97	; 0x61
 8000efa:	60fb      	str	r3, [r7, #12]
	TxHeader.IDE=CAN_ID_STD;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
	TxHeader.RTR=CAN_RTR_DATA;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
	TxHeader.DLC=2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61fb      	str	r3, [r7, #28]
	TxHeader.TransmitGlobalTime=DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3020 	strb.w	r3, [r7, #32]

	//Setting motor to zero
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*) {0x00,0x00} , &mail);
 8000f0e:	f107 010c 	add.w	r1, r7, #12
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <thermo+0x88>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	4815      	ldr	r0, [pc, #84]	; (8000f6c <thermo+0x84>)
 8000f18:	f000 fe6f 	bl	8001bfa <HAL_CAN_AddTxMessage>
	HAL_Delay(100);
 8000f1c:	2064      	movs	r0, #100	; 0x64
 8000f1e:	f000 fd09 	bl	8001934 <HAL_Delay>

	for(int l=0; l<10; l++){
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
 8000f26:	e018      	b.n	8000f5a <thermo+0x72>
		//printf("test\r\n");
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, message, &mail);
 8000f28:	f107 010c 	add.w	r1, r7, #12
 8000f2c:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <thermo+0x88>)
 8000f2e:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <thermo+0x8c>)
 8000f30:	480e      	ldr	r0, [pc, #56]	; (8000f6c <thermo+0x84>)
 8000f32:	f000 fe62 	bl	8001bfa <HAL_CAN_AddTxMessage>
		//Send_CAN_Message(message,&hcan1,pHeader,mail);
		//to code with tasks
		HAL_Delay(1000);
 8000f36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f3a:	f000 fcfb 	bl	8001934 <HAL_Delay>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, zero, &mail);
 8000f3e:	f107 010c 	add.w	r1, r7, #12
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <thermo+0x88>)
 8000f44:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <thermo+0x90>)
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <thermo+0x84>)
 8000f48:	f000 fe57 	bl	8001bfa <HAL_CAN_AddTxMessage>
		HAL_Delay(1000);
 8000f4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f50:	f000 fcf0 	bl	8001934 <HAL_Delay>
	for(int l=0; l<10; l++){
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	3301      	adds	r3, #1
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	2b09      	cmp	r3, #9
 8000f5e:	dde3      	ble.n	8000f28 <thermo+0x40>
	}
	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000133c 	.word	0x2000133c
 8000f70:	20001510 	.word	0x20001510
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000004 	.word	0x20000004

08000f7c <rasp>:

int rasp(int argc, char ** argv){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	printf("Nous avons malheureusement eu beaucoup de mal avec le code Python de la Raspberry. \r\n");
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <rasp+0x20>)
 8000f88:	f006 fbf2 	bl	8007770 <puts>
	printf("Nous avons décidé de présenter un shell fonctionnel sur la STM, sans Raspberry, plutôt que de ne présenter que des codes individuels avec aucun lien du tout. \r\n");
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <rasp+0x24>)
 8000f8e:	f006 fbef 	bl	8007770 <puts>
}
 8000f92:	bf00      	nop
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	080087f0 	.word	0x080087f0
 8000fa0:	08008848 	.word	0x08008848

08000fa4 <vTaskShell>:

void vTaskShell(void * p) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	shell_init();
 8000fac:	f000 f92a 	bl	8001204 <shell_init>
	shell_add('T', get_temp, "*Renvoie la temperature* \r\n →Commande : <T> <'now' pour une temperature ou 'all' pour avoir toutes les temperature> \r\n →Sortie : La ou les valeur(s) de temperatures demandee(s).\r\n");
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <vTaskShell+0x40>)
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <vTaskShell+0x44>)
 8000fb4:	2054      	movs	r0, #84	; 0x54
 8000fb6:	f000 f94d 	bl	8001254 <shell_add>
	shell_add('P', get_pres, "*Renvoie la pression* \r\n →Commande : <P> <'now' pour une pression ou 'all' pour avoir toutes les pressions> \r\n →Sortie : La ou les valeur(s) de pression demandee(s).\r\n");
 8000fba:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <vTaskShell+0x48>)
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <vTaskShell+0x4c>)
 8000fbe:	2050      	movs	r0, #80	; 0x50
 8000fc0:	f000 f948 	bl	8001254 <shell_add>
	shell_add('M', thermo, "*Lance le moteur* \r\n →Commande : <M> \r\n →Sortie : le moteur se met à tourner en fonction de la température mesurée");
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <vTaskShell+0x50>)
 8000fc6:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <vTaskShell+0x54>)
 8000fc8:	204d      	movs	r0, #77	; 0x4d
 8000fca:	f000 f943 	bl	8001254 <shell_add>
	shell_add('R', rasp, "*Ce qu'on aurait aimé faire avec la Raspberry* \r\n →Commande : <R> \r\n →Sortie : ce qu'on aurait aimé faire \r\n");
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <vTaskShell+0x58>)
 8000fd0:	490b      	ldr	r1, [pc, #44]	; (8001000 <vTaskShell+0x5c>)
 8000fd2:	2052      	movs	r0, #82	; 0x52
 8000fd4:	f000 f93e 	bl	8001254 <shell_add>

	shell_run();
 8000fd8:	f000 f9da 	bl	8001390 <shell_run>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	080088f0 	.word	0x080088f0
 8000fe8:	08000e29 	.word	0x08000e29
 8000fec:	080089a8 	.word	0x080089a8
 8000ff0:	08000d69 	.word	0x08000d69
 8000ff4:	08008a54 	.word	0x08008a54
 8000ff8:	08000ee9 	.word	0x08000ee9
 8000ffc:	08008ad0 	.word	0x08008ad0
 8001000:	08000f7d 	.word	0x08000f7d

08001004 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle = NULL;
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800100e:	f000 fc15 	bl	800183c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001012:	f000 f835 	bl	8001080 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001016:	f7ff fc95 	bl	8000944 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800101a:	f000 fb51 	bl	80016c0 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 800101e:	f7ff fbd9 	bl	80007d4 <MX_CAN1_Init>
	MX_I2C1_Init();
 8001022:	f7ff fd3b 	bl	8000a9c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	printf("\r\nChecking for BMP280\r\n");
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <main+0x68>)
 8001028:	f006 fba2 	bl	8007770 <puts>
	BMP280_check();
 800102c:	f7ff fa9c 	bl	8000568 <BMP280_check>
	printf("\r\nConfigure BMP280\r\n");
 8001030:	480f      	ldr	r0, [pc, #60]	; (8001070 <main+0x6c>)
 8001032:	f006 fb9d 	bl	8007770 <puts>
	BMP280_init();
 8001036:	f7ff fae3 	bl	8000600 <BMP280_init>

	//Création du shell
	xReturned = xTaskCreate(
 800103a:	463b      	mov	r3, r7
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	2301      	movs	r3, #1
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001048:	490a      	ldr	r1, [pc, #40]	; (8001074 <main+0x70>)
 800104a:	480b      	ldr	r0, [pc, #44]	; (8001078 <main+0x74>)
 800104c:	f005 f941 	bl	80062d2 <xTaskCreate>
 8001050:	6078      	str	r0, [r7, #4]
			STACK_SIZE,      	/* Stack size in words, not bytes. */
			( void * ) NULL,    /* Parameter passed into the task. */
			1,					/* Priority at which the task is created. */
			&xHandle );      	/* Used to pass out the created task's handle. */

	if( xReturned == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d102      	bne.n	8001060 <main+0x5c>
		printf("Task Shell creation error: Could not allocate required memory\r\n");
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <main+0x78>)
 800105c:	f006 fb88 	bl	8007770 <puts>
	}
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8001060:	f7ff fc4c 	bl	80008fc <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8001064:	f004 ffbd 	bl	8005fe2 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001068:	e7fe      	b.n	8001068 <main+0x64>
 800106a:	bf00      	nop
 800106c:	08008b44 	.word	0x08008b44
 8001070:	08008b5c 	.word	0x08008b5c
 8001074:	08008b70 	.word	0x08008b70
 8001078:	08000fa5 	.word	0x08000fa5
 800107c:	08008b78 	.word	0x08008b78

08001080 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b096      	sub	sp, #88	; 0x58
 8001084:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2244      	movs	r2, #68	; 0x44
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f006 fa36 	bl	8007500 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010a6:	f002 fc57 	bl	8003958 <HAL_PWREx_ControlVoltageScaling>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80010b0:	f000 f837 	bl	8001122 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b4:	2302      	movs	r3, #2
 80010b6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010be:	2310      	movs	r3, #16
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c6:	2302      	movs	r3, #2
 80010c8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80010ce:	230a      	movs	r3, #10
 80010d0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010d2:	2307      	movs	r3, #7
 80010d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fc8e 	bl	8003a04 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80010ee:	f000 f818 	bl	8001122 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2303      	movs	r3, #3
 80010f8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	2104      	movs	r1, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f003 f860 	bl	80041d0 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001116:	f000 f804 	bl	8001122 <Error_Handler>
	}
}
 800111a:	bf00      	nop
 800111c:	3758      	adds	r7, #88	; 0x58
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <__io_putchar>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[_SHELL_FUNC_LIST_MAX_SIZE];

static int dataReady = 0;

int __io_putchar(int ch) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001138:	1d39      	adds	r1, r7, #4
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	2201      	movs	r2, #1
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <__io_putchar+0x20>)
 8001142:	f003 ff55 	bl	8004ff0 <HAL_UART_Transmit>
	return ch;
 8001146:	687b      	ldr	r3, [r7, #4]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200015f0 	.word	0x200015f0

08001154 <uart_read>:

char uart_read() {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, 0xFFFFFFFF);
 800115a:	1df9      	adds	r1, r7, #7
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	2201      	movs	r2, #1
 8001162:	4804      	ldr	r0, [pc, #16]	; (8001174 <uart_read+0x20>)
 8001164:	f003 ffd8 	bl	8005118 <HAL_UART_Receive>

	return c;
 8001168:	79fb      	ldrb	r3, [r7, #7]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200015f0 	.word	0x200015f0

08001178 <uart_write>:

int uart_write(char * s, uint16_t size) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <uart_write+0x24>)
 800118e:	f003 ff2f 	bl	8004ff0 <HAL_UART_Transmit>
	return size;
 8001192:	887b      	ldrh	r3, [r7, #2]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200015f0 	.word	0x200015f0

080011a0 <sh_help>:

void uart_data_ready() {
	dataReady = 1;
}

int sh_help(int argc, char ** argv) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
    int i;
    for(i = 0 ; i < shell_func_list_size ; i++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	e019      	b.n	80011e4 <sh_help+0x44>
        printf("%c %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80011b0:	4911      	ldr	r1, [pc, #68]	; (80011f8 <sh_help+0x58>)
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <sh_help+0x58>)
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	3308      	adds	r3, #8
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4601      	mov	r1, r0
 80011d8:	4808      	ldr	r0, [pc, #32]	; (80011fc <sh_help+0x5c>)
 80011da:	f006 fa43 	bl	8007664 <iprintf>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3301      	adds	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <sh_help+0x60>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dbe0      	blt.n	80011b0 <sh_help+0x10>
    }

    return 0;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200002fc 	.word	0x200002fc
 80011fc:	08008bb8 	.word	0x08008bb8
 8001200:	200002f8 	.word	0x200002f8

08001204 <shell_init>:

void shell_init() {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	printf("\r\n\r\n===== TP Bus et réseaux =====\r\n");
 800120a:	480e      	ldr	r0, [pc, #56]	; (8001244 <shell_init+0x40>)
 800120c:	f006 fab0 	bl	8007770 <puts>
	printf("Tapez 'H' pour obtenir la liste des fonctions disponibles\r\n");
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <shell_init+0x44>)
 8001212:	f006 faad 	bl	8007770 <puts>

	shell_add('H', sh_help, "*Affiche toutes les fontions disponibles du shell* \r\n");
 8001216:	4a0d      	ldr	r2, [pc, #52]	; (800124c <shell_init+0x48>)
 8001218:	490d      	ldr	r1, [pc, #52]	; (8001250 <shell_init+0x4c>)
 800121a:	2048      	movs	r0, #72	; 0x48
 800121c:	f000 f81a 	bl	8001254 <shell_add>

	for (int i = 0 ; i < 3 ; i++) {
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	e005      	b.n	8001232 <shell_init+0x2e>

		HAL_Delay(200);
 8001226:	20c8      	movs	r0, #200	; 0xc8
 8001228:	f000 fb84 	bl	8001934 <HAL_Delay>
	for (int i = 0 ; i < 3 ; i++) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3301      	adds	r3, #1
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	ddf6      	ble.n	8001226 <shell_init+0x22>
	}
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	08008bc0 	.word	0x08008bc0
 8001248:	08008be4 	.word	0x08008be4
 800124c:	08008c20 	.word	0x08008c20
 8001250:	080011a1 	.word	0x080011a1

08001254 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	73fb      	strb	r3, [r7, #15]
    if (shell_func_list_size < _SHELL_FUNC_LIST_MAX_SIZE) {
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <shell_add+0x74>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b3f      	cmp	r3, #63	; 0x3f
 8001268:	dc26      	bgt.n	80012b8 <shell_add+0x64>
        shell_func_list[shell_func_list_size].c = c;
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <shell_add+0x74>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4917      	ldr	r1, [pc, #92]	; (80012cc <shell_add+0x78>)
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	701a      	strb	r2, [r3, #0]
        shell_func_list[shell_func_list_size].func = pfunc;
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <shell_add+0x74>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4912      	ldr	r1, [pc, #72]	; (80012cc <shell_add+0x78>)
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	3304      	adds	r3, #4
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	601a      	str	r2, [r3, #0]
        shell_func_list[shell_func_list_size].description = description;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <shell_add+0x74>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <shell_add+0x78>)
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	3308      	adds	r3, #8
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
        shell_func_list_size++;
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <shell_add+0x74>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <shell_add+0x74>)
 80012b2:	6013      	str	r3, [r2, #0]
        return 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	e001      	b.n	80012bc <shell_add+0x68>
    }

    return -1;
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	200002f8 	.word	0x200002f8
 80012cc:	200002fc 	.word	0x200002fc

080012d0 <shell_exec>:

int shell_exec(char c, char * buf) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	; 0x38
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]

    int argc;
    char * argv[ARGC_MAX];
    char *p;

    for(i = 0 ; i < shell_func_list_size ; i++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
 80012e0:	e040      	b.n	8001364 <shell_exec+0x94>
        if (shell_func_list[i].c == c) {
 80012e2:	4928      	ldr	r1, [pc, #160]	; (8001384 <shell_exec+0xb4>)
 80012e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	79fa      	ldrb	r2, [r7, #7]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d132      	bne.n	800135e <shell_exec+0x8e>
            argc = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
            argv[0] = buf;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	60fb      	str	r3, [r7, #12]

            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001304:	e014      	b.n	8001330 <shell_exec+0x60>
                if(*p == ' ') {
 8001306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b20      	cmp	r3, #32
 800130c:	d10d      	bne.n	800132a <shell_exec+0x5a>
                    *p = '\0';
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
                    argv[argc++] = p+1;
 8001314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	633a      	str	r2, [r7, #48]	; 0x30
 800131a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800131c:	3201      	adds	r2, #1
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001324:	440b      	add	r3, r1
 8001326:	f843 2c2c 	str.w	r2, [r3, #-44]
            for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	3301      	adds	r3, #1
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <shell_exec+0x6e>
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	2b07      	cmp	r3, #7
 800133c:	dde3      	ble.n	8001306 <shell_exec+0x36>
                }
            }

            return shell_func_list[i].func(argc, argv);
 800133e:	4911      	ldr	r1, [pc, #68]	; (8001384 <shell_exec+0xb4>)
 8001340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	3304      	adds	r3, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f107 020c 	add.w	r2, r7, #12
 8001354:	4611      	mov	r1, r2
 8001356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001358:	4798      	blx	r3
 800135a:	4603      	mov	r3, r0
 800135c:	e00e      	b.n	800137c <shell_exec+0xac>
    for(i = 0 ; i < shell_func_list_size ; i++) {
 800135e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001360:	3301      	adds	r3, #1
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <shell_exec+0xb8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800136a:	429a      	cmp	r2, r3
 800136c:	dbb9      	blt.n	80012e2 <shell_exec+0x12>
        }
    }
    printf("%c: no such command\r\n", c);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <shell_exec+0xbc>)
 8001374:	f006 f976 	bl	8007664 <iprintf>
    return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137c:	4618      	mov	r0, r3
 800137e:	3738      	adds	r7, #56	; 0x38
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200002fc 	.word	0x200002fc
 8001388:	200002f8 	.word	0x200002f8
 800138c:	08008c58 	.word	0x08008c58

08001390 <shell_run>:

static char buf[BUFFER_SIZE];
static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
	int reading = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]

	while (1) {
		  uart_write(prompt, 2);
 800139e:	2102      	movs	r1, #2
 80013a0:	4822      	ldr	r0, [pc, #136]	; (800142c <shell_run+0x9c>)
 80013a2:	f7ff fee9 	bl	8001178 <uart_write>
		  reading = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]

		  while(reading) {
 80013aa:	e035      	b.n	8001418 <shell_run+0x88>
			  char c = uart_read();
 80013ac:	f7ff fed2 	bl	8001154 <uart_read>
 80013b0:	4603      	mov	r3, r0
 80013b2:	71fb      	strb	r3, [r7, #7]

			  switch (c) {
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d013      	beq.n	80013e2 <shell_run+0x52>
 80013ba:	2b0d      	cmp	r3, #13
 80013bc:	d11c      	bne.n	80013f8 <shell_run+0x68>
				  //process RETURN key
				  case '\r':
					  //case '\n':
					  printf("\r\n");    //finish line
 80013be:	481c      	ldr	r0, [pc, #112]	; (8001430 <shell_run+0xa0>)
 80013c0:	f006 f9d6 	bl	8007770 <puts>
					  buf[pos++] = 0;     //to use cprintf...
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	60ba      	str	r2, [r7, #8]
 80013ca:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <shell_run+0xa4>)
 80013cc:	2100      	movs	r1, #0
 80013ce:	54d1      	strb	r1, [r2, r3]
					  printf(":%s\r\n", buf);
 80013d0:	4918      	ldr	r1, [pc, #96]	; (8001434 <shell_run+0xa4>)
 80013d2:	4819      	ldr	r0, [pc, #100]	; (8001438 <shell_run+0xa8>)
 80013d4:	f006 f946 	bl	8007664 <iprintf>
					  reading = 0;        //exit read loop
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
					  pos = 0;            //reset buffer
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
					  break;
 80013e0:	e01a      	b.n	8001418 <shell_run+0x88>
					  //backspace
				  case '\b':
					  if (pos > 0) {      //is there a char to delete?
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dd16      	ble.n	8001416 <shell_run+0x86>
						  pos--;          //remove it in buffer
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]

						  uart_write(backspace, 3);
 80013ee:	2103      	movs	r1, #3
 80013f0:	4812      	ldr	r0, [pc, #72]	; (800143c <shell_run+0xac>)
 80013f2:	f7ff fec1 	bl	8001178 <uart_write>
					  }
					  break;
 80013f6:	e00e      	b.n	8001416 <shell_run+0x86>
					  //other characters
				  default:
					  //only store characters if buffer has space
					  if (pos < BUFFER_SIZE) {
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b27      	cmp	r3, #39	; 0x27
 80013fc:	dc0c      	bgt.n	8001418 <shell_run+0x88>
						  uart_write(&c, 1);
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff feb8 	bl	8001178 <uart_write>
						  buf[pos++] = c; //store
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	60ba      	str	r2, [r7, #8]
 800140e:	79f9      	ldrb	r1, [r7, #7]
 8001410:	4a08      	ldr	r2, [pc, #32]	; (8001434 <shell_run+0xa4>)
 8001412:	54d1      	strb	r1, [r2, r3]
 8001414:	e000      	b.n	8001418 <shell_run+0x88>
					  break;
 8001416:	bf00      	nop
		  while(reading) {
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1c6      	bne.n	80013ac <shell_run+0x1c>
					  }
			  }
		  }
		  shell_exec(buf[0], buf);
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <shell_run+0xa4>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4904      	ldr	r1, [pc, #16]	; (8001434 <shell_run+0xa4>)
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff53 	bl	80012d0 <shell_exec>
		  uart_write(prompt, 2);
 800142a:	e7b8      	b.n	800139e <shell_run+0xe>
 800142c:	2000000c 	.word	0x2000000c
 8001430:	08008c70 	.word	0x08008c70
 8001434:	200005fc 	.word	0x200005fc
 8001438:	08008c74 	.word	0x08008c74
 800143c:	20000008 	.word	0x20000008

08001440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_MspInit+0x4c>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <HAL_MspInit+0x4c>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6613      	str	r3, [r2, #96]	; 0x60
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_MspInit+0x4c>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_MspInit+0x4c>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_MspInit+0x4c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6593      	str	r3, [r2, #88]	; 0x58
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_MspInit+0x4c>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	210f      	movs	r1, #15
 800147a:	f06f 0001 	mvn.w	r0, #1
 800147e:	f000 fd72 	bl	8001f66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 fa18 	bl	80018f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014c4:	f005 fb64 	bl	8006b90 <xTaskGetSchedulerState>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014ce:	f005 fda3 	bl	8007018 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <I2C1_EV_IRQHandler+0x10>)
 80014de:	f001 fa41 	bl	8002964 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20001368 	.word	0x20001368

080014ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <I2C1_ER_IRQHandler+0x10>)
 80014f2:	f001 fa51 	bl	8002998 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20001368 	.word	0x20001368

08001500 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <USART2_IRQHandler+0x10>)
 8001506:	f003 fed9 	bl	80052bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200015f0 	.word	0x200015f0

08001514 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e00a      	b.n	800153c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001526:	f3af 8000 	nop.w
 800152a:	4601      	mov	r1, r0
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	b2ca      	uxtb	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf0      	blt.n	8001526 <_read+0x12>
	}

return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e009      	b.n	8001574 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60ba      	str	r2, [r7, #8]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fde1 	bl	8001130 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf1      	blt.n	8001560 <_write+0x12>
	}
	return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_close>:

int _close(int file)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
	return -1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ae:	605a      	str	r2, [r3, #4]
	return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_isatty>:

int _isatty(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
	return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <_sbrk+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <_sbrk+0x60>)
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <_sbrk+0x64>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <_sbrk+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d207      	bcs.n	8001630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001620:	f005 ff34 	bl	800748c <__errno>
 8001624:	4603      	mov	r3, r0
 8001626:	220c      	movs	r2, #12
 8001628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	e009      	b.n	8001644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <_sbrk+0x64>)
 8001640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20018000 	.word	0x20018000
 8001650:	00000400 	.word	0x00000400
 8001654:	20000624 	.word	0x20000624
 8001658:	20001688 	.word	0x20001688

0800165c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <SystemInit+0x5c>)
 8001662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001666:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <SystemInit+0x5c>)
 8001668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <SystemInit+0x60>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <SystemInit+0x60>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <SystemInit+0x60>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <SystemInit+0x60>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <SystemInit+0x60>)
 8001688:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800168c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001690:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <SystemInit+0x60>)
 8001694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001698:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <SystemInit+0x60>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a07      	ldr	r2, [pc, #28]	; (80016bc <SystemInit+0x60>)
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SystemInit+0x60>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00
 80016bc:	40021000 	.word	0x40021000

080016c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_USART2_UART_Init+0x58>)
 80016c6:	4a15      	ldr	r2, [pc, #84]	; (800171c <MX_USART2_UART_Init+0x5c>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_USART2_UART_Init+0x58>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_USART2_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_USART2_UART_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_USART2_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_USART2_UART_Init+0x58>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <MX_USART2_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_USART2_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <MX_USART2_UART_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_USART2_UART_Init+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_USART2_UART_Init+0x58>)
 8001704:	f003 fc26 	bl	8004f54 <HAL_UART_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800170e:	f7ff fd08 	bl	8001122 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200015f0 	.word	0x200015f0
 800171c:	40004400 	.word	0x40004400

08001720 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0ac      	sub	sp, #176	; 0xb0
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2288      	movs	r2, #136	; 0x88
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f005 fedd 	bl	8007500 <memset>
  if(uartHandle->Instance==USART2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a25      	ldr	r2, [pc, #148]	; (80017e0 <HAL_UART_MspInit+0xc0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d143      	bne.n	80017d8 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001750:	2302      	movs	r3, #2
 8001752:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001754:	2300      	movs	r3, #0
 8001756:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4618      	mov	r0, r3
 800175e:	f002 ff3d 	bl	80045dc <HAL_RCCEx_PeriphCLKConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001768:	f7ff fcdb 	bl	8001122 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 8001772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001776:	6593      	str	r3, [r2, #88]	; 0x58
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800179c:	230c      	movs	r3, #12
 800179e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b4:	2307      	movs	r3, #7
 80017b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c4:	f000 fc92 	bl	80020ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2105      	movs	r1, #5
 80017cc:	2026      	movs	r0, #38	; 0x26
 80017ce:	f000 fbca 	bl	8001f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d2:	2026      	movs	r0, #38	; 0x26
 80017d4:	f000 fbe3 	bl	8001f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017d8:	bf00      	nop
 80017da:	37b0      	adds	r7, #176	; 0xb0
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40004400 	.word	0x40004400
 80017e4:	40021000 	.word	0x40021000

080017e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017ec:	f7ff ff36 	bl	800165c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017f2:	e003      	b.n	80017fc <LoopCopyDataInit>

080017f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017fa:	3104      	adds	r1, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017fc:	480a      	ldr	r0, [pc, #40]	; (8001828 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001800:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001802:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001804:	d3f6      	bcc.n	80017f4 <CopyDataInit>
	ldr	r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001808:	e002      	b.n	8001810 <LoopFillZerobss>

0800180a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800180a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800180c:	f842 3b04 	str.w	r3, [r2], #4

08001810 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <LoopForever+0x16>)
	cmp	r2, r3
 8001812:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001814:	d3f9      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001816:	f005 fe3f 	bl	8007498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181a:	f7ff fbf3 	bl	8001004 <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001820:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001824:	08008d74 	.word	0x08008d74
	ldr	r0, =_sdata
 8001828:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800182c:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8001830:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8001834:	20001688 	.word	0x20001688

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_Init+0x3c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_Init+0x3c>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001852:	2003      	movs	r0, #3
 8001854:	f000 fb7c 	bl	8001f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001858:	200f      	movs	r0, #15
 800185a:	f000 f80f 	bl	800187c <HAL_InitTick>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	71fb      	strb	r3, [r7, #7]
 8001868:	e001      	b.n	800186e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800186a:	f7ff fde9 	bl	8001440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800186e:	79fb      	ldrb	r3, [r7, #7]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40022000 	.word	0x40022000

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_InitTick+0x6c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d023      	beq.n	80018d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_InitTick+0x70>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <HAL_InitTick+0x6c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fb87 	bl	8001fba <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10f      	bne.n	80018d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d809      	bhi.n	80018cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f000 fb51 	bl	8001f66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_InitTick+0x74>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e007      	b.n	80018dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e004      	b.n	80018dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	e001      	b.n	80018dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000018 	.word	0x20000018
 80018ec:	20000010 	.word	0x20000010
 80018f0:	20000014 	.word	0x20000014

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000018 	.word	0x20000018
 8001918:	20001674 	.word	0x20001674

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20001674 	.word	0x20001674

08001934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff ffee 	bl	800191c <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d005      	beq.n	800195a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_Delay+0x44>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800195a:	bf00      	nop
 800195c:	f7ff ffde 	bl	800191c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f7      	bhi.n	800195c <HAL_Delay+0x28>
  {
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000018 	.word	0x20000018

0800197c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0ed      	b.n	8001b6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7fe ff50 	bl	8000840 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0202 	bic.w	r2, r2, #2
 80019ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b0:	f7ff ffb4 	bl	800191c <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019b6:	e012      	b.n	80019de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019b8:	f7ff ffb0 	bl	800191c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b0a      	cmp	r3, #10
 80019c4:	d90b      	bls.n	80019de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2205      	movs	r2, #5
 80019d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0c5      	b.n	8001b6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e5      	bne.n	80019b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019fc:	f7ff ff8e 	bl	800191c <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a02:	e012      	b.n	8001a2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a04:	f7ff ff8a 	bl	800191c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b0a      	cmp	r3, #10
 8001a10:	d90b      	bls.n	8001a2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2205      	movs	r2, #5
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e09f      	b.n	8001b6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0e5      	beq.n	8001a04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7e1b      	ldrb	r3, [r3, #24]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d108      	bne.n	8001a52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e007      	b.n	8001a62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7e5b      	ldrb	r3, [r3, #25]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e007      	b.n	8001a8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7e9b      	ldrb	r3, [r3, #26]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d108      	bne.n	8001aa6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0220 	orr.w	r2, r2, #32
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e007      	b.n	8001ab6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0220 	bic.w	r2, r2, #32
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7edb      	ldrb	r3, [r3, #27]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d108      	bne.n	8001ad0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0210 	bic.w	r2, r2, #16
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e007      	b.n	8001ae0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0210 	orr.w	r2, r2, #16
 8001ade:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7f1b      	ldrb	r3, [r3, #28]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d108      	bne.n	8001afa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0208 	orr.w	r2, r2, #8
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e007      	b.n	8001b0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0208 	bic.w	r2, r2, #8
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7f5b      	ldrb	r3, [r3, #29]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d108      	bne.n	8001b24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0204 	orr.w	r2, r2, #4
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e007      	b.n	8001b34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0204 	bic.w	r2, r2, #4
 8001b32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	ea42 0103 	orr.w	r1, r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d12e      	bne.n	8001be4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b9e:	f7ff febd 	bl	800191c <HAL_GetTick>
 8001ba2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ba4:	e012      	b.n	8001bcc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ba6:	f7ff feb9 	bl	800191c <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b0a      	cmp	r3, #10
 8001bb2:	d90b      	bls.n	8001bcc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2205      	movs	r2, #5
 8001bc4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e012      	b.n	8001bf2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1e5      	bne.n	8001ba6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e006      	b.n	8001bf2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
  }
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b089      	sub	sp, #36	; 0x24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c18:	7ffb      	ldrb	r3, [r7, #31]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d003      	beq.n	8001c26 <HAL_CAN_AddTxMessage+0x2c>
 8001c1e:	7ffb      	ldrb	r3, [r7, #31]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	f040 80b8 	bne.w	8001d96 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10a      	bne.n	8001c46 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80a0 	beq.w	8001d86 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	0e1b      	lsrs	r3, r3, #24
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d907      	bls.n	8001c66 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e09e      	b.n	8001da4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c66:	2201      	movs	r2, #1
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10d      	bne.n	8001c94 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c82:	68f9      	ldr	r1, [r7, #12]
 8001c84:	6809      	ldr	r1, [r1, #0]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	440b      	add	r3, r1
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e00f      	b.n	8001cb4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c9e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ca4:	68f9      	ldr	r1, [r7, #12]
 8001ca6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ca8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3318      	adds	r3, #24
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	440b      	add	r3, r1
 8001cb2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6819      	ldr	r1, [r3, #0]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	7d1b      	ldrb	r3, [r3, #20]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d111      	bne.n	8001cf4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3318      	adds	r3, #24
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	6811      	ldr	r1, [r2, #0]
 8001ce4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3318      	adds	r3, #24
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	440b      	add	r3, r1
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3307      	adds	r3, #7
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	061a      	lsls	r2, r3, #24
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3306      	adds	r3, #6
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	041b      	lsls	r3, r3, #16
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3305      	adds	r3, #5
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	3204      	adds	r2, #4
 8001d14:	7812      	ldrb	r2, [r2, #0]
 8001d16:	4610      	mov	r0, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	6811      	ldr	r1, [r2, #0]
 8001d1c:	ea43 0200 	orr.w	r2, r3, r0
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	440b      	add	r3, r1
 8001d26:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3303      	adds	r3, #3
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	061a      	lsls	r2, r3, #24
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3302      	adds	r3, #2
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	041b      	lsls	r3, r3, #16
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3301      	adds	r3, #1
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	4313      	orrs	r3, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	6811      	ldr	r1, [r2, #0]
 8001d52:	ea43 0200 	orr.w	r2, r3, r0
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3318      	adds	r3, #24
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	4413      	add	r3, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	6811      	ldr	r1, [r2, #0]
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3318      	adds	r3, #24
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	440b      	add	r3, r1
 8001d80:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e00e      	b.n	8001da4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e006      	b.n	8001da4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3724      	adds	r7, #36	; 0x24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4907      	ldr	r1, [pc, #28]	; (8001e4c <__NVIC_EnableIRQ+0x38>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	; (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	; (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf28      	it	cs
 8001ec2:	2304      	movcs	r3, #4
 8001ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d902      	bls.n	8001ed4 <NVIC_EncodePriority+0x30>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3b03      	subs	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <NVIC_EncodePriority+0x32>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	4313      	orrs	r3, r2
         );
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f1c:	d301      	bcc.n	8001f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00f      	b.n	8001f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <SysTick_Config+0x40>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f7ff ff8e 	bl	8001e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <SysTick_Config+0x40>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <SysTick_Config+0x40>)
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	e000e010 	.word	0xe000e010

08001f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ff29 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f78:	f7ff ff3e 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	6978      	ldr	r0, [r7, #20]
 8001f84:	f7ff ff8e 	bl	8001ea4 <NVIC_EncodePriority>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff5d 	bl	8001e50 <__NVIC_SetPriority>
}
 8001f96:	bf00      	nop
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff31 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ffa2 	bl	8001f0c <SysTick_Config>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d008      	beq.n	8001ffc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2204      	movs	r2, #4
 8001fee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e022      	b.n	8002042 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 020e 	bic.w	r2, r2, #14
 800200a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f003 021c 	and.w	r2, r3, #28
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d005      	beq.n	8002072 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2204      	movs	r2, #4
 800206a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e029      	b.n	80020c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 020e 	bic.w	r2, r2, #14
 8002080:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f003 021c 	and.w	r2, r3, #28
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
    }
  }
  return status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020de:	b2db      	uxtb	r3, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fa:	e17f      	b.n	80023fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8171 	beq.w	80023f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d00b      	beq.n	8002134 <HAL_GPIO_Init+0x48>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002128:	2b11      	cmp	r3, #17
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b12      	cmp	r3, #18
 8002132:	d130      	bne.n	8002196 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800216a:	2201      	movs	r2, #1
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f003 0201 	and.w	r2, r3, #1
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d118      	bne.n	80021d4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021a8:	2201      	movs	r2, #1
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	f003 0201 	and.w	r2, r3, #1
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x128>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b12      	cmp	r3, #18
 8002212:	d123      	bne.n	800225c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	220f      	movs	r2, #15
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	6939      	ldr	r1, [r7, #16]
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80ac 	beq.w	80023f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_GPIO_Init+0x330>)
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	4a5e      	ldr	r2, [pc, #376]	; (800241c <HAL_GPIO_Init+0x330>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6613      	str	r3, [r2, #96]	; 0x60
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_GPIO_Init+0x330>)
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022b6:	4a5a      	ldr	r2, [pc, #360]	; (8002420 <HAL_GPIO_Init+0x334>)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022e0:	d025      	beq.n	800232e <HAL_GPIO_Init+0x242>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4f      	ldr	r2, [pc, #316]	; (8002424 <HAL_GPIO_Init+0x338>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01f      	beq.n	800232a <HAL_GPIO_Init+0x23e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4e      	ldr	r2, [pc, #312]	; (8002428 <HAL_GPIO_Init+0x33c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_GPIO_Init+0x23a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4d      	ldr	r2, [pc, #308]	; (800242c <HAL_GPIO_Init+0x340>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x236>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4c      	ldr	r2, [pc, #304]	; (8002430 <HAL_GPIO_Init+0x344>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_Init+0x232>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4b      	ldr	r2, [pc, #300]	; (8002434 <HAL_GPIO_Init+0x348>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_Init+0x22e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <HAL_GPIO_Init+0x34c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_Init+0x22a>
 8002312:	2306      	movs	r3, #6
 8002314:	e00c      	b.n	8002330 <HAL_GPIO_Init+0x244>
 8002316:	2307      	movs	r3, #7
 8002318:	e00a      	b.n	8002330 <HAL_GPIO_Init+0x244>
 800231a:	2305      	movs	r3, #5
 800231c:	e008      	b.n	8002330 <HAL_GPIO_Init+0x244>
 800231e:	2304      	movs	r3, #4
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x244>
 8002322:	2303      	movs	r3, #3
 8002324:	e004      	b.n	8002330 <HAL_GPIO_Init+0x244>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_Init+0x244>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x244>
 800232e:	2300      	movs	r3, #0
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	f002 0203 	and.w	r2, r2, #3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002340:	4937      	ldr	r1, [pc, #220]	; (8002420 <HAL_GPIO_Init+0x334>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_GPIO_Init+0x350>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002372:	4a32      	ldr	r2, [pc, #200]	; (800243c <HAL_GPIO_Init+0x350>)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_GPIO_Init+0x350>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_GPIO_Init+0x350>)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_GPIO_Init+0x350>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023c6:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_GPIO_Init+0x350>)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_GPIO_Init+0x350>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_GPIO_Init+0x350>)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa22 f303 	lsr.w	r3, r2, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	f47f ae78 	bne.w	80020fc <HAL_GPIO_Init+0x10>
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	371c      	adds	r7, #28
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	40010000 	.word	0x40010000
 8002424:	48000400 	.word	0x48000400
 8002428:	48000800 	.word	0x48000800
 800242c:	48000c00 	.word	0x48000c00
 8002430:	48001000 	.word	0x48001000
 8002434:	48001400 	.word	0x48001400
 8002438:	48001800 	.word	0x48001800
 800243c:	40010400 	.word	0x40010400

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800245c:	e002      	b.n	8002464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e081      	b.n	8002586 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fb40 	bl	8000b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2224      	movs	r2, #36	; 0x24
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	e006      	b.n	80024f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d104      	bne.n	800250a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002508:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800252c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	ea42 0103 	orr.w	r1, r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	021a      	lsls	r2, r3, #8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69d9      	ldr	r1, [r3, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	460b      	mov	r3, r1
 800259e:	817b      	strh	r3, [r7, #10]
 80025a0:	4613      	mov	r3, r2
 80025a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	f040 80da 	bne.w	8002766 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_I2C_Master_Transmit+0x30>
 80025bc:	2302      	movs	r3, #2
 80025be:	e0d3      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025c8:	f7ff f9a8 	bl	800191c <HAL_GetTick>
 80025cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2319      	movs	r3, #25
 80025d4:	2201      	movs	r2, #1
 80025d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fefb 	bl	80033d6 <I2C_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0be      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2221      	movs	r2, #33	; 0x21
 80025ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2210      	movs	r2, #16
 80025f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	893a      	ldrh	r2, [r7, #8]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	2bff      	cmp	r3, #255	; 0xff
 800261a:	d90e      	bls.n	800263a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	22ff      	movs	r2, #255	; 0xff
 8002620:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	b2da      	uxtb	r2, r3
 8002628:	8979      	ldrh	r1, [r7, #10]
 800262a:	4b51      	ldr	r3, [pc, #324]	; (8002770 <HAL_I2C_Master_Transmit+0x1e0>)
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f001 f85e 	bl	80036f4 <I2C_TransferConfig>
 8002638:	e06c      	b.n	8002714 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	b2da      	uxtb	r2, r3
 800264a:	8979      	ldrh	r1, [r7, #10]
 800264c:	4b48      	ldr	r3, [pc, #288]	; (8002770 <HAL_I2C_Master_Transmit+0x1e0>)
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f001 f84d 	bl	80036f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800265a:	e05b      	b.n	8002714 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	6a39      	ldr	r1, [r7, #32]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fef8 	bl	8003456 <I2C_WaitOnTXISFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e07b      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	781a      	ldrb	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d034      	beq.n	8002714 <HAL_I2C_Master_Transmit+0x184>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d130      	bne.n	8002714 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fe8a 	bl	80033d6 <I2C_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e04d      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2bff      	cmp	r3, #255	; 0xff
 80026d4:	d90e      	bls.n	80026f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	22ff      	movs	r2, #255	; 0xff
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	8979      	ldrh	r1, [r7, #10]
 80026e4:	2300      	movs	r3, #0
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f001 f801 	bl	80036f4 <I2C_TransferConfig>
 80026f2:	e00f      	b.n	8002714 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002702:	b2da      	uxtb	r2, r3
 8002704:	8979      	ldrh	r1, [r7, #10]
 8002706:	2300      	movs	r3, #0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fff0 	bl	80036f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d19e      	bne.n	800265c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	6a39      	ldr	r1, [r7, #32]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fed7 	bl	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e01a      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2220      	movs	r2, #32
 8002738:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_I2C_Master_Transmit+0x1e4>)
 8002746:	400b      	ands	r3, r1
 8002748:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	80002000 	.word	0x80002000
 8002774:	fe00e800 	.word	0xfe00e800

08002778 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	461a      	mov	r2, r3
 8002784:	460b      	mov	r3, r1
 8002786:	817b      	strh	r3, [r7, #10]
 8002788:	4613      	mov	r3, r2
 800278a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b20      	cmp	r3, #32
 8002796:	f040 80db 	bne.w	8002950 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_I2C_Master_Receive+0x30>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e0d4      	b.n	8002952 <HAL_I2C_Master_Receive+0x1da>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027b0:	f7ff f8b4 	bl	800191c <HAL_GetTick>
 80027b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	2319      	movs	r3, #25
 80027bc:	2201      	movs	r2, #1
 80027be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fe07 	bl	80033d6 <I2C_WaitOnFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0bf      	b.n	8002952 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2222      	movs	r2, #34	; 0x22
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2210      	movs	r2, #16
 80027de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	893a      	ldrh	r2, [r7, #8]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2bff      	cmp	r3, #255	; 0xff
 8002802:	d90e      	bls.n	8002822 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	22ff      	movs	r2, #255	; 0xff
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	b2da      	uxtb	r2, r3
 8002810:	8979      	ldrh	r1, [r7, #10]
 8002812:	4b52      	ldr	r3, [pc, #328]	; (800295c <HAL_I2C_Master_Receive+0x1e4>)
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 ff6a 	bl	80036f4 <I2C_TransferConfig>
 8002820:	e06d      	b.n	80028fe <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	b2da      	uxtb	r2, r3
 8002832:	8979      	ldrh	r1, [r7, #10]
 8002834:	4b49      	ldr	r3, [pc, #292]	; (800295c <HAL_I2C_Master_Receive+0x1e4>)
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 ff59 	bl	80036f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002842:	e05c      	b.n	80028fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	6a39      	ldr	r1, [r7, #32]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fe81 	bl	8003550 <I2C_WaitOnRXNEFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e07c      	b.n	8002952 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d034      	beq.n	80028fe <HAL_I2C_Master_Receive+0x186>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	d130      	bne.n	80028fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2200      	movs	r2, #0
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fd95 	bl	80033d6 <I2C_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e04d      	b.n	8002952 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2bff      	cmp	r3, #255	; 0xff
 80028be:	d90e      	bls.n	80028de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	22ff      	movs	r2, #255	; 0xff
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	8979      	ldrh	r1, [r7, #10]
 80028ce:	2300      	movs	r3, #0
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 ff0c 	bl	80036f4 <I2C_TransferConfig>
 80028dc:	e00f      	b.n	80028fe <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	8979      	ldrh	r1, [r7, #10]
 80028f0:	2300      	movs	r3, #0
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fefb 	bl	80036f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d19d      	bne.n	8002844 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	6a39      	ldr	r1, [r7, #32]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fde2 	bl	80034d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e01a      	b.n	8002952 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2220      	movs	r2, #32
 8002922:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_I2C_Master_Receive+0x1e8>)
 8002930:	400b      	ands	r3, r1
 8002932:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
  }
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	80002400 	.word	0x80002400
 8002960:	fe00e800 	.word	0xfe00e800

08002964 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	68f9      	ldr	r1, [r7, #12]
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
  }
}
 8002990:	bf00      	nop
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d010      	beq.n	80029de <HAL_I2C_ER_IRQHandler+0x46>
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	09db      	lsrs	r3, r3, #7
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029dc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	0a9b      	lsrs	r3, r3, #10
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d010      	beq.n	8002a0c <HAL_I2C_ER_IRQHandler+0x74>
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	09db      	lsrs	r3, r3, #7
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f043 0208 	orr.w	r2, r3, #8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	0a5b      	lsrs	r3, r3, #9
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <HAL_I2C_ER_IRQHandler+0xa2>
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	09db      	lsrs	r3, r3, #7
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f043 0202 	orr.w	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a38:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 030b 	and.w	r3, r3, #11
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fb89 	bl	8003164 <I2C_ITError>
  }
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <I2C_Slave_ISR_IT+0x24>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0ec      	b.n	8002cd8 <I2C_Slave_ISR_IT+0x1fe>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <I2C_Slave_ISR_IT+0x4c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002b1e:	6939      	ldr	r1, [r7, #16]
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f9bf 	bl	8002ea4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d04d      	beq.n	8002bce <I2C_Slave_ISR_IT+0xf4>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d047      	beq.n	8002bce <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d128      	bne.n	8002b9a <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b28      	cmp	r3, #40	; 0x28
 8002b52:	d108      	bne.n	8002b66 <I2C_Slave_ISR_IT+0x8c>
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b5a:	d104      	bne.n	8002b66 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b5c:	6939      	ldr	r1, [r7, #16]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 faaa 	bl	80030b8 <I2C_ITListenCplt>
 8002b64:	e032      	b.n	8002bcc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b29      	cmp	r3, #41	; 0x29
 8002b70:	d10e      	bne.n	8002b90 <I2C_Slave_ISR_IT+0xb6>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b78:	d00a      	beq.n	8002b90 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2210      	movs	r2, #16
 8002b80:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fbe5 	bl	8003352 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f92d 	bl	8002de8 <I2C_ITSlaveSeqCplt>
 8002b8e:	e01d      	b.n	8002bcc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2210      	movs	r2, #16
 8002b96:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002b98:	e096      	b.n	8002cc8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	f043 0204 	orr.w	r2, r3, #4
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <I2C_Slave_ISR_IT+0xe4>
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bba:	f040 8085 	bne.w	8002cc8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 facd 	bl	8003164 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002bca:	e07d      	b.n	8002cc8 <I2C_Slave_ISR_IT+0x1ee>
 8002bcc:	e07c      	b.n	8002cc8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d030      	beq.n	8002c3c <I2C_Slave_ISR_IT+0x162>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d02a      	beq.n	8002c3c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d018      	beq.n	8002c22 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d14f      	bne.n	8002ccc <I2C_Slave_ISR_IT+0x1f2>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c32:	d04b      	beq.n	8002ccc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f8d7 	bl	8002de8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002c3a:	e047      	b.n	8002ccc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	08db      	lsrs	r3, r3, #3
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	08db      	lsrs	r3, r3, #3
 8002c4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002c54:	6939      	ldr	r1, [r7, #16]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f842 	bl	8002ce0 <I2C_ITAddrCplt>
 8002c5c:	e037      	b.n	8002cce <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	085b      	lsrs	r3, r3, #1
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d031      	beq.n	8002cce <I2C_Slave_ISR_IT+0x1f4>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d02b      	beq.n	8002cce <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d018      	beq.n	8002cb2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
 8002cb0:	e00d      	b.n	8002cce <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb8:	d002      	beq.n	8002cc0 <I2C_Slave_ISR_IT+0x1e6>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d106      	bne.n	8002cce <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f891 	bl	8002de8 <I2C_ITSlaveSeqCplt>
 8002cc6:	e002      	b.n	8002cce <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002cc8:	bf00      	nop
 8002cca:	e000      	b.n	8002cce <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002ccc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cf6:	2b28      	cmp	r3, #40	; 0x28
 8002cf8:	d16a      	bne.n	8002dd0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d18:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d26:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d34:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d138      	bne.n	8002db0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	09db      	lsrs	r3, r3, #7
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	89bb      	ldrh	r3, [r7, #12]
 8002d46:	4053      	eors	r3, r2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f003 0306 	and.w	r3, r3, #6
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d11c      	bne.n	8002d8c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d52:	897b      	ldrh	r3, [r7, #10]
 8002d54:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d13b      	bne.n	8002de0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2208      	movs	r2, #8
 8002d74:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d7e:	89ba      	ldrh	r2, [r7, #12]
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fe7c 	bl	8002a82 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d8a:	e029      	b.n	8002de0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002d8c:	893b      	ldrh	r3, [r7, #8]
 8002d8e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fcdb 	bl	8003750 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002da2:	89ba      	ldrh	r2, [r7, #12]
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	4619      	mov	r1, r3
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fe6a 	bl	8002a82 <HAL_I2C_AddrCallback>
}
 8002dae:	e017      	b.n	8002de0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002db0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fccb 	bl	8003750 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dc2:	89ba      	ldrh	r2, [r7, #12]
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff fe5a 	bl	8002a82 <HAL_I2C_AddrCallback>
}
 8002dce:	e007      	b.n	8002de0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	0b9b      	lsrs	r3, r3, #14
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e00d      	b.n	8002e3a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	0bdb      	lsrs	r3, r3, #15
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e38:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b29      	cmp	r3, #41	; 0x29
 8002e44:	d112      	bne.n	8002e6c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2228      	movs	r2, #40	; 0x28
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e54:	2101      	movs	r1, #1
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fc7a 	bl	8003750 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff fdf8 	bl	8002a5a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e6a:	e017      	b.n	8002e9c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b2a      	cmp	r3, #42	; 0x2a
 8002e76:	d111      	bne.n	8002e9c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2228      	movs	r2, #40	; 0x28
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2222      	movs	r2, #34	; 0x22
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e86:	2102      	movs	r1, #2
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fc61 	bl	8003750 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff fde9 	bl	8002a6e <HAL_I2C_SlaveRxCpltCallback>
}
 8002e9c:	bf00      	nop
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b21      	cmp	r3, #33	; 0x21
 8002ece:	d002      	beq.n	8002ed6 <I2C_ITSlaveCplt+0x32>
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b29      	cmp	r3, #41	; 0x29
 8002ed4:	d108      	bne.n	8002ee8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ed6:	f248 0101 	movw	r1, #32769	; 0x8001
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fc38 	bl	8003750 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2221      	movs	r2, #33	; 0x21
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee6:	e00d      	b.n	8002f04 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b22      	cmp	r3, #34	; 0x22
 8002eec:	d002      	beq.n	8002ef4 <I2C_ITSlaveCplt+0x50>
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ef2:	d107      	bne.n	8002f04 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ef4:	f248 0102 	movw	r1, #32770	; 0x8002
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fc29 	bl	8003750 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2222      	movs	r2, #34	; 0x22
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f12:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b64      	ldr	r3, [pc, #400]	; (80030b0 <I2C_ITSlaveCplt+0x20c>)
 8002f20:	400b      	ands	r3, r1
 8002f22:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fa14 	bl	8003352 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	0b9b      	lsrs	r3, r3, #14
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d013      	beq.n	8002f5e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d020      	beq.n	8002f90 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f5c:	e018      	b.n	8002f90 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	0bdb      	lsrs	r3, r3, #15
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f78:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	089b      	lsrs	r3, r3, #2
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00c      	beq.n	8002fde <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	f043 0204 	orr.w	r2, r3, #4
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	2b00      	cmp	r3, #0
 8003008:	d010      	beq.n	800302c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f8a7 	bl	8003164 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b28      	cmp	r3, #40	; 0x28
 8003020:	d141      	bne.n	80030a6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003022:	6979      	ldr	r1, [r7, #20]
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f847 	bl	80030b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800302a:	e03c      	b.n	80030a6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003034:	d014      	beq.n	8003060 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fed6 	bl	8002de8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <I2C_ITSlaveCplt+0x210>)
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff fd20 	bl	8002a9e <HAL_I2C_ListenCpltCallback>
}
 800305e:	e022      	b.n	80030a6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b22      	cmp	r3, #34	; 0x22
 800306a:	d10e      	bne.n	800308a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff fcf3 	bl	8002a6e <HAL_I2C_SlaveRxCpltCallback>
}
 8003088:	e00d      	b.n	80030a6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fcda 	bl	8002a5a <HAL_I2C_SlaveTxCpltCallback>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	fe00e800 	.word	0xfe00e800
 80030b4:	ffff0000 	.word	0xffff0000

080030b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a26      	ldr	r2, [pc, #152]	; (8003160 <I2C_ITListenCplt+0xa8>)
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d022      	beq.n	8003136 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	2b00      	cmp	r3, #0
 800310e:	d012      	beq.n	8003136 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f043 0204 	orr.w	r2, r3, #4
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003136:	f248 0103 	movw	r1, #32771	; 0x8003
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fb08 	bl	8003750 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2210      	movs	r2, #16
 8003146:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fca4 	bl	8002a9e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	ffff0000 	.word	0xffff0000

08003164 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a5d      	ldr	r2, [pc, #372]	; (80032f8 <I2C_ITError+0x194>)
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	2b28      	cmp	r3, #40	; 0x28
 800319a:	d005      	beq.n	80031a8 <I2C_ITError+0x44>
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b29      	cmp	r3, #41	; 0x29
 80031a0:	d002      	beq.n	80031a8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b2a      	cmp	r3, #42	; 0x2a
 80031a6:	d10b      	bne.n	80031c0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031a8:	2103      	movs	r1, #3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fad0 	bl	8003750 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2228      	movs	r2, #40	; 0x28
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a50      	ldr	r2, [pc, #320]	; (80032fc <I2C_ITError+0x198>)
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34
 80031be:	e011      	b.n	80031e4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031c0:	f248 0103 	movw	r1, #32771	; 0x8003
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fac3 	bl	8003750 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b60      	cmp	r3, #96	; 0x60
 80031d4:	d003      	beq.n	80031de <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d039      	beq.n	8003266 <I2C_ITError+0x102>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b11      	cmp	r3, #17
 80031f6:	d002      	beq.n	80031fe <I2C_ITError+0x9a>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b21      	cmp	r3, #33	; 0x21
 80031fc:	d133      	bne.n	8003266 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800320c:	d107      	bne.n	800321e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800321c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe ff54 	bl	80020d0 <HAL_DMA_GetState>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	d017      	beq.n	800325e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	4a33      	ldr	r2, [pc, #204]	; (8003300 <I2C_ITError+0x19c>)
 8003234:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe ff03 	bl	800204e <HAL_DMA_Abort_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04d      	beq.n	80032ea <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003258:	4610      	mov	r0, r2
 800325a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800325c:	e045      	b.n	80032ea <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f850 	bl	8003304 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003264:	e041      	b.n	80032ea <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d039      	beq.n	80032e2 <I2C_ITError+0x17e>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b12      	cmp	r3, #18
 8003272:	d002      	beq.n	800327a <I2C_ITError+0x116>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b22      	cmp	r3, #34	; 0x22
 8003278:	d133      	bne.n	80032e2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003288:	d107      	bne.n	800329a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003298:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe ff16 	bl	80020d0 <HAL_DMA_GetState>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d017      	beq.n	80032da <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	4a14      	ldr	r2, [pc, #80]	; (8003300 <I2C_ITError+0x19c>)
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fec5 	bl	800204e <HAL_DMA_Abort_IT>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d011      	beq.n	80032ee <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032d4:	4610      	mov	r0, r2
 80032d6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032d8:	e009      	b.n	80032ee <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f812 	bl	8003304 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032e0:	e005      	b.n	80032ee <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f80e 	bl	8003304 <I2C_TreatErrorCallback>
  }
}
 80032e8:	e002      	b.n	80032f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032ea:	bf00      	nop
 80032ec:	e000      	b.n	80032f0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032ee:	bf00      	nop
}
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	ffff0000 	.word	0xffff0000
 80032fc:	08002adb 	.word	0x08002adb
 8003300:	0800339b 	.word	0x0800339b

08003304 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b60      	cmp	r3, #96	; 0x60
 8003316:	d10e      	bne.n	8003336 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff fbc9 	bl	8002ac6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003334:	e009      	b.n	800334a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff fbb4 	bl	8002ab2 <HAL_I2C_ErrorCallback>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b02      	cmp	r3, #2
 8003366:	d103      	bne.n	8003370 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2200      	movs	r2, #0
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d007      	beq.n	800338e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	619a      	str	r2, [r3, #24]
  }
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	2200      	movs	r2, #0
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	2200      	movs	r2, #0
 80033c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7ff ff9b 	bl	8003304 <I2C_TreatErrorCallback>
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	4613      	mov	r3, r2
 80033e4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e6:	e022      	b.n	800342e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d01e      	beq.n	800342e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f0:	f7fe fa94 	bl	800191c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d302      	bcc.n	8003406 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d113      	bne.n	800342e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	f043 0220 	orr.w	r2, r3, #32
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e00f      	b.n	800344e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699a      	ldr	r2, [r3, #24]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4013      	ands	r3, r2
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	429a      	cmp	r2, r3
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	429a      	cmp	r2, r3
 800344a:	d0cd      	beq.n	80033e8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003462:	e02c      	b.n	80034be <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f8dd 	bl	8003628 <I2C_IsAcknowledgeFailed>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e02a      	b.n	80034ce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d01e      	beq.n	80034be <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003480:	f7fe fa4c 	bl	800191c <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	429a      	cmp	r2, r3
 800348e:	d302      	bcc.n	8003496 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d113      	bne.n	80034be <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f043 0220 	orr.w	r2, r3, #32
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e007      	b.n	80034ce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d1cb      	bne.n	8003464 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e2:	e028      	b.n	8003536 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f89d 	bl	8003628 <I2C_IsAcknowledgeFailed>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e026      	b.n	8003546 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f8:	f7fe fa10 	bl	800191c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d302      	bcc.n	800350e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d113      	bne.n	8003536 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e007      	b.n	8003546 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b20      	cmp	r3, #32
 8003542:	d1cf      	bne.n	80034e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800355c:	e055      	b.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f860 	bl	8003628 <I2C_IsAcknowledgeFailed>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e053      	b.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b20      	cmp	r3, #32
 800357e:	d129      	bne.n	80035d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b04      	cmp	r3, #4
 800358c:	d105      	bne.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e03f      	b.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2220      	movs	r2, #32
 80035a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80035ae:	400b      	ands	r3, r1
 80035b0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e022      	b.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d4:	f7fe f9a2 	bl	800191c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d302      	bcc.n	80035ea <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b04      	cmp	r3, #4
 8003616:	d1a2      	bne.n	800355e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	fe00e800 	.word	0xfe00e800

08003628 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b10      	cmp	r3, #16
 8003640:	d151      	bne.n	80036e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003642:	e022      	b.n	800368a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364a:	d01e      	beq.n	800368a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364c:	f7fe f966 	bl	800191c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	d302      	bcc.n	8003662 <I2C_IsAcknowledgeFailed+0x3a>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d113      	bne.n	800368a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e02e      	b.n	80036e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b20      	cmp	r3, #32
 8003696:	d1d5      	bne.n	8003644 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2210      	movs	r2, #16
 800369e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2220      	movs	r2, #32
 80036a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff fe52 	bl	8003352 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80036ba:	400b      	ands	r3, r1
 80036bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f043 0204 	orr.w	r2, r3, #4
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	fe00e800 	.word	0xfe00e800

080036f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	4613      	mov	r3, r2
 8003704:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	0d5b      	lsrs	r3, r3, #21
 8003710:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <I2C_TransferConfig+0x58>)
 8003716:	430b      	orrs	r3, r1
 8003718:	43db      	mvns	r3, r3
 800371a:	ea02 0103 	and.w	r1, r2, r3
 800371e:	897b      	ldrh	r3, [r7, #10]
 8003720:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003724:	7a7b      	ldrb	r3, [r7, #9]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	431a      	orrs	r2, r3
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	03ff63ff 	.word	0x03ff63ff

08003750 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00f      	beq.n	800378a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003770:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800377e:	2b28      	cmp	r3, #40	; 0x28
 8003780:	d003      	beq.n	800378a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003788:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00f      	beq.n	80037b4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800379a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037a8:	2b28      	cmp	r3, #40	; 0x28
 80037aa:	d003      	beq.n	80037b4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80037b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80037b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	da03      	bge.n	80037c4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037c4:	887b      	ldrh	r3, [r7, #2]
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d103      	bne.n	80037d2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d103      	bne.n	80037e0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f043 0320 	orr.w	r3, r3, #32
 80037de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80037e0:	887b      	ldrh	r3, [r7, #2]
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d103      	bne.n	80037ee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6819      	ldr	r1, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	43da      	mvns	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	400a      	ands	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b20      	cmp	r3, #32
 8003820:	d138      	bne.n	8003894 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800382c:	2302      	movs	r3, #2
 800382e:	e032      	b.n	8003896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800385e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6819      	ldr	r1, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d139      	bne.n	800392c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e033      	b.n	800392e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2224      	movs	r2, #36	; 0x24
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <HAL_PWREx_GetVoltageRange+0x18>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40007000 	.word	0x40007000

08003958 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003966:	d130      	bne.n	80039ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003968:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003974:	d038      	beq.n	80039e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003976:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003984:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2232      	movs	r2, #50	; 0x32
 800398c:	fb02 f303 	mul.w	r3, r2, r3
 8003990:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	0c9b      	lsrs	r3, r3, #18
 8003998:	3301      	adds	r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800399c:	e002      	b.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039a4:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b0:	d102      	bne.n	80039b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f2      	bne.n	800399e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c4:	d110      	bne.n	80039e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e00f      	b.n	80039ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d6:	d007      	beq.n	80039e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039e0:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40007000 	.word	0x40007000
 80039fc:	20000010 	.word	0x20000010
 8003a00:	431bde83 	.word	0x431bde83

08003a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e3d4      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a16:	4ba1      	ldr	r3, [pc, #644]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a20:	4b9e      	ldr	r3, [pc, #632]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80e4 	beq.w	8003c00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_RCC_OscConfig+0x4a>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b0c      	cmp	r3, #12
 8003a42:	f040 808b 	bne.w	8003b5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 8087 	bne.w	8003b5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a4e:	4b93      	ldr	r3, [pc, #588]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_RCC_OscConfig+0x62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e3ac      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1a      	ldr	r2, [r3, #32]
 8003a6a:	4b8c      	ldr	r3, [pc, #560]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <HAL_RCC_OscConfig+0x7c>
 8003a76:	4b89      	ldr	r3, [pc, #548]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a7e:	e005      	b.n	8003a8c <HAL_RCC_OscConfig+0x88>
 8003a80:	4b86      	ldr	r3, [pc, #536]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d223      	bcs.n	8003ad8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fd41 	bl	800451c <RCC_SetFlashLatencyFromMSIRange>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e38d      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa4:	4b7d      	ldr	r3, [pc, #500]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a7c      	ldr	r2, [pc, #496]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003aaa:	f043 0308 	orr.w	r3, r3, #8
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b7a      	ldr	r3, [pc, #488]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4977      	ldr	r1, [pc, #476]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ac2:	4b76      	ldr	r3, [pc, #472]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	4972      	ldr	r1, [pc, #456]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
 8003ad6:	e025      	b.n	8003b24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ad8:	4b70      	ldr	r3, [pc, #448]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a6f      	ldr	r2, [pc, #444]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003ade:	f043 0308 	orr.w	r3, r3, #8
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b6d      	ldr	r3, [pc, #436]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	496a      	ldr	r1, [pc, #424]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003af6:	4b69      	ldr	r3, [pc, #420]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	4965      	ldr	r1, [pc, #404]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fd01 	bl	800451c <RCC_SetFlashLatencyFromMSIRange>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e34d      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b24:	f000 fc36 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b5c      	ldr	r3, [pc, #368]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	091b      	lsrs	r3, r3, #4
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	495a      	ldr	r1, [pc, #360]	; (8003ca0 <HAL_RCC_OscConfig+0x29c>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b40:	4a58      	ldr	r2, [pc, #352]	; (8003ca4 <HAL_RCC_OscConfig+0x2a0>)
 8003b42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b44:	4b58      	ldr	r3, [pc, #352]	; (8003ca8 <HAL_RCC_OscConfig+0x2a4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd fe97 	bl	800187c <HAL_InitTick>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d052      	beq.n	8003bfe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	e331      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d032      	beq.n	8003bca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b64:	4b4d      	ldr	r3, [pc, #308]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4c      	ldr	r2, [pc, #304]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b70:	f7fd fed4 	bl	800191c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b78:	f7fd fed0 	bl	800191c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e31a      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b8a:	4b44      	ldr	r3, [pc, #272]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b96:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a40      	ldr	r2, [pc, #256]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003b9c:	f043 0308 	orr.w	r3, r3, #8
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	493b      	ldr	r1, [pc, #236]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb4:	4b39      	ldr	r3, [pc, #228]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	4936      	ldr	r1, [pc, #216]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	e01a      	b.n	8003c00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bca:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a33      	ldr	r2, [pc, #204]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bd6:	f7fd fea1 	bl	800191c <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bde:	f7fd fe9d 	bl	800191c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e2e7      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bf0:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f0      	bne.n	8003bde <HAL_RCC_OscConfig+0x1da>
 8003bfc:	e000      	b.n	8003c00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d074      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d005      	beq.n	8003c1e <HAL_RCC_OscConfig+0x21a>
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b0c      	cmp	r3, #12
 8003c16:	d10e      	bne.n	8003c36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d10b      	bne.n	8003c36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1e:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d064      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x2f0>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d160      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e2c4      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_OscConfig+0x24a>
 8003c40:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	e01d      	b.n	8003c8a <HAL_RCC_OscConfig+0x286>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c56:	d10c      	bne.n	8003c72 <HAL_RCC_OscConfig+0x26e>
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a0f      	ldr	r2, [pc, #60]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	e00b      	b.n	8003c8a <HAL_RCC_OscConfig+0x286>
 8003c72:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a06      	ldr	r2, [pc, #24]	; (8003c9c <HAL_RCC_OscConfig+0x298>)
 8003c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd fe43 	bl	800191c <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c98:	e011      	b.n	8003cbe <HAL_RCC_OscConfig+0x2ba>
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	08008c84 	.word	0x08008c84
 8003ca4:	20000010 	.word	0x20000010
 8003ca8:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fd fe36 	bl	800191c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e280      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cbe:	4baf      	ldr	r3, [pc, #700]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x2a8>
 8003cca:	e014      	b.n	8003cf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fe26 	bl	800191c <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fd fe22 	bl	800191c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e26c      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ce6:	4ba5      	ldr	r3, [pc, #660]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x2d0>
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d060      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_OscConfig+0x310>
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d119      	bne.n	8003d42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d116      	bne.n	8003d42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d14:	4b99      	ldr	r3, [pc, #612]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_OscConfig+0x328>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e249      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b93      	ldr	r3, [pc, #588]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	4990      	ldr	r1, [pc, #576]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d40:	e040      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d023      	beq.n	8003d92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d4a:	4b8c      	ldr	r3, [pc, #560]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a8b      	ldr	r2, [pc, #556]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fd fde1 	bl	800191c <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5e:	f7fd fddd 	bl	800191c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e227      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d70:	4b82      	ldr	r3, [pc, #520]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7c:	4b7f      	ldr	r3, [pc, #508]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	497c      	ldr	r1, [pc, #496]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
 8003d90:	e018      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d92:	4b7a      	ldr	r3, [pc, #488]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a79      	ldr	r2, [pc, #484]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fd fdbd 	bl	800191c <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da6:	f7fd fdb9 	bl	800191c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e203      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db8:	4b70      	ldr	r3, [pc, #448]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d03c      	beq.n	8003e4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01c      	beq.n	8003e12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd8:	4b68      	ldr	r3, [pc, #416]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dde:	4a67      	ldr	r2, [pc, #412]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fd fd98 	bl	800191c <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df0:	f7fd fd94 	bl	800191c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1de      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e02:	4b5e      	ldr	r3, [pc, #376]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0ef      	beq.n	8003df0 <HAL_RCC_OscConfig+0x3ec>
 8003e10:	e01b      	b.n	8003e4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e12:	4b5a      	ldr	r3, [pc, #360]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e18:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fd fd7b 	bl	800191c <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e2a:	f7fd fd77 	bl	800191c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e1c1      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e3c:	4b4f      	ldr	r3, [pc, #316]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1ef      	bne.n	8003e2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80a6 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e5c:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e68:	4b44      	ldr	r3, [pc, #272]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	4a43      	ldr	r2, [pc, #268]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e72:	6593      	str	r3, [r2, #88]	; 0x58
 8003e74:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e80:	2301      	movs	r3, #1
 8003e82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e84:	4b3e      	ldr	r3, [pc, #248]	; (8003f80 <HAL_RCC_OscConfig+0x57c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d118      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e90:	4b3b      	ldr	r3, [pc, #236]	; (8003f80 <HAL_RCC_OscConfig+0x57c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a3a      	ldr	r2, [pc, #232]	; (8003f80 <HAL_RCC_OscConfig+0x57c>)
 8003e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9c:	f7fd fd3e 	bl	800191c <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea4:	f7fd fd3a 	bl	800191c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e184      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb6:	4b32      	ldr	r3, [pc, #200]	; (8003f80 <HAL_RCC_OscConfig+0x57c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d108      	bne.n	8003edc <HAL_RCC_OscConfig+0x4d8>
 8003eca:	4b2c      	ldr	r3, [pc, #176]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed0:	4a2a      	ldr	r2, [pc, #168]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eda:	e024      	b.n	8003f26 <HAL_RCC_OscConfig+0x522>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b05      	cmp	r3, #5
 8003ee2:	d110      	bne.n	8003f06 <HAL_RCC_OscConfig+0x502>
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003eec:	f043 0304 	orr.w	r3, r3, #4
 8003ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	4a20      	ldr	r2, [pc, #128]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f04:	e00f      	b.n	8003f26 <HAL_RCC_OscConfig+0x522>
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f16:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003f1e:	f023 0304 	bic.w	r3, r3, #4
 8003f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fcf5 	bl	800191c <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fd fcf1 	bl	800191c <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e139      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_OscConfig+0x578>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0ed      	beq.n	8003f36 <HAL_RCC_OscConfig+0x532>
 8003f5a:	e01a      	b.n	8003f92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fd fcde 	bl	800191c <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f62:	e00f      	b.n	8003f84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7fd fcda 	bl	800191c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d906      	bls.n	8003f84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e122      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f84:	4b90      	ldr	r3, [pc, #576]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e8      	bne.n	8003f64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f92:	7ffb      	ldrb	r3, [r7, #31]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f98:	4b8b      	ldr	r3, [pc, #556]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	4a8a      	ldr	r2, [pc, #552]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8003f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8108 	beq.w	80041be <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	f040 80d0 	bne.w	8004158 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fb8:	4b83      	ldr	r3, [pc, #524]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f003 0203 	and.w	r2, r3, #3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d130      	bne.n	800402e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d127      	bne.n	800402e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d11f      	bne.n	800402e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ff8:	2a07      	cmp	r2, #7
 8003ffa:	bf14      	ite	ne
 8003ffc:	2201      	movne	r2, #1
 8003ffe:	2200      	moveq	r2, #0
 8004000:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004002:	4293      	cmp	r3, r2
 8004004:	d113      	bne.n	800402e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	3b01      	subs	r3, #1
 8004014:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d109      	bne.n	800402e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	3b01      	subs	r3, #1
 8004028:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d06e      	beq.n	800410c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b0c      	cmp	r3, #12
 8004032:	d069      	beq.n	8004108 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004034:	4b64      	ldr	r3, [pc, #400]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004040:	4b61      	ldr	r3, [pc, #388]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0b7      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004050:	4b5d      	ldr	r3, [pc, #372]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a5c      	ldr	r2, [pc, #368]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800405a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800405c:	f7fd fc5e 	bl	800191c <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004064:	f7fd fc5a 	bl	800191c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e0a4      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004076:	4b54      	ldr	r3, [pc, #336]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004082:	4b51      	ldr	r3, [pc, #324]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	4b51      	ldr	r3, [pc, #324]	; (80041cc <HAL_RCC_OscConfig+0x7c8>)
 8004088:	4013      	ands	r3, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004092:	3a01      	subs	r2, #1
 8004094:	0112      	lsls	r2, r2, #4
 8004096:	4311      	orrs	r1, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800409c:	0212      	lsls	r2, r2, #8
 800409e:	4311      	orrs	r1, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040a4:	0852      	lsrs	r2, r2, #1
 80040a6:	3a01      	subs	r2, #1
 80040a8:	0552      	lsls	r2, r2, #21
 80040aa:	4311      	orrs	r1, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040b0:	0852      	lsrs	r2, r2, #1
 80040b2:	3a01      	subs	r2, #1
 80040b4:	0652      	lsls	r2, r2, #25
 80040b6:	4311      	orrs	r1, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040bc:	0912      	lsrs	r2, r2, #4
 80040be:	0452      	lsls	r2, r2, #17
 80040c0:	430a      	orrs	r2, r1
 80040c2:	4941      	ldr	r1, [pc, #260]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040c8:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a3e      	ldr	r2, [pc, #248]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 80040ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d4:	4b3c      	ldr	r3, [pc, #240]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a3b      	ldr	r2, [pc, #236]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 80040da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040e0:	f7fd fc1c 	bl	800191c <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd fc18 	bl	800191c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e062      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fa:	4b33      	ldr	r3, [pc, #204]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004106:	e05a      	b.n	80041be <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e059      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410c:	4b2e      	ldr	r3, [pc, #184]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d152      	bne.n	80041be <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004118:	4b2b      	ldr	r3, [pc, #172]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a2a      	ldr	r2, [pc, #168]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 800411e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004122:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004124:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a27      	ldr	r2, [pc, #156]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 800412a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004130:	f7fd fbf4 	bl	800191c <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fd fbf0 	bl	800191c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e03a      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414a:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x734>
 8004156:	e032      	b.n	80041be <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d02d      	beq.n	80041ba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004164:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004168:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d105      	bne.n	8004182 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004176:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 800417c:	f023 0303 	bic.w	r3, r3, #3
 8004180:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004182:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4a10      	ldr	r2, [pc, #64]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 8004188:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800418c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004190:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004192:	f7fd fbc3 	bl	800191c <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419a:	f7fd fbbf 	bl	800191c <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e009      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_RCC_OscConfig+0x7c4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f0      	bne.n	800419a <HAL_RCC_OscConfig+0x796>
 80041b8:	e001      	b.n	80041be <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40021000 	.word	0x40021000
 80041cc:	f99d808c 	.word	0xf99d808c

080041d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0c8      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e4:	4b66      	ldr	r3, [pc, #408]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d910      	bls.n	8004214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b63      	ldr	r3, [pc, #396]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 0207 	bic.w	r2, r3, #7
 80041fa:	4961      	ldr	r1, [pc, #388]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b5f      	ldr	r3, [pc, #380]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0b0      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d04c      	beq.n	80042ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d107      	bne.n	8004238 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004228:	4b56      	ldr	r3, [pc, #344]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d121      	bne.n	8004278 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e09e      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d107      	bne.n	8004250 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004240:	4b50      	ldr	r3, [pc, #320]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d115      	bne.n	8004278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e092      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004258:	4b4a      	ldr	r3, [pc, #296]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e086      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004268:	4b46      	ldr	r3, [pc, #280]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e07e      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004278:	4b42      	ldr	r3, [pc, #264]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f023 0203 	bic.w	r2, r3, #3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	493f      	ldr	r1, [pc, #252]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428a:	f7fd fb47 	bl	800191c <HAL_GetTick>
 800428e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004292:	f7fd fb43 	bl	800191c <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e066      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a8:	4b36      	ldr	r3, [pc, #216]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 020c 	and.w	r2, r3, #12
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d1eb      	bne.n	8004292 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c6:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	492c      	ldr	r1, [pc, #176]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d8:	4b29      	ldr	r3, [pc, #164]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d210      	bcs.n	8004308 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b26      	ldr	r3, [pc, #152]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 0207 	bic.w	r2, r3, #7
 80042ee:	4924      	ldr	r1, [pc, #144]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b22      	ldr	r3, [pc, #136]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e036      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4918      	ldr	r1, [pc, #96]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4910      	ldr	r1, [pc, #64]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004346:	f000 f825 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 800434a:	4602      	mov	r2, r0
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	490c      	ldr	r1, [pc, #48]	; (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 8004358:	5ccb      	ldrb	r3, [r1, r3]
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	fa22 f303 	lsr.w	r3, r2, r3
 8004362:	4a0a      	ldr	r2, [pc, #40]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd fa86 	bl	800187c <HAL_InitTick>
 8004370:	4603      	mov	r3, r0
 8004372:	72fb      	strb	r3, [r7, #11]

  return status;
 8004374:	7afb      	ldrb	r3, [r7, #11]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40022000 	.word	0x40022000
 8004384:	40021000 	.word	0x40021000
 8004388:	08008c84 	.word	0x08008c84
 800438c:	20000010 	.word	0x20000010
 8004390:	20000014 	.word	0x20000014

08004394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	; 0x24
 8004398:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a2:	4b3e      	ldr	r3, [pc, #248]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ac:	4b3b      	ldr	r3, [pc, #236]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0x34>
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d121      	bne.n	8004406 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d11e      	bne.n	8004406 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043c8:	4b34      	ldr	r3, [pc, #208]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043d4:	4b31      	ldr	r3, [pc, #196]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 80043d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	e005      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043e4:	4b2d      	ldr	r3, [pc, #180]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043f0:	4a2b      	ldr	r2, [pc, #172]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10d      	bne.n	800441c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004404:	e00a      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d102      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	e004      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d101      	bne.n	800441c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004418:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800441a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b0c      	cmp	r3, #12
 8004420:	d134      	bne.n	800448c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004422:	4b1e      	ldr	r3, [pc, #120]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d003      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0xa6>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b03      	cmp	r3, #3
 8004436:	d003      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0xac>
 8004438:	e005      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800443c:	617b      	str	r3, [r7, #20]
      break;
 800443e:	e005      	b.n	800444c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004440:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004442:	617b      	str	r3, [r7, #20]
      break;
 8004444:	e002      	b.n	800444c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	617b      	str	r3, [r7, #20]
      break;
 800444a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800444c:	4b13      	ldr	r3, [pc, #76]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	3301      	adds	r3, #1
 8004458:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	fb02 f203 	mul.w	r2, r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	0e5b      	lsrs	r3, r3, #25
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	3301      	adds	r3, #1
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800448c:	69bb      	ldr	r3, [r7, #24]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3724      	adds	r7, #36	; 0x24
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	08008c9c 	.word	0x08008c9c
 80044a4:	00f42400 	.word	0x00f42400
 80044a8:	007a1200 	.word	0x007a1200

080044ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b0:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044b2:	681b      	ldr	r3, [r3, #0]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000010 	.word	0x20000010

080044c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044c8:	f7ff fff0 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4904      	ldr	r1, [pc, #16]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	08008c94 	.word	0x08008c94

080044f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044f4:	f7ff ffda 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0adb      	lsrs	r3, r3, #11
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4904      	ldr	r1, [pc, #16]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	08008c94 	.word	0x08008c94

0800451c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004528:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004534:	f7ff fa02 	bl	800393c <HAL_PWREx_GetVoltageRange>
 8004538:	6178      	str	r0, [r7, #20]
 800453a:	e014      	b.n	8004566 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800453c:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	4a24      	ldr	r2, [pc, #144]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004546:	6593      	str	r3, [r2, #88]	; 0x58
 8004548:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004554:	f7ff f9f2 	bl	800393c <HAL_PWREx_GetVoltageRange>
 8004558:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800455a:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004564:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800456c:	d10b      	bne.n	8004586 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b80      	cmp	r3, #128	; 0x80
 8004572:	d919      	bls.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2ba0      	cmp	r3, #160	; 0xa0
 8004578:	d902      	bls.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800457a:	2302      	movs	r3, #2
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	e013      	b.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004580:	2301      	movs	r3, #1
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	e010      	b.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	d902      	bls.n	8004592 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800458c:	2303      	movs	r3, #3
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	e00a      	b.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d102      	bne.n	800459e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004598:	2302      	movs	r3, #2
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	e004      	b.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b70      	cmp	r3, #112	; 0x70
 80045a2:	d101      	bne.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045a4:	2301      	movs	r3, #1
 80045a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 0207 	bic.w	r2, r3, #7
 80045b0:	4909      	ldr	r1, [pc, #36]	; (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d001      	beq.n	80045ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40022000 	.word	0x40022000

080045dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045e4:	2300      	movs	r3, #0
 80045e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045e8:	2300      	movs	r3, #0
 80045ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d041      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004600:	d02a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004602:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004606:	d824      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004608:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800460c:	d008      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800460e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004612:	d81e      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800461c:	d010      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800461e:	e018      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004620:	4b86      	ldr	r3, [pc, #536]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4a85      	ldr	r2, [pc, #532]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800462c:	e015      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fabb 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800463e:	e00c      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3320      	adds	r3, #32
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fba6 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004650:	e003      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	74fb      	strb	r3, [r7, #19]
      break;
 8004656:	e000      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004660:	4b76      	ldr	r3, [pc, #472]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466e:	4973      	ldr	r1, [pc, #460]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004676:	e001      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d041      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800468c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004690:	d02a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004692:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004696:	d824      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800469c:	d008      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800469e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046a2:	d81e      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ac:	d010      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046ae:	e018      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046b0:	4b62      	ldr	r3, [pc, #392]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4a61      	ldr	r2, [pc, #388]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046bc:	e015      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fa73 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ce:	e00c      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3320      	adds	r3, #32
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fb5e 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046e0:	e003      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	74fb      	strb	r3, [r7, #19]
      break;
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046f0:	4b52      	ldr	r3, [pc, #328]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046fe:	494f      	ldr	r1, [pc, #316]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004706:	e001      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80a0 	beq.w	800485a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471a:	2300      	movs	r3, #0
 800471c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800471e:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800472e:	2300      	movs	r3, #0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00d      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004734:	4b41      	ldr	r3, [pc, #260]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	4a40      	ldr	r2, [pc, #256]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473e:	6593      	str	r3, [r2, #88]	; 0x58
 8004740:	4b3e      	ldr	r3, [pc, #248]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474c:	2301      	movs	r3, #1
 800474e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004750:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a3a      	ldr	r2, [pc, #232]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800475c:	f7fd f8de 	bl	800191c <HAL_GetTick>
 8004760:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004762:	e009      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004764:	f7fd f8da 	bl	800191c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d902      	bls.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	74fb      	strb	r3, [r7, #19]
        break;
 8004776:	e005      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004778:	4b31      	ldr	r3, [pc, #196]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0ef      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004784:	7cfb      	ldrb	r3, [r7, #19]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d15c      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800478a:	4b2c      	ldr	r3, [pc, #176]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004794:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01f      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d019      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047a8:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047b4:	4b21      	ldr	r3, [pc, #132]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	4a20      	ldr	r2, [pc, #128]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	4a1c      	ldr	r2, [pc, #112]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047d4:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fd f899 	bl	800191c <HAL_GetTick>
 80047ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ec:	e00b      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fd f895 	bl	800191c <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d902      	bls.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	74fb      	strb	r3, [r7, #19]
            break;
 8004804:	e006      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ec      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004814:	7cfb      	ldrb	r3, [r7, #19]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10c      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800481a:	4b08      	ldr	r3, [pc, #32]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482a:	4904      	ldr	r1, [pc, #16]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004832:	e009      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	74bb      	strb	r3, [r7, #18]
 8004838:	e006      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800483a:	bf00      	nop
 800483c:	40021000 	.word	0x40021000
 8004840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004848:	7c7b      	ldrb	r3, [r7, #17]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d105      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484e:	4b9e      	ldr	r3, [pc, #632]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	4a9d      	ldr	r2, [pc, #628]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004858:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004866:	4b98      	ldr	r3, [pc, #608]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f023 0203 	bic.w	r2, r3, #3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	4994      	ldr	r1, [pc, #592]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004888:	4b8f      	ldr	r3, [pc, #572]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f023 020c 	bic.w	r2, r3, #12
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	498c      	ldr	r1, [pc, #560]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048aa:	4b87      	ldr	r3, [pc, #540]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	4983      	ldr	r1, [pc, #524]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048cc:	4b7e      	ldr	r3, [pc, #504]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	497b      	ldr	r1, [pc, #492]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048ee:	4b76      	ldr	r3, [pc, #472]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fc:	4972      	ldr	r1, [pc, #456]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004910:	4b6d      	ldr	r3, [pc, #436]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	496a      	ldr	r1, [pc, #424]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004932:	4b65      	ldr	r3, [pc, #404]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004940:	4961      	ldr	r1, [pc, #388]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004954:	4b5c      	ldr	r3, [pc, #368]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004962:	4959      	ldr	r1, [pc, #356]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004976:	4b54      	ldr	r3, [pc, #336]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004984:	4950      	ldr	r1, [pc, #320]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004998:	4b4b      	ldr	r3, [pc, #300]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	4948      	ldr	r1, [pc, #288]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ba:	4b43      	ldr	r3, [pc, #268]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	493f      	ldr	r1, [pc, #252]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d028      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049dc:	4b3a      	ldr	r3, [pc, #232]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ea:	4937      	ldr	r1, [pc, #220]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049fa:	d106      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049fc:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4a31      	ldr	r2, [pc, #196]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a06:	60d3      	str	r3, [r2, #12]
 8004a08:	e011      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	2101      	movs	r1, #1
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 f8c8 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a2a:	7cfb      	ldrb	r3, [r7, #19]
 8004a2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d028      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a48:	491f      	ldr	r1, [pc, #124]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a58:	d106      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a64:	60d3      	str	r3, [r2, #12]
 8004a66:	e011      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3304      	adds	r3, #4
 8004a76:	2101      	movs	r1, #1
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f899 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a82:	7cfb      	ldrb	r3, [r7, #19]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02b      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa6:	4908      	ldr	r1, [pc, #32]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab6:	d109      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab8:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a02      	ldr	r2, [pc, #8]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ac2:	60d3      	str	r3, [r2, #12]
 8004ac4:	e014      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ac6:	bf00      	nop
 8004ac8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	2101      	movs	r1, #1
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 f867 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004aec:	7cfb      	ldrb	r3, [r7, #19]
 8004aee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d02f      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004afc:	4b2b      	ldr	r3, [pc, #172]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b0a:	4928      	ldr	r1, [pc, #160]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b1a:	d10d      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	2102      	movs	r1, #2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f844 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b2c:	7cfb      	ldrb	r3, [r7, #19]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d014      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b32:	7cfb      	ldrb	r3, [r7, #19]
 8004b34:	74bb      	strb	r3, [r7, #18]
 8004b36:	e011      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3320      	adds	r3, #32
 8004b46:	2102      	movs	r1, #2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 f925 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b52:	7cfb      	ldrb	r3, [r7, #19]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b68:	4b10      	ldr	r3, [pc, #64]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b76:	490d      	ldr	r1, [pc, #52]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9a:	4904      	ldr	r1, [pc, #16]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ba2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000

08004bb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bbe:	4b75      	ldr	r3, [pc, #468]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d018      	beq.n	8004bfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bca:	4b72      	ldr	r3, [pc, #456]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0203 	and.w	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d10d      	bne.n	8004bf6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
       ||
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004be2:	4b6c      	ldr	r3, [pc, #432]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	091b      	lsrs	r3, r3, #4
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
       ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d047      	beq.n	8004c86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
 8004bfa:	e044      	b.n	8004c86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d018      	beq.n	8004c36 <RCCEx_PLLSAI1_Config+0x86>
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d825      	bhi.n	8004c54 <RCCEx_PLLSAI1_Config+0xa4>
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d002      	beq.n	8004c12 <RCCEx_PLLSAI1_Config+0x62>
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d009      	beq.n	8004c24 <RCCEx_PLLSAI1_Config+0x74>
 8004c10:	e020      	b.n	8004c54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c12:	4b60      	ldr	r3, [pc, #384]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11d      	bne.n	8004c5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c22:	e01a      	b.n	8004c5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c24:	4b5b      	ldr	r3, [pc, #364]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c34:	e013      	b.n	8004c5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c36:	4b57      	ldr	r3, [pc, #348]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10f      	bne.n	8004c62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c42:	4b54      	ldr	r3, [pc, #336]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c52:	e006      	b.n	8004c62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e004      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e002      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10d      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c6a:	4b4a      	ldr	r3, [pc, #296]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6819      	ldr	r1, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	4944      	ldr	r1, [pc, #272]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d17d      	bne.n	8004d88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c8c:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a40      	ldr	r2, [pc, #256]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fc fe40 	bl	800191c <HAL_GetTick>
 8004c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c9e:	e009      	b.n	8004cb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ca0:	f7fc fe3c 	bl	800191c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d902      	bls.n	8004cb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004cb2:	e005      	b.n	8004cc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cb4:	4b37      	ldr	r3, [pc, #220]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ef      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d160      	bne.n	8004d88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d111      	bne.n	8004cf0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ccc:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6892      	ldr	r2, [r2, #8]
 8004cdc:	0211      	lsls	r1, r2, #8
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68d2      	ldr	r2, [r2, #12]
 8004ce2:	0912      	lsrs	r2, r2, #4
 8004ce4:	0452      	lsls	r2, r2, #17
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	492a      	ldr	r1, [pc, #168]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	610b      	str	r3, [r1, #16]
 8004cee:	e027      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d112      	bne.n	8004d1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf6:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6892      	ldr	r2, [r2, #8]
 8004d06:	0211      	lsls	r1, r2, #8
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6912      	ldr	r2, [r2, #16]
 8004d0c:	0852      	lsrs	r2, r2, #1
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	0552      	lsls	r2, r2, #21
 8004d12:	430a      	orrs	r2, r1
 8004d14:	491f      	ldr	r1, [pc, #124]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	610b      	str	r3, [r1, #16]
 8004d1a:	e011      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6892      	ldr	r2, [r2, #8]
 8004d2c:	0211      	lsls	r1, r2, #8
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6952      	ldr	r2, [r2, #20]
 8004d32:	0852      	lsrs	r2, r2, #1
 8004d34:	3a01      	subs	r2, #1
 8004d36:	0652      	lsls	r2, r2, #25
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	4916      	ldr	r1, [pc, #88]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d40:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a13      	ldr	r2, [pc, #76]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7fc fde6 	bl	800191c <HAL_GetTick>
 8004d50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d52:	e009      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d54:	f7fc fde2 	bl	800191c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d902      	bls.n	8004d68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	73fb      	strb	r3, [r7, #15]
          break;
 8004d66:	e005      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0ef      	beq.n	8004d54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	4904      	ldr	r1, [pc, #16]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000

08004d98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004da6:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d018      	beq.n	8004de4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004db2:	4b67      	ldr	r3, [pc, #412]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0203 	and.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d10d      	bne.n	8004dde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dca:	4b61      	ldr	r3, [pc, #388]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
       ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d047      	beq.n	8004e6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
 8004de2:	e044      	b.n	8004e6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d018      	beq.n	8004e1e <RCCEx_PLLSAI2_Config+0x86>
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d825      	bhi.n	8004e3c <RCCEx_PLLSAI2_Config+0xa4>
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d002      	beq.n	8004dfa <RCCEx_PLLSAI2_Config+0x62>
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d009      	beq.n	8004e0c <RCCEx_PLLSAI2_Config+0x74>
 8004df8:	e020      	b.n	8004e3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dfa:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d11d      	bne.n	8004e42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e0a:	e01a      	b.n	8004e42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e0c:	4b50      	ldr	r3, [pc, #320]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d116      	bne.n	8004e46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e1c:	e013      	b.n	8004e46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e1e:	4b4c      	ldr	r3, [pc, #304]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10f      	bne.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e2a:	4b49      	ldr	r3, [pc, #292]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e3a:	e006      	b.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e40:	e004      	b.n	8004e4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e42:	bf00      	nop
 8004e44:	e002      	b.n	8004e4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10d      	bne.n	8004e6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e52:	4b3f      	ldr	r3, [pc, #252]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	430b      	orrs	r3, r1
 8004e68:	4939      	ldr	r1, [pc, #228]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d167      	bne.n	8004f44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e74:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a35      	ldr	r2, [pc, #212]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e80:	f7fc fd4c 	bl	800191c <HAL_GetTick>
 8004e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e86:	e009      	b.n	8004e9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e88:	f7fc fd48 	bl	800191c <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d902      	bls.n	8004e9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	73fb      	strb	r3, [r7, #15]
        break;
 8004e9a:	e005      	b.n	8004ea8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e9c:	4b2c      	ldr	r3, [pc, #176]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ef      	bne.n	8004e88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d14a      	bne.n	8004f44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d111      	bne.n	8004ed8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eb4:	4b26      	ldr	r3, [pc, #152]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6892      	ldr	r2, [r2, #8]
 8004ec4:	0211      	lsls	r1, r2, #8
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68d2      	ldr	r2, [r2, #12]
 8004eca:	0912      	lsrs	r2, r2, #4
 8004ecc:	0452      	lsls	r2, r2, #17
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	491f      	ldr	r1, [pc, #124]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	614b      	str	r3, [r1, #20]
 8004ed6:	e011      	b.n	8004efc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ee0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6892      	ldr	r2, [r2, #8]
 8004ee8:	0211      	lsls	r1, r2, #8
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6912      	ldr	r2, [r2, #16]
 8004eee:	0852      	lsrs	r2, r2, #1
 8004ef0:	3a01      	subs	r2, #1
 8004ef2:	0652      	lsls	r2, r2, #25
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	4916      	ldr	r1, [pc, #88]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004efc:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f08:	f7fc fd08 	bl	800191c <HAL_GetTick>
 8004f0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f0e:	e009      	b.n	8004f24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f10:	f7fc fd04 	bl	800191c <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d902      	bls.n	8004f24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	73fb      	strb	r3, [r7, #15]
          break;
 8004f22:	e005      	b.n	8004f30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0ef      	beq.n	8004f10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	4904      	ldr	r1, [pc, #16]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000

08004f54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e040      	b.n	8004fe8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc fbd2 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2224      	movs	r2, #36	; 0x24
 8004f80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fbb4 	bl	8005700 <UART_SetConfig>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e022      	b.n	8004fe8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fe32 	bl	8005c14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 feb9 	bl	8005d58 <UART_CheckIdleState>
 8004fe6:	4603      	mov	r3, r0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005004:	2b20      	cmp	r3, #32
 8005006:	f040 8082 	bne.w	800510e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_UART_Transmit+0x26>
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e07a      	b.n	8005110 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_UART_Transmit+0x38>
 8005024:	2302      	movs	r3, #2
 8005026:	e073      	b.n	8005110 <HAL_UART_Transmit+0x120>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2221      	movs	r2, #33	; 0x21
 800503c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503e:	f7fc fc6d 	bl	800191c <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	88fa      	ldrh	r2, [r7, #6]
 8005050:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505c:	d108      	bne.n	8005070 <HAL_UART_Transmit+0x80>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	e003      	b.n	8005078 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005074:	2300      	movs	r3, #0
 8005076:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005080:	e02d      	b.n	80050de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	2180      	movs	r1, #128	; 0x80
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 feac 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e039      	b.n	8005110 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	881a      	ldrh	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ae:	b292      	uxth	r2, r2
 80050b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	3302      	adds	r3, #2
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e008      	b.n	80050cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	b292      	uxth	r2, r2
 80050c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3301      	adds	r3, #1
 80050ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1cb      	bne.n	8005082 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2200      	movs	r2, #0
 80050f2:	2140      	movs	r1, #64	; 0x40
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 fe78 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e005      	b.n	8005110 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e000      	b.n	8005110 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800510e:	2302      	movs	r3, #2
  }
}
 8005110:	4618      	mov	r0, r3
 8005112:	3720      	adds	r7, #32
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800512c:	2b20      	cmp	r3, #32
 800512e:	f040 80bf 	bne.w	80052b0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_UART_Receive+0x26>
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0b7      	b.n	80052b2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_UART_Receive+0x38>
 800514c:	2302      	movs	r3, #2
 800514e:	e0b0      	b.n	80052b2 <HAL_UART_Receive+0x19a>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2222      	movs	r2, #34	; 0x22
 8005164:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800516c:	f7fc fbd6 	bl	800191c <HAL_GetTick>
 8005170:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	88fa      	ldrh	r2, [r7, #6]
 800517e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518a:	d10e      	bne.n	80051aa <HAL_UART_Receive+0x92>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <HAL_UART_Receive+0x88>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f240 12ff 	movw	r2, #511	; 0x1ff
 800519a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800519e:	e02d      	b.n	80051fc <HAL_UART_Receive+0xe4>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	22ff      	movs	r2, #255	; 0xff
 80051a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051a8:	e028      	b.n	80051fc <HAL_UART_Receive+0xe4>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10d      	bne.n	80051ce <HAL_UART_Receive+0xb6>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <HAL_UART_Receive+0xac>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	22ff      	movs	r2, #255	; 0xff
 80051be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051c2:	e01b      	b.n	80051fc <HAL_UART_Receive+0xe4>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	227f      	movs	r2, #127	; 0x7f
 80051c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051cc:	e016      	b.n	80051fc <HAL_UART_Receive+0xe4>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051d6:	d10d      	bne.n	80051f4 <HAL_UART_Receive+0xdc>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <HAL_UART_Receive+0xd2>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	227f      	movs	r2, #127	; 0x7f
 80051e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051e8:	e008      	b.n	80051fc <HAL_UART_Receive+0xe4>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	223f      	movs	r2, #63	; 0x3f
 80051ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051f2:	e003      	b.n	80051fc <HAL_UART_Receive+0xe4>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005202:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520c:	d108      	bne.n	8005220 <HAL_UART_Receive+0x108>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d104      	bne.n	8005220 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	e003      	b.n	8005228 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005230:	e033      	b.n	800529a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	2120      	movs	r1, #32
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fdd4 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e032      	b.n	80052b2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10c      	bne.n	800526c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005258:	b29a      	uxth	r2, r3
 800525a:	8a7b      	ldrh	r3, [r7, #18]
 800525c:	4013      	ands	r3, r2
 800525e:	b29a      	uxth	r2, r3
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	3302      	adds	r3, #2
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	e00d      	b.n	8005288 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005272:	b29b      	uxth	r3, r3
 8005274:	b2da      	uxtb	r2, r3
 8005276:	8a7b      	ldrh	r3, [r7, #18]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	4013      	ands	r3, r2
 800527c:	b2da      	uxtb	r2, r3
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3301      	adds	r3, #1
 8005286:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1c5      	bne.n	8005232 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e000      	b.n	80052b2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	f640 030f 	movw	r3, #2063	; 0x80f
 80052e2:	4013      	ands	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d113      	bne.n	8005314 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00e      	beq.n	8005314 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d009      	beq.n	8005314 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 81ce 	beq.w	80056a6 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	4798      	blx	r3
      }
      return;
 8005312:	e1c8      	b.n	80056a6 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 80e3 	beq.w	80054e2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d105      	bne.n	8005332 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	4ba6      	ldr	r3, [pc, #664]	; (80055c4 <HAL_UART_IRQHandler+0x308>)
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80d8 	beq.w	80054e2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d010      	beq.n	800535e <HAL_UART_IRQHandler+0xa2>
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2201      	movs	r2, #1
 800534c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005354:	f043 0201 	orr.w	r2, r3, #1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d010      	beq.n	800538a <HAL_UART_IRQHandler+0xce>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2202      	movs	r2, #2
 8005378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005380:	f043 0204 	orr.w	r2, r3, #4
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d010      	beq.n	80053b6 <HAL_UART_IRQHandler+0xfa>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00b      	beq.n	80053b6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2204      	movs	r2, #4
 80053a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ac:	f043 0202 	orr.w	r2, r3, #2
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d015      	beq.n	80053ec <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2208      	movs	r2, #8
 80053da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053e2:	f043 0208 	orr.w	r2, r3, #8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d011      	beq.n	800541a <HAL_UART_IRQHandler+0x15e>
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00c      	beq.n	800541a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005408:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8142 	beq.w	80056aa <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00c      	beq.n	800544a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005450:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d004      	beq.n	800546a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005466:	2b00      	cmp	r3, #0
 8005468:	d031      	beq.n	80054ce <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fd39 	bl	8005ee2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d123      	bne.n	80054c6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800548c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	2b00      	cmp	r3, #0
 8005494:	d013      	beq.n	80054be <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549a:	4a4b      	ldr	r2, [pc, #300]	; (80055c8 <HAL_UART_IRQHandler+0x30c>)
 800549c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fc fdd3 	bl	800204e <HAL_DMA_Abort_IT>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d017      	beq.n	80054de <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80054b8:	4610      	mov	r0, r2
 80054ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054bc:	e00f      	b.n	80054de <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f908 	bl	80056d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c4:	e00b      	b.n	80054de <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f904 	bl	80056d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	e007      	b.n	80054de <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f900 	bl	80056d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80054dc:	e0e5      	b.n	80056aa <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054de:	bf00      	nop
    return;
 80054e0:	e0e3      	b.n	80056aa <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	f040 80a9 	bne.w	800563e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80a3 	beq.w	800563e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 809d 	beq.w	800563e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2210      	movs	r2, #16
 800550a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d158      	bne.n	80055cc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005524:	893b      	ldrh	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80c1 	beq.w	80056ae <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005532:	893a      	ldrh	r2, [r7, #8]
 8005534:	429a      	cmp	r2, r3
 8005536:	f080 80ba 	bcs.w	80056ae <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	893a      	ldrh	r2, [r7, #8]
 800553e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d12a      	bne.n	80055a8 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005560:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005580:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0210 	bic.w	r2, r2, #16
 800559c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fc fd15 	bl	8001fd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f893 	bl	80056e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80055c2:	e074      	b.n	80056ae <HAL_UART_IRQHandler+0x3f2>
 80055c4:	04000120 	.word	0x04000120
 80055c8:	08005f41 	.word	0x08005f41
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055d8:	b29b      	uxth	r3, r3
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d063      	beq.n	80056b2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80055ea:	897b      	ldrh	r3, [r7, #10]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d060      	beq.n	80056b2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055fe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0210 	bic.w	r2, r2, #16
 8005630:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005632:	897b      	ldrh	r3, [r7, #10]
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f856 	bl	80056e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800563c:	e039      	b.n	80056b2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00d      	beq.n	8005664 <HAL_UART_IRQHandler+0x3a8>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800565a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fc9e 	bl	8005f9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005662:	e029      	b.n	80056b8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00d      	beq.n	800568a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01a      	beq.n	80056b6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
    }
    return;
 8005688:	e015      	b.n	80056b6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	d011      	beq.n	80056b8 <HAL_UART_IRQHandler+0x3fc>
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00c      	beq.n	80056b8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fc64 	bl	8005f6c <UART_EndTransmit_IT>
    return;
 80056a4:	e008      	b.n	80056b8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80056a6:	bf00      	nop
 80056a8:	e006      	b.n	80056b8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80056aa:	bf00      	nop
 80056ac:	e004      	b.n	80056b8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80056ae:	bf00      	nop
 80056b0:	e002      	b.n	80056b8 <HAL_UART_IRQHandler+0x3fc>
      return;
 80056b2:	bf00      	nop
 80056b4:	e000      	b.n	80056b8 <HAL_UART_IRQHandler+0x3fc>
    return;
 80056b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop

080056c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	b5b0      	push	{r4, r5, r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	4313      	orrs	r3, r2
 8005722:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4bad      	ldr	r3, [pc, #692]	; (80059e0 <UART_SetConfig+0x2e0>)
 800572c:	4013      	ands	r3, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6812      	ldr	r2, [r2, #0]
 8005732:	69f9      	ldr	r1, [r7, #28]
 8005734:	430b      	orrs	r3, r1
 8005736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4aa2      	ldr	r2, [pc, #648]	; (80059e4 <UART_SetConfig+0x2e4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	4313      	orrs	r3, r2
 8005766:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	430a      	orrs	r2, r1
 800577a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a99      	ldr	r2, [pc, #612]	; (80059e8 <UART_SetConfig+0x2e8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d121      	bne.n	80057ca <UART_SetConfig+0xca>
 8005786:	4b99      	ldr	r3, [pc, #612]	; (80059ec <UART_SetConfig+0x2ec>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578c:	f003 0303 	and.w	r3, r3, #3
 8005790:	2b03      	cmp	r3, #3
 8005792:	d817      	bhi.n	80057c4 <UART_SetConfig+0xc4>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0x9c>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057ad 	.word	0x080057ad
 80057a0:	080057b9 	.word	0x080057b9
 80057a4:	080057b3 	.word	0x080057b3
 80057a8:	080057bf 	.word	0x080057bf
 80057ac:	2301      	movs	r3, #1
 80057ae:	76fb      	strb	r3, [r7, #27]
 80057b0:	e0e7      	b.n	8005982 <UART_SetConfig+0x282>
 80057b2:	2302      	movs	r3, #2
 80057b4:	76fb      	strb	r3, [r7, #27]
 80057b6:	e0e4      	b.n	8005982 <UART_SetConfig+0x282>
 80057b8:	2304      	movs	r3, #4
 80057ba:	76fb      	strb	r3, [r7, #27]
 80057bc:	e0e1      	b.n	8005982 <UART_SetConfig+0x282>
 80057be:	2308      	movs	r3, #8
 80057c0:	76fb      	strb	r3, [r7, #27]
 80057c2:	e0de      	b.n	8005982 <UART_SetConfig+0x282>
 80057c4:	2310      	movs	r3, #16
 80057c6:	76fb      	strb	r3, [r7, #27]
 80057c8:	e0db      	b.n	8005982 <UART_SetConfig+0x282>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a88      	ldr	r2, [pc, #544]	; (80059f0 <UART_SetConfig+0x2f0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d132      	bne.n	800583a <UART_SetConfig+0x13a>
 80057d4:	4b85      	ldr	r3, [pc, #532]	; (80059ec <UART_SetConfig+0x2ec>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	2b0c      	cmp	r3, #12
 80057e0:	d828      	bhi.n	8005834 <UART_SetConfig+0x134>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <UART_SetConfig+0xe8>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	08005835 	.word	0x08005835
 80057f0:	08005835 	.word	0x08005835
 80057f4:	08005835 	.word	0x08005835
 80057f8:	08005829 	.word	0x08005829
 80057fc:	08005835 	.word	0x08005835
 8005800:	08005835 	.word	0x08005835
 8005804:	08005835 	.word	0x08005835
 8005808:	08005823 	.word	0x08005823
 800580c:	08005835 	.word	0x08005835
 8005810:	08005835 	.word	0x08005835
 8005814:	08005835 	.word	0x08005835
 8005818:	0800582f 	.word	0x0800582f
 800581c:	2300      	movs	r3, #0
 800581e:	76fb      	strb	r3, [r7, #27]
 8005820:	e0af      	b.n	8005982 <UART_SetConfig+0x282>
 8005822:	2302      	movs	r3, #2
 8005824:	76fb      	strb	r3, [r7, #27]
 8005826:	e0ac      	b.n	8005982 <UART_SetConfig+0x282>
 8005828:	2304      	movs	r3, #4
 800582a:	76fb      	strb	r3, [r7, #27]
 800582c:	e0a9      	b.n	8005982 <UART_SetConfig+0x282>
 800582e:	2308      	movs	r3, #8
 8005830:	76fb      	strb	r3, [r7, #27]
 8005832:	e0a6      	b.n	8005982 <UART_SetConfig+0x282>
 8005834:	2310      	movs	r3, #16
 8005836:	76fb      	strb	r3, [r7, #27]
 8005838:	e0a3      	b.n	8005982 <UART_SetConfig+0x282>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a6d      	ldr	r2, [pc, #436]	; (80059f4 <UART_SetConfig+0x2f4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d120      	bne.n	8005886 <UART_SetConfig+0x186>
 8005844:	4b69      	ldr	r3, [pc, #420]	; (80059ec <UART_SetConfig+0x2ec>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800584e:	2b30      	cmp	r3, #48	; 0x30
 8005850:	d013      	beq.n	800587a <UART_SetConfig+0x17a>
 8005852:	2b30      	cmp	r3, #48	; 0x30
 8005854:	d814      	bhi.n	8005880 <UART_SetConfig+0x180>
 8005856:	2b20      	cmp	r3, #32
 8005858:	d009      	beq.n	800586e <UART_SetConfig+0x16e>
 800585a:	2b20      	cmp	r3, #32
 800585c:	d810      	bhi.n	8005880 <UART_SetConfig+0x180>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <UART_SetConfig+0x168>
 8005862:	2b10      	cmp	r3, #16
 8005864:	d006      	beq.n	8005874 <UART_SetConfig+0x174>
 8005866:	e00b      	b.n	8005880 <UART_SetConfig+0x180>
 8005868:	2300      	movs	r3, #0
 800586a:	76fb      	strb	r3, [r7, #27]
 800586c:	e089      	b.n	8005982 <UART_SetConfig+0x282>
 800586e:	2302      	movs	r3, #2
 8005870:	76fb      	strb	r3, [r7, #27]
 8005872:	e086      	b.n	8005982 <UART_SetConfig+0x282>
 8005874:	2304      	movs	r3, #4
 8005876:	76fb      	strb	r3, [r7, #27]
 8005878:	e083      	b.n	8005982 <UART_SetConfig+0x282>
 800587a:	2308      	movs	r3, #8
 800587c:	76fb      	strb	r3, [r7, #27]
 800587e:	e080      	b.n	8005982 <UART_SetConfig+0x282>
 8005880:	2310      	movs	r3, #16
 8005882:	76fb      	strb	r3, [r7, #27]
 8005884:	e07d      	b.n	8005982 <UART_SetConfig+0x282>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a5b      	ldr	r2, [pc, #364]	; (80059f8 <UART_SetConfig+0x2f8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d120      	bne.n	80058d2 <UART_SetConfig+0x1d2>
 8005890:	4b56      	ldr	r3, [pc, #344]	; (80059ec <UART_SetConfig+0x2ec>)
 8005892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005896:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800589a:	2bc0      	cmp	r3, #192	; 0xc0
 800589c:	d013      	beq.n	80058c6 <UART_SetConfig+0x1c6>
 800589e:	2bc0      	cmp	r3, #192	; 0xc0
 80058a0:	d814      	bhi.n	80058cc <UART_SetConfig+0x1cc>
 80058a2:	2b80      	cmp	r3, #128	; 0x80
 80058a4:	d009      	beq.n	80058ba <UART_SetConfig+0x1ba>
 80058a6:	2b80      	cmp	r3, #128	; 0x80
 80058a8:	d810      	bhi.n	80058cc <UART_SetConfig+0x1cc>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <UART_SetConfig+0x1b4>
 80058ae:	2b40      	cmp	r3, #64	; 0x40
 80058b0:	d006      	beq.n	80058c0 <UART_SetConfig+0x1c0>
 80058b2:	e00b      	b.n	80058cc <UART_SetConfig+0x1cc>
 80058b4:	2300      	movs	r3, #0
 80058b6:	76fb      	strb	r3, [r7, #27]
 80058b8:	e063      	b.n	8005982 <UART_SetConfig+0x282>
 80058ba:	2302      	movs	r3, #2
 80058bc:	76fb      	strb	r3, [r7, #27]
 80058be:	e060      	b.n	8005982 <UART_SetConfig+0x282>
 80058c0:	2304      	movs	r3, #4
 80058c2:	76fb      	strb	r3, [r7, #27]
 80058c4:	e05d      	b.n	8005982 <UART_SetConfig+0x282>
 80058c6:	2308      	movs	r3, #8
 80058c8:	76fb      	strb	r3, [r7, #27]
 80058ca:	e05a      	b.n	8005982 <UART_SetConfig+0x282>
 80058cc:	2310      	movs	r3, #16
 80058ce:	76fb      	strb	r3, [r7, #27]
 80058d0:	e057      	b.n	8005982 <UART_SetConfig+0x282>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a49      	ldr	r2, [pc, #292]	; (80059fc <UART_SetConfig+0x2fc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d125      	bne.n	8005928 <UART_SetConfig+0x228>
 80058dc:	4b43      	ldr	r3, [pc, #268]	; (80059ec <UART_SetConfig+0x2ec>)
 80058de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ea:	d017      	beq.n	800591c <UART_SetConfig+0x21c>
 80058ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058f0:	d817      	bhi.n	8005922 <UART_SetConfig+0x222>
 80058f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f6:	d00b      	beq.n	8005910 <UART_SetConfig+0x210>
 80058f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058fc:	d811      	bhi.n	8005922 <UART_SetConfig+0x222>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <UART_SetConfig+0x20a>
 8005902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005906:	d006      	beq.n	8005916 <UART_SetConfig+0x216>
 8005908:	e00b      	b.n	8005922 <UART_SetConfig+0x222>
 800590a:	2300      	movs	r3, #0
 800590c:	76fb      	strb	r3, [r7, #27]
 800590e:	e038      	b.n	8005982 <UART_SetConfig+0x282>
 8005910:	2302      	movs	r3, #2
 8005912:	76fb      	strb	r3, [r7, #27]
 8005914:	e035      	b.n	8005982 <UART_SetConfig+0x282>
 8005916:	2304      	movs	r3, #4
 8005918:	76fb      	strb	r3, [r7, #27]
 800591a:	e032      	b.n	8005982 <UART_SetConfig+0x282>
 800591c:	2308      	movs	r3, #8
 800591e:	76fb      	strb	r3, [r7, #27]
 8005920:	e02f      	b.n	8005982 <UART_SetConfig+0x282>
 8005922:	2310      	movs	r3, #16
 8005924:	76fb      	strb	r3, [r7, #27]
 8005926:	e02c      	b.n	8005982 <UART_SetConfig+0x282>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a2d      	ldr	r2, [pc, #180]	; (80059e4 <UART_SetConfig+0x2e4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d125      	bne.n	800597e <UART_SetConfig+0x27e>
 8005932:	4b2e      	ldr	r3, [pc, #184]	; (80059ec <UART_SetConfig+0x2ec>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800593c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005940:	d017      	beq.n	8005972 <UART_SetConfig+0x272>
 8005942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005946:	d817      	bhi.n	8005978 <UART_SetConfig+0x278>
 8005948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594c:	d00b      	beq.n	8005966 <UART_SetConfig+0x266>
 800594e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005952:	d811      	bhi.n	8005978 <UART_SetConfig+0x278>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <UART_SetConfig+0x260>
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595c:	d006      	beq.n	800596c <UART_SetConfig+0x26c>
 800595e:	e00b      	b.n	8005978 <UART_SetConfig+0x278>
 8005960:	2300      	movs	r3, #0
 8005962:	76fb      	strb	r3, [r7, #27]
 8005964:	e00d      	b.n	8005982 <UART_SetConfig+0x282>
 8005966:	2302      	movs	r3, #2
 8005968:	76fb      	strb	r3, [r7, #27]
 800596a:	e00a      	b.n	8005982 <UART_SetConfig+0x282>
 800596c:	2304      	movs	r3, #4
 800596e:	76fb      	strb	r3, [r7, #27]
 8005970:	e007      	b.n	8005982 <UART_SetConfig+0x282>
 8005972:	2308      	movs	r3, #8
 8005974:	76fb      	strb	r3, [r7, #27]
 8005976:	e004      	b.n	8005982 <UART_SetConfig+0x282>
 8005978:	2310      	movs	r3, #16
 800597a:	76fb      	strb	r3, [r7, #27]
 800597c:	e001      	b.n	8005982 <UART_SetConfig+0x282>
 800597e:	2310      	movs	r3, #16
 8005980:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <UART_SetConfig+0x2e4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	f040 8087 	bne.w	8005a9c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800598e:	7efb      	ldrb	r3, [r7, #27]
 8005990:	2b08      	cmp	r3, #8
 8005992:	d837      	bhi.n	8005a04 <UART_SetConfig+0x304>
 8005994:	a201      	add	r2, pc, #4	; (adr r2, 800599c <UART_SetConfig+0x29c>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	080059c1 	.word	0x080059c1
 80059a0:	08005a05 	.word	0x08005a05
 80059a4:	080059c9 	.word	0x080059c9
 80059a8:	08005a05 	.word	0x08005a05
 80059ac:	080059cf 	.word	0x080059cf
 80059b0:	08005a05 	.word	0x08005a05
 80059b4:	08005a05 	.word	0x08005a05
 80059b8:	08005a05 	.word	0x08005a05
 80059bc:	080059d7 	.word	0x080059d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c0:	f7fe fd80 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 80059c4:	6178      	str	r0, [r7, #20]
        break;
 80059c6:	e022      	b.n	8005a0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c8:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <UART_SetConfig+0x300>)
 80059ca:	617b      	str	r3, [r7, #20]
        break;
 80059cc:	e01f      	b.n	8005a0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ce:	f7fe fce1 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 80059d2:	6178      	str	r0, [r7, #20]
        break;
 80059d4:	e01b      	b.n	8005a0e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059da:	617b      	str	r3, [r7, #20]
        break;
 80059dc:	e017      	b.n	8005a0e <UART_SetConfig+0x30e>
 80059de:	bf00      	nop
 80059e0:	efff69f3 	.word	0xefff69f3
 80059e4:	40008000 	.word	0x40008000
 80059e8:	40013800 	.word	0x40013800
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40004400 	.word	0x40004400
 80059f4:	40004800 	.word	0x40004800
 80059f8:	40004c00 	.word	0x40004c00
 80059fc:	40005000 	.word	0x40005000
 8005a00:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	76bb      	strb	r3, [r7, #26]
        break;
 8005a0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80f1 	beq.w	8005bf8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	4413      	add	r3, r2
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d305      	bcc.n	8005a32 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d902      	bls.n	8005a38 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	76bb      	strb	r3, [r7, #26]
 8005a36:	e0df      	b.n	8005bf8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f04f 0100 	mov.w	r1, #0
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	020b      	lsls	r3, r1, #8
 8005a4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a4e:	0202      	lsls	r2, r0, #8
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	6849      	ldr	r1, [r1, #4]
 8005a54:	0849      	lsrs	r1, r1, #1
 8005a56:	4608      	mov	r0, r1
 8005a58:	f04f 0100 	mov.w	r1, #0
 8005a5c:	1814      	adds	r4, r2, r0
 8005a5e:	eb43 0501 	adc.w	r5, r3, r1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	4629      	mov	r1, r5
 8005a70:	f7fa fbfe 	bl	8000270 <__aeabi_uldivmod>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4613      	mov	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a82:	d308      	bcc.n	8005a96 <UART_SetConfig+0x396>
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a8a:	d204      	bcs.n	8005a96 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	60da      	str	r2, [r3, #12]
 8005a94:	e0b0      	b.n	8005bf8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	76bb      	strb	r3, [r7, #26]
 8005a9a:	e0ad      	b.n	8005bf8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa4:	d15c      	bne.n	8005b60 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005aa6:	7efb      	ldrb	r3, [r7, #27]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d828      	bhi.n	8005afe <UART_SetConfig+0x3fe>
 8005aac:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0x3b4>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005ae1 	.word	0x08005ae1
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	08005aff 	.word	0x08005aff
 8005ac4:	08005aef 	.word	0x08005aef
 8005ac8:	08005aff 	.word	0x08005aff
 8005acc:	08005aff 	.word	0x08005aff
 8005ad0:	08005aff 	.word	0x08005aff
 8005ad4:	08005af7 	.word	0x08005af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad8:	f7fe fcf4 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 8005adc:	6178      	str	r0, [r7, #20]
        break;
 8005ade:	e013      	b.n	8005b08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae0:	f7fe fd06 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 8005ae4:	6178      	str	r0, [r7, #20]
        break;
 8005ae6:	e00f      	b.n	8005b08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae8:	4b49      	ldr	r3, [pc, #292]	; (8005c10 <UART_SetConfig+0x510>)
 8005aea:	617b      	str	r3, [r7, #20]
        break;
 8005aec:	e00c      	b.n	8005b08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aee:	f7fe fc51 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8005af2:	6178      	str	r0, [r7, #20]
        break;
 8005af4:	e008      	b.n	8005b08 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afa:	617b      	str	r3, [r7, #20]
        break;
 8005afc:	e004      	b.n	8005b08 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	76bb      	strb	r3, [r7, #26]
        break;
 8005b06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d074      	beq.n	8005bf8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	005a      	lsls	r2, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	441a      	add	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b0f      	cmp	r3, #15
 8005b2a:	d916      	bls.n	8005b5a <UART_SetConfig+0x45a>
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b32:	d212      	bcs.n	8005b5a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f023 030f 	bic.w	r3, r3, #15
 8005b3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	085b      	lsrs	r3, r3, #1
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	89fb      	ldrh	r3, [r7, #14]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	89fa      	ldrh	r2, [r7, #14]
 8005b56:	60da      	str	r2, [r3, #12]
 8005b58:	e04e      	b.n	8005bf8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	76bb      	strb	r3, [r7, #26]
 8005b5e:	e04b      	b.n	8005bf8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b60:	7efb      	ldrb	r3, [r7, #27]
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d827      	bhi.n	8005bb6 <UART_SetConfig+0x4b6>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0x46c>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005b99 	.word	0x08005b99
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	08005bb7 	.word	0x08005bb7
 8005b7c:	08005ba7 	.word	0x08005ba7
 8005b80:	08005bb7 	.word	0x08005bb7
 8005b84:	08005bb7 	.word	0x08005bb7
 8005b88:	08005bb7 	.word	0x08005bb7
 8005b8c:	08005baf 	.word	0x08005baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fe fc98 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 8005b94:	6178      	str	r0, [r7, #20]
        break;
 8005b96:	e013      	b.n	8005bc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b98:	f7fe fcaa 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 8005b9c:	6178      	str	r0, [r7, #20]
        break;
 8005b9e:	e00f      	b.n	8005bc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba0:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <UART_SetConfig+0x510>)
 8005ba2:	617b      	str	r3, [r7, #20]
        break;
 8005ba4:	e00c      	b.n	8005bc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba6:	f7fe fbf5 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8005baa:	6178      	str	r0, [r7, #20]
        break;
 8005bac:	e008      	b.n	8005bc0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb2:	617b      	str	r3, [r7, #20]
        break;
 8005bb4:	e004      	b.n	8005bc0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	76bb      	strb	r3, [r7, #26]
        break;
 8005bbe:	bf00      	nop
    }

    if (pclk != 0U)
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d018      	beq.n	8005bf8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	085a      	lsrs	r2, r3, #1
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	441a      	add	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	d908      	bls.n	8005bf4 <UART_SetConfig+0x4f4>
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be8:	d204      	bcs.n	8005bf4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	60da      	str	r2, [r3, #12]
 8005bf2:	e001      	b.n	8005bf8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c04:	7ebb      	ldrb	r3, [r7, #26]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	00f42400 	.word	0x00f42400

08005c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00a      	beq.n	8005cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01a      	beq.n	8005d2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d12:	d10a      	bne.n	8005d2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d68:	f7fb fdd8 	bl	800191c <HAL_GetTick>
 8005d6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d10e      	bne.n	8005d9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f82d 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e023      	b.n	8005de2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d10e      	bne.n	8005dc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f817 	bl	8005dea <UART_WaitOnFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e00d      	b.n	8005de2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	4613      	mov	r3, r2
 8005df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfa:	e05e      	b.n	8005eba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d05a      	beq.n	8005eba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e04:	f7fb fd8a 	bl	800191c <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d302      	bcc.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d11b      	bne.n	8005e52 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e28:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2220      	movs	r2, #32
 8005e44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e043      	b.n	8005eda <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d02c      	beq.n	8005eba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6e:	d124      	bne.n	8005eba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e78:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e88:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0201 	bic.w	r2, r2, #1
 8005e98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e00f      	b.n	8005eda <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69da      	ldr	r2, [r3, #28]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	bf0c      	ite	eq
 8005eca:	2301      	moveq	r3, #1
 8005ecc:	2300      	movne	r3, #0
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d091      	beq.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ef8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d107      	bne.n	8005f22 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0210 	bic.w	r2, r2, #16
 8005f20:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff fbb8 	bl	80056d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f82:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff fb95 	bl	80056c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f96:	bf00      	nop
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	4603      	mov	r3, r0
 8005fba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005fc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fc4:	2b84      	cmp	r3, #132	; 0x84
 8005fc6:	d005      	beq.n	8005fd4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005fc8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	3303      	adds	r3, #3
 8005fd2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005fe6:	f000 fadf 	bl	80065a8 <vTaskStartScheduler>
  
  return osOK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ff2:	b089      	sub	sp, #36	; 0x24
 8005ff4:	af04      	add	r7, sp, #16
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d020      	beq.n	8006044 <osThreadCreate+0x54>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01c      	beq.n	8006044 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685c      	ldr	r4, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681d      	ldr	r5, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691e      	ldr	r6, [r3, #16]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff ffc8 	bl	8005fb2 <makeFreeRtosPriority>
 8006022:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800602c:	9202      	str	r2, [sp, #8]
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	9100      	str	r1, [sp, #0]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	4632      	mov	r2, r6
 8006036:	4629      	mov	r1, r5
 8006038:	4620      	mov	r0, r4
 800603a:	f000 f8ed 	bl	8006218 <xTaskCreateStatic>
 800603e:	4603      	mov	r3, r0
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	e01c      	b.n	800607e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685c      	ldr	r4, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006050:	b29e      	uxth	r6, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff ffaa 	bl	8005fb2 <makeFreeRtosPriority>
 800605e:	4602      	mov	r2, r0
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	9301      	str	r3, [sp, #4]
 8006066:	9200      	str	r2, [sp, #0]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	4632      	mov	r2, r6
 800606c:	4629      	mov	r1, r5
 800606e:	4620      	mov	r0, r4
 8006070:	f000 f92f 	bl	80062d2 <xTaskCreate>
 8006074:	4603      	mov	r3, r0
 8006076:	2b01      	cmp	r3, #1
 8006078:	d001      	beq.n	800607e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800607a:	2300      	movs	r3, #0
 800607c:	e000      	b.n	8006080 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800607e:	68fb      	ldr	r3, [r7, #12]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006088 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <osDelay+0x16>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	e000      	b.n	80060a0 <osDelay+0x18>
 800609e:	2301      	movs	r3, #1
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fa4d 	bl	8006540 <vTaskDelay>
  
  return osOK;
 80060a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f103 0208 	add.w	r2, r3, #8
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f04f 32ff 	mov.w	r2, #4294967295
 80060c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f103 0208 	add.w	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f103 0208 	add.w	r2, r3, #8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800610a:	b480      	push	{r7}
 800610c:	b085      	sub	sp, #20
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006168:	d103      	bne.n	8006172 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e00c      	b.n	800618c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3308      	adds	r3, #8
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	e002      	b.n	8006180 <vListInsert+0x2e>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	429a      	cmp	r2, r3
 800618a:	d2f6      	bcs.n	800617a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6892      	ldr	r2, [r2, #8]
 80061da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6852      	ldr	r2, [r2, #4]
 80061e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d103      	bne.n	80061f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	1e5a      	subs	r2, r3, #1
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08e      	sub	sp, #56	; 0x38
 800621c:	af04      	add	r7, sp, #16
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xTaskCreateStatic+0x46>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61fb      	str	r3, [r7, #28]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800625e:	2354      	movs	r3, #84	; 0x54
 8006260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2b54      	cmp	r3, #84	; 0x54
 8006266:	d00a      	beq.n	800627e <xTaskCreateStatic+0x66>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	61bb      	str	r3, [r7, #24]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800627e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01e      	beq.n	80062c4 <xTaskCreateStatic+0xac>
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01b      	beq.n	80062c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006294:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	2202      	movs	r2, #2
 800629a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800629e:	2300      	movs	r3, #0
 80062a0:	9303      	str	r3, [sp, #12]
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	9302      	str	r3, [sp, #8]
 80062a6:	f107 0314 	add.w	r3, r7, #20
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f850 	bl	800635c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062be:	f000 f8d5 	bl	800646c <prvAddNewTaskToReadyList>
 80062c2:	e001      	b.n	80062c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062c8:	697b      	ldr	r3, [r7, #20]
	}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3728      	adds	r7, #40	; 0x28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b08c      	sub	sp, #48	; 0x30
 80062d6:	af04      	add	r7, sp, #16
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	603b      	str	r3, [r7, #0]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fee6 	bl	80070b8 <pvPortMalloc>
 80062ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00e      	beq.n	8006312 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062f4:	2054      	movs	r0, #84	; 0x54
 80062f6:	f000 fedf 	bl	80070b8 <pvPortMalloc>
 80062fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
 8006308:	e005      	b.n	8006316 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800630a:	6978      	ldr	r0, [r7, #20]
 800630c:	f000 ffa0 	bl	8007250 <vPortFree>
 8006310:	e001      	b.n	8006316 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006312:	2300      	movs	r3, #0
 8006314:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d017      	beq.n	800634c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006324:	88fa      	ldrh	r2, [r7, #6]
 8006326:	2300      	movs	r3, #0
 8006328:	9303      	str	r3, [sp, #12]
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	9302      	str	r3, [sp, #8]
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 f80e 	bl	800635c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006340:	69f8      	ldr	r0, [r7, #28]
 8006342:	f000 f893 	bl	800646c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006346:	2301      	movs	r3, #1
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	e002      	b.n	8006352 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800634c:	f04f 33ff 	mov.w	r3, #4294967295
 8006350:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006352:	69bb      	ldr	r3, [r7, #24]
	}
 8006354:	4618      	mov	r0, r3
 8006356:	3720      	adds	r7, #32
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006374:	3b01      	subs	r3, #1
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	f023 0307 	bic.w	r3, r3, #7
 8006382:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	617b      	str	r3, [r7, #20]
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d01f      	beq.n	80063ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063aa:	2300      	movs	r3, #0
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	e012      	b.n	80063d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	4413      	add	r3, r2
 80063b6:	7819      	ldrb	r1, [r3, #0]
 80063b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	3334      	adds	r3, #52	; 0x34
 80063c0:	460a      	mov	r2, r1
 80063c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4413      	add	r3, r2
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d006      	beq.n	80063de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	3301      	adds	r3, #1
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	2b0f      	cmp	r3, #15
 80063da:	d9e9      	bls.n	80063b0 <prvInitialiseNewTask+0x54>
 80063dc:	e000      	b.n	80063e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80063de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063e8:	e003      	b.n	80063f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	2b06      	cmp	r3, #6
 80063f6:	d901      	bls.n	80063fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063f8:	2306      	movs	r3, #6
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006400:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006406:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	2200      	movs	r2, #0
 800640c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	3304      	adds	r3, #4
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff fe6c 	bl	80060f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	3318      	adds	r3, #24
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fe67 	bl	80060f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006426:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	f1c3 0207 	rsb	r2, r3, #7
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006436:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	2200      	movs	r2, #0
 800643c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	68f9      	ldr	r1, [r7, #12]
 800644a:	69b8      	ldr	r0, [r7, #24]
 800644c:	f000 fc24 	bl	8006c98 <pxPortInitialiseStack>
 8006450:	4602      	mov	r2, r0
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006462:	bf00      	nop
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006474:	f000 fd3e 	bl	8006ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006478:	4b2a      	ldr	r3, [pc, #168]	; (8006524 <prvAddNewTaskToReadyList+0xb8>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3301      	adds	r3, #1
 800647e:	4a29      	ldr	r2, [pc, #164]	; (8006524 <prvAddNewTaskToReadyList+0xb8>)
 8006480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006482:	4b29      	ldr	r3, [pc, #164]	; (8006528 <prvAddNewTaskToReadyList+0xbc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800648a:	4a27      	ldr	r2, [pc, #156]	; (8006528 <prvAddNewTaskToReadyList+0xbc>)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006490:	4b24      	ldr	r3, [pc, #144]	; (8006524 <prvAddNewTaskToReadyList+0xb8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d110      	bne.n	80064ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006498:	f000 fabc 	bl	8006a14 <prvInitialiseTaskLists>
 800649c:	e00d      	b.n	80064ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800649e:	4b23      	ldr	r3, [pc, #140]	; (800652c <prvAddNewTaskToReadyList+0xc0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064a6:	4b20      	ldr	r3, [pc, #128]	; (8006528 <prvAddNewTaskToReadyList+0xbc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d802      	bhi.n	80064ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064b4:	4a1c      	ldr	r2, [pc, #112]	; (8006528 <prvAddNewTaskToReadyList+0xbc>)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064ba:	4b1d      	ldr	r3, [pc, #116]	; (8006530 <prvAddNewTaskToReadyList+0xc4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3301      	adds	r3, #1
 80064c0:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <prvAddNewTaskToReadyList+0xc4>)
 80064c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	2201      	movs	r2, #1
 80064ca:	409a      	lsls	r2, r3
 80064cc:	4b19      	ldr	r3, [pc, #100]	; (8006534 <prvAddNewTaskToReadyList+0xc8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	4a18      	ldr	r2, [pc, #96]	; (8006534 <prvAddNewTaskToReadyList+0xc8>)
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4a15      	ldr	r2, [pc, #84]	; (8006538 <prvAddNewTaskToReadyList+0xcc>)
 80064e4:	441a      	add	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f7ff fe0c 	bl	800610a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064f2:	f000 fd2f 	bl	8006f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064f6:	4b0d      	ldr	r3, [pc, #52]	; (800652c <prvAddNewTaskToReadyList+0xc0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00e      	beq.n	800651c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064fe:	4b0a      	ldr	r3, [pc, #40]	; (8006528 <prvAddNewTaskToReadyList+0xbc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	429a      	cmp	r2, r3
 800650a:	d207      	bcs.n	800651c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <prvAddNewTaskToReadyList+0xd0>)
 800650e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000728 	.word	0x20000728
 8006528:	20000628 	.word	0x20000628
 800652c:	20000734 	.word	0x20000734
 8006530:	20000744 	.word	0x20000744
 8006534:	20000730 	.word	0x20000730
 8006538:	2000062c 	.word	0x2000062c
 800653c:	e000ed04 	.word	0xe000ed04

08006540 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d017      	beq.n	8006582 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006552:	4b13      	ldr	r3, [pc, #76]	; (80065a0 <vTaskDelay+0x60>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <vTaskDelay+0x30>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	60bb      	str	r3, [r7, #8]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006570:	f000 f87a 	bl	8006668 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006574:	2100      	movs	r1, #0
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fb28 	bl	8006bcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800657c:	f000 f882 	bl	8006684 <xTaskResumeAll>
 8006580:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d107      	bne.n	8006598 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006588:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <vTaskDelay+0x64>)
 800658a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000750 	.word	0x20000750
 80065a4:	e000ed04 	.word	0xe000ed04

080065a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065b6:	463a      	mov	r2, r7
 80065b8:	1d39      	adds	r1, r7, #4
 80065ba:	f107 0308 	add.w	r3, r7, #8
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fa f982 	bl	80008c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	9202      	str	r2, [sp, #8]
 80065cc:	9301      	str	r3, [sp, #4]
 80065ce:	2300      	movs	r3, #0
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	2300      	movs	r3, #0
 80065d4:	460a      	mov	r2, r1
 80065d6:	491e      	ldr	r1, [pc, #120]	; (8006650 <vTaskStartScheduler+0xa8>)
 80065d8:	481e      	ldr	r0, [pc, #120]	; (8006654 <vTaskStartScheduler+0xac>)
 80065da:	f7ff fe1d 	bl	8006218 <xTaskCreateStatic>
 80065de:	4603      	mov	r3, r0
 80065e0:	4a1d      	ldr	r2, [pc, #116]	; (8006658 <vTaskStartScheduler+0xb0>)
 80065e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065e4:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <vTaskStartScheduler+0xb0>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065ec:	2301      	movs	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e001      	b.n	80065f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d116      	bne.n	800662a <vTaskStartScheduler+0x82>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	613b      	str	r3, [r7, #16]
}
 800660e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006610:	4b12      	ldr	r3, [pc, #72]	; (800665c <vTaskStartScheduler+0xb4>)
 8006612:	f04f 32ff 	mov.w	r2, #4294967295
 8006616:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006618:	4b11      	ldr	r3, [pc, #68]	; (8006660 <vTaskStartScheduler+0xb8>)
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <vTaskStartScheduler+0xbc>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006624:	f000 fbc4 	bl	8006db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006628:	e00e      	b.n	8006648 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d10a      	bne.n	8006648 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	60fb      	str	r3, [r7, #12]
}
 8006644:	bf00      	nop
 8006646:	e7fe      	b.n	8006646 <vTaskStartScheduler+0x9e>
}
 8006648:	bf00      	nop
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	08008c7c 	.word	0x08008c7c
 8006654:	080069e5 	.word	0x080069e5
 8006658:	2000074c 	.word	0x2000074c
 800665c:	20000748 	.word	0x20000748
 8006660:	20000734 	.word	0x20000734
 8006664:	2000072c 	.word	0x2000072c

08006668 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800666c:	4b04      	ldr	r3, [pc, #16]	; (8006680 <vTaskSuspendAll+0x18>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3301      	adds	r3, #1
 8006672:	4a03      	ldr	r2, [pc, #12]	; (8006680 <vTaskSuspendAll+0x18>)
 8006674:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006676:	bf00      	nop
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	20000750 	.word	0x20000750

08006684 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006692:	4b41      	ldr	r3, [pc, #260]	; (8006798 <xTaskResumeAll+0x114>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	603b      	str	r3, [r7, #0]
}
 80066ac:	bf00      	nop
 80066ae:	e7fe      	b.n	80066ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066b0:	f000 fc20 	bl	8006ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066b4:	4b38      	ldr	r3, [pc, #224]	; (8006798 <xTaskResumeAll+0x114>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	4a37      	ldr	r2, [pc, #220]	; (8006798 <xTaskResumeAll+0x114>)
 80066bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066be:	4b36      	ldr	r3, [pc, #216]	; (8006798 <xTaskResumeAll+0x114>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d161      	bne.n	800678a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066c6:	4b35      	ldr	r3, [pc, #212]	; (800679c <xTaskResumeAll+0x118>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d05d      	beq.n	800678a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066ce:	e02e      	b.n	800672e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d0:	4b33      	ldr	r3, [pc, #204]	; (80067a0 <xTaskResumeAll+0x11c>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3318      	adds	r3, #24
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff fd71 	bl	80061c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fd6c 	bl	80061c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	2201      	movs	r2, #1
 80066f2:	409a      	lsls	r2, r3
 80066f4:	4b2b      	ldr	r3, [pc, #172]	; (80067a4 <xTaskResumeAll+0x120>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	4a2a      	ldr	r2, [pc, #168]	; (80067a4 <xTaskResumeAll+0x120>)
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4a27      	ldr	r2, [pc, #156]	; (80067a8 <xTaskResumeAll+0x124>)
 800670c:	441a      	add	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3304      	adds	r3, #4
 8006712:	4619      	mov	r1, r3
 8006714:	4610      	mov	r0, r2
 8006716:	f7ff fcf8 	bl	800610a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671e:	4b23      	ldr	r3, [pc, #140]	; (80067ac <xTaskResumeAll+0x128>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	429a      	cmp	r2, r3
 8006726:	d302      	bcc.n	800672e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006728:	4b21      	ldr	r3, [pc, #132]	; (80067b0 <xTaskResumeAll+0x12c>)
 800672a:	2201      	movs	r2, #1
 800672c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800672e:	4b1c      	ldr	r3, [pc, #112]	; (80067a0 <xTaskResumeAll+0x11c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1cc      	bne.n	80066d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800673c:	f000 fa08 	bl	8006b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006740:	4b1c      	ldr	r3, [pc, #112]	; (80067b4 <xTaskResumeAll+0x130>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d010      	beq.n	800676e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800674c:	f000 f836 	bl	80067bc <xTaskIncrementTick>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006756:	4b16      	ldr	r3, [pc, #88]	; (80067b0 <xTaskResumeAll+0x12c>)
 8006758:	2201      	movs	r2, #1
 800675a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	3b01      	subs	r3, #1
 8006760:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f1      	bne.n	800674c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006768:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <xTaskResumeAll+0x130>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800676e:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <xTaskResumeAll+0x12c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d009      	beq.n	800678a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006776:	2301      	movs	r3, #1
 8006778:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <xTaskResumeAll+0x134>)
 800677c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800678a:	f000 fbe3 	bl	8006f54 <vPortExitCritical>

	return xAlreadyYielded;
 800678e:	68bb      	ldr	r3, [r7, #8]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20000750 	.word	0x20000750
 800679c:	20000728 	.word	0x20000728
 80067a0:	200006e8 	.word	0x200006e8
 80067a4:	20000730 	.word	0x20000730
 80067a8:	2000062c 	.word	0x2000062c
 80067ac:	20000628 	.word	0x20000628
 80067b0:	2000073c 	.word	0x2000073c
 80067b4:	20000738 	.word	0x20000738
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c6:	4b4e      	ldr	r3, [pc, #312]	; (8006900 <xTaskIncrementTick+0x144>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 808e 	bne.w	80068ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067d0:	4b4c      	ldr	r3, [pc, #304]	; (8006904 <xTaskIncrementTick+0x148>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067d8:	4a4a      	ldr	r2, [pc, #296]	; (8006904 <xTaskIncrementTick+0x148>)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d120      	bne.n	8006826 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80067e4:	4b48      	ldr	r3, [pc, #288]	; (8006908 <xTaskIncrementTick+0x14c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <xTaskIncrementTick+0x48>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	603b      	str	r3, [r7, #0]
}
 8006800:	bf00      	nop
 8006802:	e7fe      	b.n	8006802 <xTaskIncrementTick+0x46>
 8006804:	4b40      	ldr	r3, [pc, #256]	; (8006908 <xTaskIncrementTick+0x14c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	4b40      	ldr	r3, [pc, #256]	; (800690c <xTaskIncrementTick+0x150>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a3e      	ldr	r2, [pc, #248]	; (8006908 <xTaskIncrementTick+0x14c>)
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	4a3e      	ldr	r2, [pc, #248]	; (800690c <xTaskIncrementTick+0x150>)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	4b3d      	ldr	r3, [pc, #244]	; (8006910 <xTaskIncrementTick+0x154>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3301      	adds	r3, #1
 800681e:	4a3c      	ldr	r2, [pc, #240]	; (8006910 <xTaskIncrementTick+0x154>)
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	f000 f995 	bl	8006b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006826:	4b3b      	ldr	r3, [pc, #236]	; (8006914 <xTaskIncrementTick+0x158>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	429a      	cmp	r2, r3
 800682e:	d348      	bcc.n	80068c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006830:	4b35      	ldr	r3, [pc, #212]	; (8006908 <xTaskIncrementTick+0x14c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d104      	bne.n	8006844 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683a:	4b36      	ldr	r3, [pc, #216]	; (8006914 <xTaskIncrementTick+0x158>)
 800683c:	f04f 32ff 	mov.w	r2, #4294967295
 8006840:	601a      	str	r2, [r3, #0]
					break;
 8006842:	e03e      	b.n	80068c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006844:	4b30      	ldr	r3, [pc, #192]	; (8006908 <xTaskIncrementTick+0x14c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	429a      	cmp	r2, r3
 800685a:	d203      	bcs.n	8006864 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800685c:	4a2d      	ldr	r2, [pc, #180]	; (8006914 <xTaskIncrementTick+0x158>)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006862:	e02e      	b.n	80068c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	3304      	adds	r3, #4
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff fcab 	bl	80061c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3318      	adds	r3, #24
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fca2 	bl	80061c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	2201      	movs	r2, #1
 8006886:	409a      	lsls	r2, r3
 8006888:	4b23      	ldr	r3, [pc, #140]	; (8006918 <xTaskIncrementTick+0x15c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4313      	orrs	r3, r2
 800688e:	4a22      	ldr	r2, [pc, #136]	; (8006918 <xTaskIncrementTick+0x15c>)
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4a1f      	ldr	r2, [pc, #124]	; (800691c <xTaskIncrementTick+0x160>)
 80068a0:	441a      	add	r2, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4619      	mov	r1, r3
 80068a8:	4610      	mov	r0, r2
 80068aa:	f7ff fc2e 	bl	800610a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b2:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <xTaskIncrementTick+0x164>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d3b9      	bcc.n	8006830 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068c0:	e7b6      	b.n	8006830 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068c2:	4b17      	ldr	r3, [pc, #92]	; (8006920 <xTaskIncrementTick+0x164>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c8:	4914      	ldr	r1, [pc, #80]	; (800691c <xTaskIncrementTick+0x160>)
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d901      	bls.n	80068de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80068da:	2301      	movs	r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068de:	4b11      	ldr	r3, [pc, #68]	; (8006924 <xTaskIncrementTick+0x168>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80068e6:	2301      	movs	r3, #1
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	e004      	b.n	80068f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068ec:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <xTaskIncrementTick+0x16c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3301      	adds	r3, #1
 80068f2:	4a0d      	ldr	r2, [pc, #52]	; (8006928 <xTaskIncrementTick+0x16c>)
 80068f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068f6:	697b      	ldr	r3, [r7, #20]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	20000750 	.word	0x20000750
 8006904:	2000072c 	.word	0x2000072c
 8006908:	200006e0 	.word	0x200006e0
 800690c:	200006e4 	.word	0x200006e4
 8006910:	20000740 	.word	0x20000740
 8006914:	20000748 	.word	0x20000748
 8006918:	20000730 	.word	0x20000730
 800691c:	2000062c 	.word	0x2000062c
 8006920:	20000628 	.word	0x20000628
 8006924:	2000073c 	.word	0x2000073c
 8006928:	20000738 	.word	0x20000738

0800692c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006932:	4b27      	ldr	r3, [pc, #156]	; (80069d0 <vTaskSwitchContext+0xa4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800693a:	4b26      	ldr	r3, [pc, #152]	; (80069d4 <vTaskSwitchContext+0xa8>)
 800693c:	2201      	movs	r2, #1
 800693e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006940:	e03f      	b.n	80069c2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006942:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <vTaskSwitchContext+0xa8>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006948:	4b23      	ldr	r3, [pc, #140]	; (80069d8 <vTaskSwitchContext+0xac>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	fab3 f383 	clz	r3, r3
 8006954:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006956:	7afb      	ldrb	r3, [r7, #11]
 8006958:	f1c3 031f 	rsb	r3, r3, #31
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	491f      	ldr	r1, [pc, #124]	; (80069dc <vTaskSwitchContext+0xb0>)
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	607b      	str	r3, [r7, #4]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <vTaskSwitchContext+0x5a>
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4a12      	ldr	r2, [pc, #72]	; (80069dc <vTaskSwitchContext+0xb0>)
 8006994:	4413      	add	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	3308      	adds	r3, #8
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d104      	bne.n	80069b8 <vTaskSwitchContext+0x8c>
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	605a      	str	r2, [r3, #4]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	4a08      	ldr	r2, [pc, #32]	; (80069e0 <vTaskSwitchContext+0xb4>)
 80069c0:	6013      	str	r3, [r2, #0]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	20000750 	.word	0x20000750
 80069d4:	2000073c 	.word	0x2000073c
 80069d8:	20000730 	.word	0x20000730
 80069dc:	2000062c 	.word	0x2000062c
 80069e0:	20000628 	.word	0x20000628

080069e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069ec:	f000 f852 	bl	8006a94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069f0:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <prvIdleTask+0x28>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d9f9      	bls.n	80069ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <prvIdleTask+0x2c>)
 80069fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a08:	e7f0      	b.n	80069ec <prvIdleTask+0x8>
 8006a0a:	bf00      	nop
 8006a0c:	2000062c 	.word	0x2000062c
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	607b      	str	r3, [r7, #4]
 8006a1e:	e00c      	b.n	8006a3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <prvInitialiseTaskLists+0x60>)
 8006a2c:	4413      	add	r3, r2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fb3e 	bl	80060b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3301      	adds	r3, #1
 8006a38:	607b      	str	r3, [r7, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b06      	cmp	r3, #6
 8006a3e:	d9ef      	bls.n	8006a20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a40:	480d      	ldr	r0, [pc, #52]	; (8006a78 <prvInitialiseTaskLists+0x64>)
 8006a42:	f7ff fb35 	bl	80060b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a46:	480d      	ldr	r0, [pc, #52]	; (8006a7c <prvInitialiseTaskLists+0x68>)
 8006a48:	f7ff fb32 	bl	80060b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a4c:	480c      	ldr	r0, [pc, #48]	; (8006a80 <prvInitialiseTaskLists+0x6c>)
 8006a4e:	f7ff fb2f 	bl	80060b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a52:	480c      	ldr	r0, [pc, #48]	; (8006a84 <prvInitialiseTaskLists+0x70>)
 8006a54:	f7ff fb2c 	bl	80060b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a58:	480b      	ldr	r0, [pc, #44]	; (8006a88 <prvInitialiseTaskLists+0x74>)
 8006a5a:	f7ff fb29 	bl	80060b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a5e:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <prvInitialiseTaskLists+0x78>)
 8006a60:	4a05      	ldr	r2, [pc, #20]	; (8006a78 <prvInitialiseTaskLists+0x64>)
 8006a62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <prvInitialiseTaskLists+0x7c>)
 8006a66:	4a05      	ldr	r2, [pc, #20]	; (8006a7c <prvInitialiseTaskLists+0x68>)
 8006a68:	601a      	str	r2, [r3, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	2000062c 	.word	0x2000062c
 8006a78:	200006b8 	.word	0x200006b8
 8006a7c:	200006cc 	.word	0x200006cc
 8006a80:	200006e8 	.word	0x200006e8
 8006a84:	200006fc 	.word	0x200006fc
 8006a88:	20000714 	.word	0x20000714
 8006a8c:	200006e0 	.word	0x200006e0
 8006a90:	200006e4 	.word	0x200006e4

08006a94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a9a:	e019      	b.n	8006ad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a9c:	f000 fa2a 	bl	8006ef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa0:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <prvCheckTasksWaitingTermination+0x50>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff fb89 	bl	80061c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <prvCheckTasksWaitingTermination+0x54>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	4a0b      	ldr	r2, [pc, #44]	; (8006ae8 <prvCheckTasksWaitingTermination+0x54>)
 8006aba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006abc:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <prvCheckTasksWaitingTermination+0x58>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <prvCheckTasksWaitingTermination+0x58>)
 8006ac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ac6:	f000 fa45 	bl	8006f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f810 	bl	8006af0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ad0:	4b06      	ldr	r3, [pc, #24]	; (8006aec <prvCheckTasksWaitingTermination+0x58>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e1      	bne.n	8006a9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200006fc 	.word	0x200006fc
 8006ae8:	20000728 	.word	0x20000728
 8006aec:	20000710 	.word	0x20000710

08006af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d108      	bne.n	8006b14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fba2 	bl	8007250 <vPortFree>
				vPortFree( pxTCB );
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fb9f 	bl	8007250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b12:	e018      	b.n	8006b46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d103      	bne.n	8006b26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fb96 	bl	8007250 <vPortFree>
	}
 8006b24:	e00f      	b.n	8006b46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d00a      	beq.n	8006b46 <prvDeleteTCB+0x56>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60fb      	str	r3, [r7, #12]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <prvDeleteTCB+0x54>
	}
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <prvResetNextTaskUnblockTime+0x38>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d104      	bne.n	8006b6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b60:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <prvResetNextTaskUnblockTime+0x3c>)
 8006b62:	f04f 32ff 	mov.w	r2, #4294967295
 8006b66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b68:	e008      	b.n	8006b7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b6a:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <prvResetNextTaskUnblockTime+0x38>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	4a04      	ldr	r2, [pc, #16]	; (8006b8c <prvResetNextTaskUnblockTime+0x3c>)
 8006b7a:	6013      	str	r3, [r2, #0]
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	200006e0 	.word	0x200006e0
 8006b8c:	20000748 	.word	0x20000748

08006b90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <xTaskGetSchedulerState+0x34>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	607b      	str	r3, [r7, #4]
 8006ba2:	e008      	b.n	8006bb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba4:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <xTaskGetSchedulerState+0x38>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d102      	bne.n	8006bb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bac:	2302      	movs	r3, #2
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	e001      	b.n	8006bb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bb6:	687b      	ldr	r3, [r7, #4]
	}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	20000734 	.word	0x20000734
 8006bc8:	20000750 	.word	0x20000750

08006bcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bd6:	4b29      	ldr	r3, [pc, #164]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bdc:	4b28      	ldr	r3, [pc, #160]	; (8006c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff faee 	bl	80061c4 <uxListRemove>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006bee:	4b24      	ldr	r3, [pc, #144]	; (8006c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfa:	43da      	mvns	r2, r3
 8006bfc:	4b21      	ldr	r3, [pc, #132]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4013      	ands	r3, r2
 8006c02:	4a20      	ldr	r2, [pc, #128]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0c:	d10a      	bne.n	8006c24 <prvAddCurrentTaskToDelayedList+0x58>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c14:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	481a      	ldr	r0, [pc, #104]	; (8006c88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c1e:	f7ff fa74 	bl	800610a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c22:	e026      	b.n	8006c72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4413      	add	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c2c:	4b14      	ldr	r3, [pc, #80]	; (8006c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d209      	bcs.n	8006c50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c3c:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	4b0f      	ldr	r3, [pc, #60]	; (8006c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3304      	adds	r3, #4
 8006c46:	4619      	mov	r1, r3
 8006c48:	4610      	mov	r0, r2
 8006c4a:	f7ff fa82 	bl	8006152 <vListInsert>
}
 8006c4e:	e010      	b.n	8006c72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c50:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	f7ff fa78 	bl	8006152 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c62:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d202      	bcs.n	8006c72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006c6c:	4a09      	ldr	r2, [pc, #36]	; (8006c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6013      	str	r3, [r2, #0]
}
 8006c72:	bf00      	nop
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	2000072c 	.word	0x2000072c
 8006c80:	20000628 	.word	0x20000628
 8006c84:	20000730 	.word	0x20000730
 8006c88:	20000714 	.word	0x20000714
 8006c8c:	200006e4 	.word	0x200006e4
 8006c90:	200006e0 	.word	0x200006e0
 8006c94:	20000748 	.word	0x20000748

08006c98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3b04      	subs	r3, #4
 8006ca8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3b04      	subs	r3, #4
 8006cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f023 0201 	bic.w	r2, r3, #1
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3b04      	subs	r3, #4
 8006cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cc8:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <pxPortInitialiseStack+0x64>)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3b14      	subs	r3, #20
 8006cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3b04      	subs	r3, #4
 8006cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f06f 0202 	mvn.w	r2, #2
 8006ce6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3b20      	subs	r3, #32
 8006cec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cee:	68fb      	ldr	r3, [r7, #12]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	08006d01 	.word	0x08006d01

08006d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d0a:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <prvTaskExitError+0x54>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d12:	d00a      	beq.n	8006d2a <prvTaskExitError+0x2a>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	60fb      	str	r3, [r7, #12]
}
 8006d26:	bf00      	nop
 8006d28:	e7fe      	b.n	8006d28 <prvTaskExitError+0x28>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	60bb      	str	r3, [r7, #8]
}
 8006d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d3e:	bf00      	nop
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0fc      	beq.n	8006d40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d46:	bf00      	nop
 8006d48:	bf00      	nop
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	2000001c 	.word	0x2000001c
	...

08006d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d60:	4b07      	ldr	r3, [pc, #28]	; (8006d80 <pxCurrentTCBConst2>)
 8006d62:	6819      	ldr	r1, [r3, #0]
 8006d64:	6808      	ldr	r0, [r1, #0]
 8006d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6a:	f380 8809 	msr	PSP, r0
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f04f 0000 	mov.w	r0, #0
 8006d76:	f380 8811 	msr	BASEPRI, r0
 8006d7a:	4770      	bx	lr
 8006d7c:	f3af 8000 	nop.w

08006d80 <pxCurrentTCBConst2>:
 8006d80:	20000628 	.word	0x20000628
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop

08006d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d88:	4808      	ldr	r0, [pc, #32]	; (8006dac <prvPortStartFirstTask+0x24>)
 8006d8a:	6800      	ldr	r0, [r0, #0]
 8006d8c:	6800      	ldr	r0, [r0, #0]
 8006d8e:	f380 8808 	msr	MSP, r0
 8006d92:	f04f 0000 	mov.w	r0, #0
 8006d96:	f380 8814 	msr	CONTROL, r0
 8006d9a:	b662      	cpsie	i
 8006d9c:	b661      	cpsie	f
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	df00      	svc	0
 8006da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006daa:	bf00      	nop
 8006dac:	e000ed08 	.word	0xe000ed08

08006db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006db6:	4b46      	ldr	r3, [pc, #280]	; (8006ed0 <xPortStartScheduler+0x120>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a46      	ldr	r2, [pc, #280]	; (8006ed4 <xPortStartScheduler+0x124>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d10a      	bne.n	8006dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	613b      	str	r3, [r7, #16]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006dd6:	4b3e      	ldr	r3, [pc, #248]	; (8006ed0 <xPortStartScheduler+0x120>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a3f      	ldr	r2, [pc, #252]	; (8006ed8 <xPortStartScheduler+0x128>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10a      	bne.n	8006df6 <xPortStartScheduler+0x46>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	60fb      	str	r3, [r7, #12]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006df6:	4b39      	ldr	r3, [pc, #228]	; (8006edc <xPortStartScheduler+0x12c>)
 8006df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	22ff      	movs	r2, #255	; 0xff
 8006e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <xPortStartScheduler+0x130>)
 8006e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e1e:	4b31      	ldr	r3, [pc, #196]	; (8006ee4 <xPortStartScheduler+0x134>)
 8006e20:	2207      	movs	r2, #7
 8006e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e24:	e009      	b.n	8006e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e26:	4b2f      	ldr	r3, [pc, #188]	; (8006ee4 <xPortStartScheduler+0x134>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ee4 <xPortStartScheduler+0x134>)
 8006e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e42:	2b80      	cmp	r3, #128	; 0x80
 8006e44:	d0ef      	beq.n	8006e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e46:	4b27      	ldr	r3, [pc, #156]	; (8006ee4 <xPortStartScheduler+0x134>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f1c3 0307 	rsb	r3, r3, #7
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d00a      	beq.n	8006e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	60bb      	str	r3, [r7, #8]
}
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e68:	4b1e      	ldr	r3, [pc, #120]	; (8006ee4 <xPortStartScheduler+0x134>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <xPortStartScheduler+0x134>)
 8006e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e72:	4b1c      	ldr	r3, [pc, #112]	; (8006ee4 <xPortStartScheduler+0x134>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ee4 <xPortStartScheduler+0x134>)
 8006e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e86:	4b18      	ldr	r3, [pc, #96]	; (8006ee8 <xPortStartScheduler+0x138>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a17      	ldr	r2, [pc, #92]	; (8006ee8 <xPortStartScheduler+0x138>)
 8006e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e92:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <xPortStartScheduler+0x138>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a14      	ldr	r2, [pc, #80]	; (8006ee8 <xPortStartScheduler+0x138>)
 8006e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e9e:	f000 f8dd 	bl	800705c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ea2:	4b12      	ldr	r3, [pc, #72]	; (8006eec <xPortStartScheduler+0x13c>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ea8:	f000 f8fc 	bl	80070a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006eac:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <xPortStartScheduler+0x140>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a0f      	ldr	r2, [pc, #60]	; (8006ef0 <xPortStartScheduler+0x140>)
 8006eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006eb8:	f7ff ff66 	bl	8006d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ebc:	f7ff fd36 	bl	800692c <vTaskSwitchContext>
	prvTaskExitError();
 8006ec0:	f7ff ff1e 	bl	8006d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	e000ed00 	.word	0xe000ed00
 8006ed4:	410fc271 	.word	0x410fc271
 8006ed8:	410fc270 	.word	0x410fc270
 8006edc:	e000e400 	.word	0xe000e400
 8006ee0:	20000754 	.word	0x20000754
 8006ee4:	20000758 	.word	0x20000758
 8006ee8:	e000ed20 	.word	0xe000ed20
 8006eec:	2000001c 	.word	0x2000001c
 8006ef0:	e000ef34 	.word	0xe000ef34

08006ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	607b      	str	r3, [r7, #4]
}
 8006f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f0e:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <vPortEnterCritical+0x58>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3301      	adds	r3, #1
 8006f14:	4a0d      	ldr	r2, [pc, #52]	; (8006f4c <vPortEnterCritical+0x58>)
 8006f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <vPortEnterCritical+0x58>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d10f      	bne.n	8006f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f20:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <vPortEnterCritical+0x5c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	603b      	str	r3, [r7, #0]
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <vPortEnterCritical+0x4a>
	}
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	2000001c 	.word	0x2000001c
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f5a:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <vPortExitCritical+0x50>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <vPortExitCritical+0x24>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	607b      	str	r3, [r7, #4]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f78:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <vPortExitCritical+0x50>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	4a09      	ldr	r2, [pc, #36]	; (8006fa4 <vPortExitCritical+0x50>)
 8006f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f82:	4b08      	ldr	r3, [pc, #32]	; (8006fa4 <vPortExitCritical+0x50>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d105      	bne.n	8006f96 <vPortExitCritical+0x42>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	2000001c 	.word	0x2000001c
	...

08006fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fb0:	f3ef 8009 	mrs	r0, PSP
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	4b15      	ldr	r3, [pc, #84]	; (8007010 <pxCurrentTCBConst>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	f01e 0f10 	tst.w	lr, #16
 8006fc0:	bf08      	it	eq
 8006fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fca:	6010      	str	r0, [r2, #0]
 8006fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fd4:	f380 8811 	msr	BASEPRI, r0
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f7ff fca4 	bl	800692c <vTaskSwitchContext>
 8006fe4:	f04f 0000 	mov.w	r0, #0
 8006fe8:	f380 8811 	msr	BASEPRI, r0
 8006fec:	bc09      	pop	{r0, r3}
 8006fee:	6819      	ldr	r1, [r3, #0]
 8006ff0:	6808      	ldr	r0, [r1, #0]
 8006ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff6:	f01e 0f10 	tst.w	lr, #16
 8006ffa:	bf08      	it	eq
 8006ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007000:	f380 8809 	msr	PSP, r0
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	f3af 8000 	nop.w

08007010 <pxCurrentTCBConst>:
 8007010:	20000628 	.word	0x20000628
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop

08007018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	607b      	str	r3, [r7, #4]
}
 8007030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007032:	f7ff fbc3 	bl	80067bc <xTaskIncrementTick>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <xPortSysTickHandler+0x40>)
 800703e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	2300      	movs	r3, #0
 8007046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	f383 8811 	msr	BASEPRI, r3
}
 800704e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007050:	bf00      	nop
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	e000ed04 	.word	0xe000ed04

0800705c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <vPortSetupTimerInterrupt+0x34>)
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <vPortSetupTimerInterrupt+0x38>)
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <vPortSetupTimerInterrupt+0x3c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a0a      	ldr	r2, [pc, #40]	; (800709c <vPortSetupTimerInterrupt+0x40>)
 8007072:	fba2 2303 	umull	r2, r3, r2, r3
 8007076:	099b      	lsrs	r3, r3, #6
 8007078:	4a09      	ldr	r2, [pc, #36]	; (80070a0 <vPortSetupTimerInterrupt+0x44>)
 800707a:	3b01      	subs	r3, #1
 800707c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800707e:	4b04      	ldr	r3, [pc, #16]	; (8007090 <vPortSetupTimerInterrupt+0x34>)
 8007080:	2207      	movs	r2, #7
 8007082:	601a      	str	r2, [r3, #0]
}
 8007084:	bf00      	nop
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	e000e010 	.word	0xe000e010
 8007094:	e000e018 	.word	0xe000e018
 8007098:	20000010 	.word	0x20000010
 800709c:	10624dd3 	.word	0x10624dd3
 80070a0:	e000e014 	.word	0xe000e014

080070a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070b4 <vPortEnableVFP+0x10>
 80070a8:	6801      	ldr	r1, [r0, #0]
 80070aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070ae:	6001      	str	r1, [r0, #0]
 80070b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070b2:	bf00      	nop
 80070b4:	e000ed88 	.word	0xe000ed88

080070b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08a      	sub	sp, #40	; 0x28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070c4:	f7ff fad0 	bl	8006668 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070c8:	4b5b      	ldr	r3, [pc, #364]	; (8007238 <pvPortMalloc+0x180>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070d0:	f000 f920 	bl	8007314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070d4:	4b59      	ldr	r3, [pc, #356]	; (800723c <pvPortMalloc+0x184>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8093 	bne.w	8007208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01d      	beq.n	8007124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80070e8:	2208      	movs	r2, #8
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d014      	beq.n	8007124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f023 0307 	bic.w	r3, r3, #7
 8007100:	3308      	adds	r3, #8
 8007102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <pvPortMalloc+0x6c>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	617b      	str	r3, [r7, #20]
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d06e      	beq.n	8007208 <pvPortMalloc+0x150>
 800712a:	4b45      	ldr	r3, [pc, #276]	; (8007240 <pvPortMalloc+0x188>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d869      	bhi.n	8007208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007134:	4b43      	ldr	r3, [pc, #268]	; (8007244 <pvPortMalloc+0x18c>)
 8007136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007138:	4b42      	ldr	r3, [pc, #264]	; (8007244 <pvPortMalloc+0x18c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800713e:	e004      	b.n	800714a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d903      	bls.n	800715c <pvPortMalloc+0xa4>
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1f1      	bne.n	8007140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800715c:	4b36      	ldr	r3, [pc, #216]	; (8007238 <pvPortMalloc+0x180>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007162:	429a      	cmp	r2, r3
 8007164:	d050      	beq.n	8007208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2208      	movs	r2, #8
 800716c:	4413      	add	r3, r2
 800716e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	1ad2      	subs	r2, r2, r3
 8007180:	2308      	movs	r3, #8
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	429a      	cmp	r2, r3
 8007186:	d91f      	bls.n	80071c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4413      	add	r3, r2
 800718e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <pvPortMalloc+0xf8>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	613b      	str	r3, [r7, #16]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	1ad2      	subs	r2, r2, r3
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071c2:	69b8      	ldr	r0, [r7, #24]
 80071c4:	f000 f908 	bl	80073d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071c8:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <pvPortMalloc+0x188>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	4a1b      	ldr	r2, [pc, #108]	; (8007240 <pvPortMalloc+0x188>)
 80071d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071d6:	4b1a      	ldr	r3, [pc, #104]	; (8007240 <pvPortMalloc+0x188>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b1b      	ldr	r3, [pc, #108]	; (8007248 <pvPortMalloc+0x190>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d203      	bcs.n	80071ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071e2:	4b17      	ldr	r3, [pc, #92]	; (8007240 <pvPortMalloc+0x188>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a18      	ldr	r2, [pc, #96]	; (8007248 <pvPortMalloc+0x190>)
 80071e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	4b13      	ldr	r3, [pc, #76]	; (800723c <pvPortMalloc+0x184>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80071fe:	4b13      	ldr	r3, [pc, #76]	; (800724c <pvPortMalloc+0x194>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	4a11      	ldr	r2, [pc, #68]	; (800724c <pvPortMalloc+0x194>)
 8007206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007208:	f7ff fa3c 	bl	8006684 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <pvPortMalloc+0x174>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60fb      	str	r3, [r7, #12]
}
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <pvPortMalloc+0x172>
	return pvReturn;
 800722c:	69fb      	ldr	r3, [r7, #28]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3728      	adds	r7, #40	; 0x28
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	2000131c 	.word	0x2000131c
 800723c:	20001330 	.word	0x20001330
 8007240:	20001320 	.word	0x20001320
 8007244:	20001314 	.word	0x20001314
 8007248:	20001324 	.word	0x20001324
 800724c:	20001328 	.word	0x20001328

08007250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d04d      	beq.n	80072fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007262:	2308      	movs	r3, #8
 8007264:	425b      	negs	r3, r3
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4413      	add	r3, r2
 800726a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	4b24      	ldr	r3, [pc, #144]	; (8007308 <vPortFree+0xb8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <vPortFree+0x44>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60fb      	str	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <vPortFree+0x62>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	60bb      	str	r3, [r7, #8]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	4b14      	ldr	r3, [pc, #80]	; (8007308 <vPortFree+0xb8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01e      	beq.n	80072fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d11a      	bne.n	80072fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <vPortFree+0xb8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	43db      	mvns	r3, r3
 80072d2:	401a      	ands	r2, r3
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072d8:	f7ff f9c6 	bl	8006668 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <vPortFree+0xbc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4413      	add	r3, r2
 80072e6:	4a09      	ldr	r2, [pc, #36]	; (800730c <vPortFree+0xbc>)
 80072e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f000 f874 	bl	80073d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <vPortFree+0xc0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3301      	adds	r3, #1
 80072f6:	4a06      	ldr	r2, [pc, #24]	; (8007310 <vPortFree+0xc0>)
 80072f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80072fa:	f7ff f9c3 	bl	8006684 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20001330 	.word	0x20001330
 800730c:	20001320 	.word	0x20001320
 8007310:	2000132c 	.word	0x2000132c

08007314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800731a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800731e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007320:	4b27      	ldr	r3, [pc, #156]	; (80073c0 <prvHeapInit+0xac>)
 8007322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3307      	adds	r3, #7
 8007332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	4a1f      	ldr	r2, [pc, #124]	; (80073c0 <prvHeapInit+0xac>)
 8007344:	4413      	add	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800734c:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <prvHeapInit+0xb0>)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <prvHeapInit+0xb0>)
 8007354:	2200      	movs	r2, #0
 8007356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4413      	add	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007360:	2208      	movs	r2, #8
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0307 	bic.w	r3, r3, #7
 800736e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <prvHeapInit+0xb4>)
 8007374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007376:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <prvHeapInit+0xb4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800737e:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <prvHeapInit+0xb4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <prvHeapInit+0xb4>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	4a0a      	ldr	r2, [pc, #40]	; (80073cc <prvHeapInit+0xb8>)
 80073a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <prvHeapInit+0xbc>)
 80073aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073ac:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <prvHeapInit+0xc0>)
 80073ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	2000075c 	.word	0x2000075c
 80073c4:	20001314 	.word	0x20001314
 80073c8:	2000131c 	.word	0x2000131c
 80073cc:	20001324 	.word	0x20001324
 80073d0:	20001320 	.word	0x20001320
 80073d4:	20001330 	.word	0x20001330

080073d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073e0:	4b28      	ldr	r3, [pc, #160]	; (8007484 <prvInsertBlockIntoFreeList+0xac>)
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e002      	b.n	80073ec <prvInsertBlockIntoFreeList+0x14>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d8f7      	bhi.n	80073e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	4413      	add	r3, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d108      	bne.n	800741a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	441a      	add	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	441a      	add	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d118      	bne.n	8007460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b15      	ldr	r3, [pc, #84]	; (8007488 <prvInsertBlockIntoFreeList+0xb0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d00d      	beq.n	8007456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	441a      	add	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	e008      	b.n	8007468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007456:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <prvInsertBlockIntoFreeList+0xb0>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e003      	b.n	8007468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	429a      	cmp	r2, r3
 800746e:	d002      	beq.n	8007476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20001314 	.word	0x20001314
 8007488:	2000131c 	.word	0x2000131c

0800748c <__errno>:
 800748c:	4b01      	ldr	r3, [pc, #4]	; (8007494 <__errno+0x8>)
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20000020 	.word	0x20000020

08007498 <__libc_init_array>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	4d0d      	ldr	r5, [pc, #52]	; (80074d0 <__libc_init_array+0x38>)
 800749c:	4c0d      	ldr	r4, [pc, #52]	; (80074d4 <__libc_init_array+0x3c>)
 800749e:	1b64      	subs	r4, r4, r5
 80074a0:	10a4      	asrs	r4, r4, #2
 80074a2:	2600      	movs	r6, #0
 80074a4:	42a6      	cmp	r6, r4
 80074a6:	d109      	bne.n	80074bc <__libc_init_array+0x24>
 80074a8:	4d0b      	ldr	r5, [pc, #44]	; (80074d8 <__libc_init_array+0x40>)
 80074aa:	4c0c      	ldr	r4, [pc, #48]	; (80074dc <__libc_init_array+0x44>)
 80074ac:	f001 f80e 	bl	80084cc <_init>
 80074b0:	1b64      	subs	r4, r4, r5
 80074b2:	10a4      	asrs	r4, r4, #2
 80074b4:	2600      	movs	r6, #0
 80074b6:	42a6      	cmp	r6, r4
 80074b8:	d105      	bne.n	80074c6 <__libc_init_array+0x2e>
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c0:	4798      	blx	r3
 80074c2:	3601      	adds	r6, #1
 80074c4:	e7ee      	b.n	80074a4 <__libc_init_array+0xc>
 80074c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ca:	4798      	blx	r3
 80074cc:	3601      	adds	r6, #1
 80074ce:	e7f2      	b.n	80074b6 <__libc_init_array+0x1e>
 80074d0:	08008d6c 	.word	0x08008d6c
 80074d4:	08008d6c 	.word	0x08008d6c
 80074d8:	08008d6c 	.word	0x08008d6c
 80074dc:	08008d70 	.word	0x08008d70

080074e0 <malloc>:
 80074e0:	4b02      	ldr	r3, [pc, #8]	; (80074ec <malloc+0xc>)
 80074e2:	4601      	mov	r1, r0
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	f000 b863 	b.w	80075b0 <_malloc_r>
 80074ea:	bf00      	nop
 80074ec:	20000020 	.word	0x20000020

080074f0 <free>:
 80074f0:	4b02      	ldr	r3, [pc, #8]	; (80074fc <free+0xc>)
 80074f2:	4601      	mov	r1, r0
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f000 b80b 	b.w	8007510 <_free_r>
 80074fa:	bf00      	nop
 80074fc:	20000020 	.word	0x20000020

08007500 <memset>:
 8007500:	4402      	add	r2, r0
 8007502:	4603      	mov	r3, r0
 8007504:	4293      	cmp	r3, r2
 8007506:	d100      	bne.n	800750a <memset+0xa>
 8007508:	4770      	bx	lr
 800750a:	f803 1b01 	strb.w	r1, [r3], #1
 800750e:	e7f9      	b.n	8007504 <memset+0x4>

08007510 <_free_r>:
 8007510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007512:	2900      	cmp	r1, #0
 8007514:	d048      	beq.n	80075a8 <_free_r+0x98>
 8007516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800751a:	9001      	str	r0, [sp, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	f1a1 0404 	sub.w	r4, r1, #4
 8007522:	bfb8      	it	lt
 8007524:	18e4      	addlt	r4, r4, r3
 8007526:	f000 fc2b 	bl	8007d80 <__malloc_lock>
 800752a:	4a20      	ldr	r2, [pc, #128]	; (80075ac <_free_r+0x9c>)
 800752c:	9801      	ldr	r0, [sp, #4]
 800752e:	6813      	ldr	r3, [r2, #0]
 8007530:	4615      	mov	r5, r2
 8007532:	b933      	cbnz	r3, 8007542 <_free_r+0x32>
 8007534:	6063      	str	r3, [r4, #4]
 8007536:	6014      	str	r4, [r2, #0]
 8007538:	b003      	add	sp, #12
 800753a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800753e:	f000 bc25 	b.w	8007d8c <__malloc_unlock>
 8007542:	42a3      	cmp	r3, r4
 8007544:	d90b      	bls.n	800755e <_free_r+0x4e>
 8007546:	6821      	ldr	r1, [r4, #0]
 8007548:	1862      	adds	r2, r4, r1
 800754a:	4293      	cmp	r3, r2
 800754c:	bf04      	itt	eq
 800754e:	681a      	ldreq	r2, [r3, #0]
 8007550:	685b      	ldreq	r3, [r3, #4]
 8007552:	6063      	str	r3, [r4, #4]
 8007554:	bf04      	itt	eq
 8007556:	1852      	addeq	r2, r2, r1
 8007558:	6022      	streq	r2, [r4, #0]
 800755a:	602c      	str	r4, [r5, #0]
 800755c:	e7ec      	b.n	8007538 <_free_r+0x28>
 800755e:	461a      	mov	r2, r3
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	b10b      	cbz	r3, 8007568 <_free_r+0x58>
 8007564:	42a3      	cmp	r3, r4
 8007566:	d9fa      	bls.n	800755e <_free_r+0x4e>
 8007568:	6811      	ldr	r1, [r2, #0]
 800756a:	1855      	adds	r5, r2, r1
 800756c:	42a5      	cmp	r5, r4
 800756e:	d10b      	bne.n	8007588 <_free_r+0x78>
 8007570:	6824      	ldr	r4, [r4, #0]
 8007572:	4421      	add	r1, r4
 8007574:	1854      	adds	r4, r2, r1
 8007576:	42a3      	cmp	r3, r4
 8007578:	6011      	str	r1, [r2, #0]
 800757a:	d1dd      	bne.n	8007538 <_free_r+0x28>
 800757c:	681c      	ldr	r4, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	6053      	str	r3, [r2, #4]
 8007582:	4421      	add	r1, r4
 8007584:	6011      	str	r1, [r2, #0]
 8007586:	e7d7      	b.n	8007538 <_free_r+0x28>
 8007588:	d902      	bls.n	8007590 <_free_r+0x80>
 800758a:	230c      	movs	r3, #12
 800758c:	6003      	str	r3, [r0, #0]
 800758e:	e7d3      	b.n	8007538 <_free_r+0x28>
 8007590:	6825      	ldr	r5, [r4, #0]
 8007592:	1961      	adds	r1, r4, r5
 8007594:	428b      	cmp	r3, r1
 8007596:	bf04      	itt	eq
 8007598:	6819      	ldreq	r1, [r3, #0]
 800759a:	685b      	ldreq	r3, [r3, #4]
 800759c:	6063      	str	r3, [r4, #4]
 800759e:	bf04      	itt	eq
 80075a0:	1949      	addeq	r1, r1, r5
 80075a2:	6021      	streq	r1, [r4, #0]
 80075a4:	6054      	str	r4, [r2, #4]
 80075a6:	e7c7      	b.n	8007538 <_free_r+0x28>
 80075a8:	b003      	add	sp, #12
 80075aa:	bd30      	pop	{r4, r5, pc}
 80075ac:	20001334 	.word	0x20001334

080075b0 <_malloc_r>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	1ccd      	adds	r5, r1, #3
 80075b4:	f025 0503 	bic.w	r5, r5, #3
 80075b8:	3508      	adds	r5, #8
 80075ba:	2d0c      	cmp	r5, #12
 80075bc:	bf38      	it	cc
 80075be:	250c      	movcc	r5, #12
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	4606      	mov	r6, r0
 80075c4:	db01      	blt.n	80075ca <_malloc_r+0x1a>
 80075c6:	42a9      	cmp	r1, r5
 80075c8:	d903      	bls.n	80075d2 <_malloc_r+0x22>
 80075ca:	230c      	movs	r3, #12
 80075cc:	6033      	str	r3, [r6, #0]
 80075ce:	2000      	movs	r0, #0
 80075d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d2:	f000 fbd5 	bl	8007d80 <__malloc_lock>
 80075d6:	4921      	ldr	r1, [pc, #132]	; (800765c <_malloc_r+0xac>)
 80075d8:	680a      	ldr	r2, [r1, #0]
 80075da:	4614      	mov	r4, r2
 80075dc:	b99c      	cbnz	r4, 8007606 <_malloc_r+0x56>
 80075de:	4f20      	ldr	r7, [pc, #128]	; (8007660 <_malloc_r+0xb0>)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	b923      	cbnz	r3, 80075ee <_malloc_r+0x3e>
 80075e4:	4621      	mov	r1, r4
 80075e6:	4630      	mov	r0, r6
 80075e8:	f000 f8ca 	bl	8007780 <_sbrk_r>
 80075ec:	6038      	str	r0, [r7, #0]
 80075ee:	4629      	mov	r1, r5
 80075f0:	4630      	mov	r0, r6
 80075f2:	f000 f8c5 	bl	8007780 <_sbrk_r>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	d123      	bne.n	8007642 <_malloc_r+0x92>
 80075fa:	230c      	movs	r3, #12
 80075fc:	6033      	str	r3, [r6, #0]
 80075fe:	4630      	mov	r0, r6
 8007600:	f000 fbc4 	bl	8007d8c <__malloc_unlock>
 8007604:	e7e3      	b.n	80075ce <_malloc_r+0x1e>
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	1b5b      	subs	r3, r3, r5
 800760a:	d417      	bmi.n	800763c <_malloc_r+0x8c>
 800760c:	2b0b      	cmp	r3, #11
 800760e:	d903      	bls.n	8007618 <_malloc_r+0x68>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	441c      	add	r4, r3
 8007614:	6025      	str	r5, [r4, #0]
 8007616:	e004      	b.n	8007622 <_malloc_r+0x72>
 8007618:	6863      	ldr	r3, [r4, #4]
 800761a:	42a2      	cmp	r2, r4
 800761c:	bf0c      	ite	eq
 800761e:	600b      	streq	r3, [r1, #0]
 8007620:	6053      	strne	r3, [r2, #4]
 8007622:	4630      	mov	r0, r6
 8007624:	f000 fbb2 	bl	8007d8c <__malloc_unlock>
 8007628:	f104 000b 	add.w	r0, r4, #11
 800762c:	1d23      	adds	r3, r4, #4
 800762e:	f020 0007 	bic.w	r0, r0, #7
 8007632:	1ac2      	subs	r2, r0, r3
 8007634:	d0cc      	beq.n	80075d0 <_malloc_r+0x20>
 8007636:	1a1b      	subs	r3, r3, r0
 8007638:	50a3      	str	r3, [r4, r2]
 800763a:	e7c9      	b.n	80075d0 <_malloc_r+0x20>
 800763c:	4622      	mov	r2, r4
 800763e:	6864      	ldr	r4, [r4, #4]
 8007640:	e7cc      	b.n	80075dc <_malloc_r+0x2c>
 8007642:	1cc4      	adds	r4, r0, #3
 8007644:	f024 0403 	bic.w	r4, r4, #3
 8007648:	42a0      	cmp	r0, r4
 800764a:	d0e3      	beq.n	8007614 <_malloc_r+0x64>
 800764c:	1a21      	subs	r1, r4, r0
 800764e:	4630      	mov	r0, r6
 8007650:	f000 f896 	bl	8007780 <_sbrk_r>
 8007654:	3001      	adds	r0, #1
 8007656:	d1dd      	bne.n	8007614 <_malloc_r+0x64>
 8007658:	e7cf      	b.n	80075fa <_malloc_r+0x4a>
 800765a:	bf00      	nop
 800765c:	20001334 	.word	0x20001334
 8007660:	20001338 	.word	0x20001338

08007664 <iprintf>:
 8007664:	b40f      	push	{r0, r1, r2, r3}
 8007666:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <iprintf+0x2c>)
 8007668:	b513      	push	{r0, r1, r4, lr}
 800766a:	681c      	ldr	r4, [r3, #0]
 800766c:	b124      	cbz	r4, 8007678 <iprintf+0x14>
 800766e:	69a3      	ldr	r3, [r4, #24]
 8007670:	b913      	cbnz	r3, 8007678 <iprintf+0x14>
 8007672:	4620      	mov	r0, r4
 8007674:	f000 fa80 	bl	8007b78 <__sinit>
 8007678:	ab05      	add	r3, sp, #20
 800767a:	9a04      	ldr	r2, [sp, #16]
 800767c:	68a1      	ldr	r1, [r4, #8]
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	4620      	mov	r0, r4
 8007682:	f000 fbb3 	bl	8007dec <_vfiprintf_r>
 8007686:	b002      	add	sp, #8
 8007688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768c:	b004      	add	sp, #16
 800768e:	4770      	bx	lr
 8007690:	20000020 	.word	0x20000020

08007694 <_puts_r>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	460e      	mov	r6, r1
 8007698:	4605      	mov	r5, r0
 800769a:	b118      	cbz	r0, 80076a4 <_puts_r+0x10>
 800769c:	6983      	ldr	r3, [r0, #24]
 800769e:	b90b      	cbnz	r3, 80076a4 <_puts_r+0x10>
 80076a0:	f000 fa6a 	bl	8007b78 <__sinit>
 80076a4:	69ab      	ldr	r3, [r5, #24]
 80076a6:	68ac      	ldr	r4, [r5, #8]
 80076a8:	b913      	cbnz	r3, 80076b0 <_puts_r+0x1c>
 80076aa:	4628      	mov	r0, r5
 80076ac:	f000 fa64 	bl	8007b78 <__sinit>
 80076b0:	4b2c      	ldr	r3, [pc, #176]	; (8007764 <_puts_r+0xd0>)
 80076b2:	429c      	cmp	r4, r3
 80076b4:	d120      	bne.n	80076f8 <_puts_r+0x64>
 80076b6:	686c      	ldr	r4, [r5, #4]
 80076b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076ba:	07db      	lsls	r3, r3, #31
 80076bc:	d405      	bmi.n	80076ca <_puts_r+0x36>
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	0598      	lsls	r0, r3, #22
 80076c2:	d402      	bmi.n	80076ca <_puts_r+0x36>
 80076c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076c6:	f000 faf5 	bl	8007cb4 <__retarget_lock_acquire_recursive>
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	0719      	lsls	r1, r3, #28
 80076ce:	d51d      	bpl.n	800770c <_puts_r+0x78>
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	b1db      	cbz	r3, 800770c <_puts_r+0x78>
 80076d4:	3e01      	subs	r6, #1
 80076d6:	68a3      	ldr	r3, [r4, #8]
 80076d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076dc:	3b01      	subs	r3, #1
 80076de:	60a3      	str	r3, [r4, #8]
 80076e0:	bb39      	cbnz	r1, 8007732 <_puts_r+0x9e>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	da38      	bge.n	8007758 <_puts_r+0xc4>
 80076e6:	4622      	mov	r2, r4
 80076e8:	210a      	movs	r1, #10
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 f86a 	bl	80077c4 <__swbuf_r>
 80076f0:	3001      	adds	r0, #1
 80076f2:	d011      	beq.n	8007718 <_puts_r+0x84>
 80076f4:	250a      	movs	r5, #10
 80076f6:	e011      	b.n	800771c <_puts_r+0x88>
 80076f8:	4b1b      	ldr	r3, [pc, #108]	; (8007768 <_puts_r+0xd4>)
 80076fa:	429c      	cmp	r4, r3
 80076fc:	d101      	bne.n	8007702 <_puts_r+0x6e>
 80076fe:	68ac      	ldr	r4, [r5, #8]
 8007700:	e7da      	b.n	80076b8 <_puts_r+0x24>
 8007702:	4b1a      	ldr	r3, [pc, #104]	; (800776c <_puts_r+0xd8>)
 8007704:	429c      	cmp	r4, r3
 8007706:	bf08      	it	eq
 8007708:	68ec      	ldreq	r4, [r5, #12]
 800770a:	e7d5      	b.n	80076b8 <_puts_r+0x24>
 800770c:	4621      	mov	r1, r4
 800770e:	4628      	mov	r0, r5
 8007710:	f000 f8aa 	bl	8007868 <__swsetup_r>
 8007714:	2800      	cmp	r0, #0
 8007716:	d0dd      	beq.n	80076d4 <_puts_r+0x40>
 8007718:	f04f 35ff 	mov.w	r5, #4294967295
 800771c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800771e:	07da      	lsls	r2, r3, #31
 8007720:	d405      	bmi.n	800772e <_puts_r+0x9a>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	059b      	lsls	r3, r3, #22
 8007726:	d402      	bmi.n	800772e <_puts_r+0x9a>
 8007728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800772a:	f000 fac4 	bl	8007cb6 <__retarget_lock_release_recursive>
 800772e:	4628      	mov	r0, r5
 8007730:	bd70      	pop	{r4, r5, r6, pc}
 8007732:	2b00      	cmp	r3, #0
 8007734:	da04      	bge.n	8007740 <_puts_r+0xac>
 8007736:	69a2      	ldr	r2, [r4, #24]
 8007738:	429a      	cmp	r2, r3
 800773a:	dc06      	bgt.n	800774a <_puts_r+0xb6>
 800773c:	290a      	cmp	r1, #10
 800773e:	d004      	beq.n	800774a <_puts_r+0xb6>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	6022      	str	r2, [r4, #0]
 8007746:	7019      	strb	r1, [r3, #0]
 8007748:	e7c5      	b.n	80076d6 <_puts_r+0x42>
 800774a:	4622      	mov	r2, r4
 800774c:	4628      	mov	r0, r5
 800774e:	f000 f839 	bl	80077c4 <__swbuf_r>
 8007752:	3001      	adds	r0, #1
 8007754:	d1bf      	bne.n	80076d6 <_puts_r+0x42>
 8007756:	e7df      	b.n	8007718 <_puts_r+0x84>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	250a      	movs	r5, #10
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	6022      	str	r2, [r4, #0]
 8007760:	701d      	strb	r5, [r3, #0]
 8007762:	e7db      	b.n	800771c <_puts_r+0x88>
 8007764:	08008cf0 	.word	0x08008cf0
 8007768:	08008d10 	.word	0x08008d10
 800776c:	08008cd0 	.word	0x08008cd0

08007770 <puts>:
 8007770:	4b02      	ldr	r3, [pc, #8]	; (800777c <puts+0xc>)
 8007772:	4601      	mov	r1, r0
 8007774:	6818      	ldr	r0, [r3, #0]
 8007776:	f7ff bf8d 	b.w	8007694 <_puts_r>
 800777a:	bf00      	nop
 800777c:	20000020 	.word	0x20000020

08007780 <_sbrk_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d06      	ldr	r5, [pc, #24]	; (800779c <_sbrk_r+0x1c>)
 8007784:	2300      	movs	r3, #0
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	602b      	str	r3, [r5, #0]
 800778c:	f7f9 ff30 	bl	80015f0 <_sbrk>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_sbrk_r+0x1a>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_sbrk_r+0x1a>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	20001684 	.word	0x20001684

080077a0 <strncmp>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	b16a      	cbz	r2, 80077c0 <strncmp+0x20>
 80077a4:	3901      	subs	r1, #1
 80077a6:	1884      	adds	r4, r0, r2
 80077a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80077ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d103      	bne.n	80077bc <strncmp+0x1c>
 80077b4:	42a0      	cmp	r0, r4
 80077b6:	d001      	beq.n	80077bc <strncmp+0x1c>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1f5      	bne.n	80077a8 <strncmp+0x8>
 80077bc:	1a98      	subs	r0, r3, r2
 80077be:	bd10      	pop	{r4, pc}
 80077c0:	4610      	mov	r0, r2
 80077c2:	e7fc      	b.n	80077be <strncmp+0x1e>

080077c4 <__swbuf_r>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	460e      	mov	r6, r1
 80077c8:	4614      	mov	r4, r2
 80077ca:	4605      	mov	r5, r0
 80077cc:	b118      	cbz	r0, 80077d6 <__swbuf_r+0x12>
 80077ce:	6983      	ldr	r3, [r0, #24]
 80077d0:	b90b      	cbnz	r3, 80077d6 <__swbuf_r+0x12>
 80077d2:	f000 f9d1 	bl	8007b78 <__sinit>
 80077d6:	4b21      	ldr	r3, [pc, #132]	; (800785c <__swbuf_r+0x98>)
 80077d8:	429c      	cmp	r4, r3
 80077da:	d12b      	bne.n	8007834 <__swbuf_r+0x70>
 80077dc:	686c      	ldr	r4, [r5, #4]
 80077de:	69a3      	ldr	r3, [r4, #24]
 80077e0:	60a3      	str	r3, [r4, #8]
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	071a      	lsls	r2, r3, #28
 80077e6:	d52f      	bpl.n	8007848 <__swbuf_r+0x84>
 80077e8:	6923      	ldr	r3, [r4, #16]
 80077ea:	b36b      	cbz	r3, 8007848 <__swbuf_r+0x84>
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	6820      	ldr	r0, [r4, #0]
 80077f0:	1ac0      	subs	r0, r0, r3
 80077f2:	6963      	ldr	r3, [r4, #20]
 80077f4:	b2f6      	uxtb	r6, r6
 80077f6:	4283      	cmp	r3, r0
 80077f8:	4637      	mov	r7, r6
 80077fa:	dc04      	bgt.n	8007806 <__swbuf_r+0x42>
 80077fc:	4621      	mov	r1, r4
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 f926 	bl	8007a50 <_fflush_r>
 8007804:	bb30      	cbnz	r0, 8007854 <__swbuf_r+0x90>
 8007806:	68a3      	ldr	r3, [r4, #8]
 8007808:	3b01      	subs	r3, #1
 800780a:	60a3      	str	r3, [r4, #8]
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	6022      	str	r2, [r4, #0]
 8007812:	701e      	strb	r6, [r3, #0]
 8007814:	6963      	ldr	r3, [r4, #20]
 8007816:	3001      	adds	r0, #1
 8007818:	4283      	cmp	r3, r0
 800781a:	d004      	beq.n	8007826 <__swbuf_r+0x62>
 800781c:	89a3      	ldrh	r3, [r4, #12]
 800781e:	07db      	lsls	r3, r3, #31
 8007820:	d506      	bpl.n	8007830 <__swbuf_r+0x6c>
 8007822:	2e0a      	cmp	r6, #10
 8007824:	d104      	bne.n	8007830 <__swbuf_r+0x6c>
 8007826:	4621      	mov	r1, r4
 8007828:	4628      	mov	r0, r5
 800782a:	f000 f911 	bl	8007a50 <_fflush_r>
 800782e:	b988      	cbnz	r0, 8007854 <__swbuf_r+0x90>
 8007830:	4638      	mov	r0, r7
 8007832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007834:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <__swbuf_r+0x9c>)
 8007836:	429c      	cmp	r4, r3
 8007838:	d101      	bne.n	800783e <__swbuf_r+0x7a>
 800783a:	68ac      	ldr	r4, [r5, #8]
 800783c:	e7cf      	b.n	80077de <__swbuf_r+0x1a>
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <__swbuf_r+0xa0>)
 8007840:	429c      	cmp	r4, r3
 8007842:	bf08      	it	eq
 8007844:	68ec      	ldreq	r4, [r5, #12]
 8007846:	e7ca      	b.n	80077de <__swbuf_r+0x1a>
 8007848:	4621      	mov	r1, r4
 800784a:	4628      	mov	r0, r5
 800784c:	f000 f80c 	bl	8007868 <__swsetup_r>
 8007850:	2800      	cmp	r0, #0
 8007852:	d0cb      	beq.n	80077ec <__swbuf_r+0x28>
 8007854:	f04f 37ff 	mov.w	r7, #4294967295
 8007858:	e7ea      	b.n	8007830 <__swbuf_r+0x6c>
 800785a:	bf00      	nop
 800785c:	08008cf0 	.word	0x08008cf0
 8007860:	08008d10 	.word	0x08008d10
 8007864:	08008cd0 	.word	0x08008cd0

08007868 <__swsetup_r>:
 8007868:	4b32      	ldr	r3, [pc, #200]	; (8007934 <__swsetup_r+0xcc>)
 800786a:	b570      	push	{r4, r5, r6, lr}
 800786c:	681d      	ldr	r5, [r3, #0]
 800786e:	4606      	mov	r6, r0
 8007870:	460c      	mov	r4, r1
 8007872:	b125      	cbz	r5, 800787e <__swsetup_r+0x16>
 8007874:	69ab      	ldr	r3, [r5, #24]
 8007876:	b913      	cbnz	r3, 800787e <__swsetup_r+0x16>
 8007878:	4628      	mov	r0, r5
 800787a:	f000 f97d 	bl	8007b78 <__sinit>
 800787e:	4b2e      	ldr	r3, [pc, #184]	; (8007938 <__swsetup_r+0xd0>)
 8007880:	429c      	cmp	r4, r3
 8007882:	d10f      	bne.n	80078a4 <__swsetup_r+0x3c>
 8007884:	686c      	ldr	r4, [r5, #4]
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800788c:	0719      	lsls	r1, r3, #28
 800788e:	d42c      	bmi.n	80078ea <__swsetup_r+0x82>
 8007890:	06dd      	lsls	r5, r3, #27
 8007892:	d411      	bmi.n	80078b8 <__swsetup_r+0x50>
 8007894:	2309      	movs	r3, #9
 8007896:	6033      	str	r3, [r6, #0]
 8007898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	f04f 30ff 	mov.w	r0, #4294967295
 80078a2:	e03e      	b.n	8007922 <__swsetup_r+0xba>
 80078a4:	4b25      	ldr	r3, [pc, #148]	; (800793c <__swsetup_r+0xd4>)
 80078a6:	429c      	cmp	r4, r3
 80078a8:	d101      	bne.n	80078ae <__swsetup_r+0x46>
 80078aa:	68ac      	ldr	r4, [r5, #8]
 80078ac:	e7eb      	b.n	8007886 <__swsetup_r+0x1e>
 80078ae:	4b24      	ldr	r3, [pc, #144]	; (8007940 <__swsetup_r+0xd8>)
 80078b0:	429c      	cmp	r4, r3
 80078b2:	bf08      	it	eq
 80078b4:	68ec      	ldreq	r4, [r5, #12]
 80078b6:	e7e6      	b.n	8007886 <__swsetup_r+0x1e>
 80078b8:	0758      	lsls	r0, r3, #29
 80078ba:	d512      	bpl.n	80078e2 <__swsetup_r+0x7a>
 80078bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078be:	b141      	cbz	r1, 80078d2 <__swsetup_r+0x6a>
 80078c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078c4:	4299      	cmp	r1, r3
 80078c6:	d002      	beq.n	80078ce <__swsetup_r+0x66>
 80078c8:	4630      	mov	r0, r6
 80078ca:	f7ff fe21 	bl	8007510 <_free_r>
 80078ce:	2300      	movs	r3, #0
 80078d0:	6363      	str	r3, [r4, #52]	; 0x34
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	2300      	movs	r3, #0
 80078dc:	6063      	str	r3, [r4, #4]
 80078de:	6923      	ldr	r3, [r4, #16]
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	f043 0308 	orr.w	r3, r3, #8
 80078e8:	81a3      	strh	r3, [r4, #12]
 80078ea:	6923      	ldr	r3, [r4, #16]
 80078ec:	b94b      	cbnz	r3, 8007902 <__swsetup_r+0x9a>
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f8:	d003      	beq.n	8007902 <__swsetup_r+0x9a>
 80078fa:	4621      	mov	r1, r4
 80078fc:	4630      	mov	r0, r6
 80078fe:	f000 f9ff 	bl	8007d00 <__smakebuf_r>
 8007902:	89a0      	ldrh	r0, [r4, #12]
 8007904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007908:	f010 0301 	ands.w	r3, r0, #1
 800790c:	d00a      	beq.n	8007924 <__swsetup_r+0xbc>
 800790e:	2300      	movs	r3, #0
 8007910:	60a3      	str	r3, [r4, #8]
 8007912:	6963      	ldr	r3, [r4, #20]
 8007914:	425b      	negs	r3, r3
 8007916:	61a3      	str	r3, [r4, #24]
 8007918:	6923      	ldr	r3, [r4, #16]
 800791a:	b943      	cbnz	r3, 800792e <__swsetup_r+0xc6>
 800791c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007920:	d1ba      	bne.n	8007898 <__swsetup_r+0x30>
 8007922:	bd70      	pop	{r4, r5, r6, pc}
 8007924:	0781      	lsls	r1, r0, #30
 8007926:	bf58      	it	pl
 8007928:	6963      	ldrpl	r3, [r4, #20]
 800792a:	60a3      	str	r3, [r4, #8]
 800792c:	e7f4      	b.n	8007918 <__swsetup_r+0xb0>
 800792e:	2000      	movs	r0, #0
 8007930:	e7f7      	b.n	8007922 <__swsetup_r+0xba>
 8007932:	bf00      	nop
 8007934:	20000020 	.word	0x20000020
 8007938:	08008cf0 	.word	0x08008cf0
 800793c:	08008d10 	.word	0x08008d10
 8007940:	08008cd0 	.word	0x08008cd0

08007944 <__sflush_r>:
 8007944:	898a      	ldrh	r2, [r1, #12]
 8007946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794a:	4605      	mov	r5, r0
 800794c:	0710      	lsls	r0, r2, #28
 800794e:	460c      	mov	r4, r1
 8007950:	d458      	bmi.n	8007a04 <__sflush_r+0xc0>
 8007952:	684b      	ldr	r3, [r1, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	dc05      	bgt.n	8007964 <__sflush_r+0x20>
 8007958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	dc02      	bgt.n	8007964 <__sflush_r+0x20>
 800795e:	2000      	movs	r0, #0
 8007960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007966:	2e00      	cmp	r6, #0
 8007968:	d0f9      	beq.n	800795e <__sflush_r+0x1a>
 800796a:	2300      	movs	r3, #0
 800796c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007970:	682f      	ldr	r7, [r5, #0]
 8007972:	602b      	str	r3, [r5, #0]
 8007974:	d032      	beq.n	80079dc <__sflush_r+0x98>
 8007976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	075a      	lsls	r2, r3, #29
 800797c:	d505      	bpl.n	800798a <__sflush_r+0x46>
 800797e:	6863      	ldr	r3, [r4, #4]
 8007980:	1ac0      	subs	r0, r0, r3
 8007982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007984:	b10b      	cbz	r3, 800798a <__sflush_r+0x46>
 8007986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007988:	1ac0      	subs	r0, r0, r3
 800798a:	2300      	movs	r3, #0
 800798c:	4602      	mov	r2, r0
 800798e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007990:	6a21      	ldr	r1, [r4, #32]
 8007992:	4628      	mov	r0, r5
 8007994:	47b0      	blx	r6
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	d106      	bne.n	80079aa <__sflush_r+0x66>
 800799c:	6829      	ldr	r1, [r5, #0]
 800799e:	291d      	cmp	r1, #29
 80079a0:	d82c      	bhi.n	80079fc <__sflush_r+0xb8>
 80079a2:	4a2a      	ldr	r2, [pc, #168]	; (8007a4c <__sflush_r+0x108>)
 80079a4:	40ca      	lsrs	r2, r1
 80079a6:	07d6      	lsls	r6, r2, #31
 80079a8:	d528      	bpl.n	80079fc <__sflush_r+0xb8>
 80079aa:	2200      	movs	r2, #0
 80079ac:	6062      	str	r2, [r4, #4]
 80079ae:	04d9      	lsls	r1, r3, #19
 80079b0:	6922      	ldr	r2, [r4, #16]
 80079b2:	6022      	str	r2, [r4, #0]
 80079b4:	d504      	bpl.n	80079c0 <__sflush_r+0x7c>
 80079b6:	1c42      	adds	r2, r0, #1
 80079b8:	d101      	bne.n	80079be <__sflush_r+0x7a>
 80079ba:	682b      	ldr	r3, [r5, #0]
 80079bc:	b903      	cbnz	r3, 80079c0 <__sflush_r+0x7c>
 80079be:	6560      	str	r0, [r4, #84]	; 0x54
 80079c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079c2:	602f      	str	r7, [r5, #0]
 80079c4:	2900      	cmp	r1, #0
 80079c6:	d0ca      	beq.n	800795e <__sflush_r+0x1a>
 80079c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079cc:	4299      	cmp	r1, r3
 80079ce:	d002      	beq.n	80079d6 <__sflush_r+0x92>
 80079d0:	4628      	mov	r0, r5
 80079d2:	f7ff fd9d 	bl	8007510 <_free_r>
 80079d6:	2000      	movs	r0, #0
 80079d8:	6360      	str	r0, [r4, #52]	; 0x34
 80079da:	e7c1      	b.n	8007960 <__sflush_r+0x1c>
 80079dc:	6a21      	ldr	r1, [r4, #32]
 80079de:	2301      	movs	r3, #1
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b0      	blx	r6
 80079e4:	1c41      	adds	r1, r0, #1
 80079e6:	d1c7      	bne.n	8007978 <__sflush_r+0x34>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0c4      	beq.n	8007978 <__sflush_r+0x34>
 80079ee:	2b1d      	cmp	r3, #29
 80079f0:	d001      	beq.n	80079f6 <__sflush_r+0xb2>
 80079f2:	2b16      	cmp	r3, #22
 80079f4:	d101      	bne.n	80079fa <__sflush_r+0xb6>
 80079f6:	602f      	str	r7, [r5, #0]
 80079f8:	e7b1      	b.n	800795e <__sflush_r+0x1a>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	e7ad      	b.n	8007960 <__sflush_r+0x1c>
 8007a04:	690f      	ldr	r7, [r1, #16]
 8007a06:	2f00      	cmp	r7, #0
 8007a08:	d0a9      	beq.n	800795e <__sflush_r+0x1a>
 8007a0a:	0793      	lsls	r3, r2, #30
 8007a0c:	680e      	ldr	r6, [r1, #0]
 8007a0e:	bf08      	it	eq
 8007a10:	694b      	ldreq	r3, [r1, #20]
 8007a12:	600f      	str	r7, [r1, #0]
 8007a14:	bf18      	it	ne
 8007a16:	2300      	movne	r3, #0
 8007a18:	eba6 0807 	sub.w	r8, r6, r7
 8007a1c:	608b      	str	r3, [r1, #8]
 8007a1e:	f1b8 0f00 	cmp.w	r8, #0
 8007a22:	dd9c      	ble.n	800795e <__sflush_r+0x1a>
 8007a24:	6a21      	ldr	r1, [r4, #32]
 8007a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a28:	4643      	mov	r3, r8
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b0      	blx	r6
 8007a30:	2800      	cmp	r0, #0
 8007a32:	dc06      	bgt.n	8007a42 <__sflush_r+0xfe>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e78e      	b.n	8007960 <__sflush_r+0x1c>
 8007a42:	4407      	add	r7, r0
 8007a44:	eba8 0800 	sub.w	r8, r8, r0
 8007a48:	e7e9      	b.n	8007a1e <__sflush_r+0xda>
 8007a4a:	bf00      	nop
 8007a4c:	20400001 	.word	0x20400001

08007a50 <_fflush_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	690b      	ldr	r3, [r1, #16]
 8007a54:	4605      	mov	r5, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	b913      	cbnz	r3, 8007a60 <_fflush_r+0x10>
 8007a5a:	2500      	movs	r5, #0
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	b118      	cbz	r0, 8007a6a <_fflush_r+0x1a>
 8007a62:	6983      	ldr	r3, [r0, #24]
 8007a64:	b90b      	cbnz	r3, 8007a6a <_fflush_r+0x1a>
 8007a66:	f000 f887 	bl	8007b78 <__sinit>
 8007a6a:	4b14      	ldr	r3, [pc, #80]	; (8007abc <_fflush_r+0x6c>)
 8007a6c:	429c      	cmp	r4, r3
 8007a6e:	d11b      	bne.n	8007aa8 <_fflush_r+0x58>
 8007a70:	686c      	ldr	r4, [r5, #4]
 8007a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0ef      	beq.n	8007a5a <_fflush_r+0xa>
 8007a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a7c:	07d0      	lsls	r0, r2, #31
 8007a7e:	d404      	bmi.n	8007a8a <_fflush_r+0x3a>
 8007a80:	0599      	lsls	r1, r3, #22
 8007a82:	d402      	bmi.n	8007a8a <_fflush_r+0x3a>
 8007a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a86:	f000 f915 	bl	8007cb4 <__retarget_lock_acquire_recursive>
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	f7ff ff59 	bl	8007944 <__sflush_r>
 8007a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a94:	07da      	lsls	r2, r3, #31
 8007a96:	4605      	mov	r5, r0
 8007a98:	d4e0      	bmi.n	8007a5c <_fflush_r+0xc>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	059b      	lsls	r3, r3, #22
 8007a9e:	d4dd      	bmi.n	8007a5c <_fflush_r+0xc>
 8007aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aa2:	f000 f908 	bl	8007cb6 <__retarget_lock_release_recursive>
 8007aa6:	e7d9      	b.n	8007a5c <_fflush_r+0xc>
 8007aa8:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <_fflush_r+0x70>)
 8007aaa:	429c      	cmp	r4, r3
 8007aac:	d101      	bne.n	8007ab2 <_fflush_r+0x62>
 8007aae:	68ac      	ldr	r4, [r5, #8]
 8007ab0:	e7df      	b.n	8007a72 <_fflush_r+0x22>
 8007ab2:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <_fflush_r+0x74>)
 8007ab4:	429c      	cmp	r4, r3
 8007ab6:	bf08      	it	eq
 8007ab8:	68ec      	ldreq	r4, [r5, #12]
 8007aba:	e7da      	b.n	8007a72 <_fflush_r+0x22>
 8007abc:	08008cf0 	.word	0x08008cf0
 8007ac0:	08008d10 	.word	0x08008d10
 8007ac4:	08008cd0 	.word	0x08008cd0

08007ac8 <std>:
 8007ac8:	2300      	movs	r3, #0
 8007aca:	b510      	push	{r4, lr}
 8007acc:	4604      	mov	r4, r0
 8007ace:	e9c0 3300 	strd	r3, r3, [r0]
 8007ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ad6:	6083      	str	r3, [r0, #8]
 8007ad8:	8181      	strh	r1, [r0, #12]
 8007ada:	6643      	str	r3, [r0, #100]	; 0x64
 8007adc:	81c2      	strh	r2, [r0, #14]
 8007ade:	6183      	str	r3, [r0, #24]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	2208      	movs	r2, #8
 8007ae4:	305c      	adds	r0, #92	; 0x5c
 8007ae6:	f7ff fd0b 	bl	8007500 <memset>
 8007aea:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <std+0x38>)
 8007aec:	6263      	str	r3, [r4, #36]	; 0x24
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <std+0x3c>)
 8007af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007af2:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <std+0x40>)
 8007af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007af6:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <std+0x44>)
 8007af8:	6224      	str	r4, [r4, #32]
 8007afa:	6323      	str	r3, [r4, #48]	; 0x30
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	bf00      	nop
 8007b00:	08008375 	.word	0x08008375
 8007b04:	08008397 	.word	0x08008397
 8007b08:	080083cf 	.word	0x080083cf
 8007b0c:	080083f3 	.word	0x080083f3

08007b10 <_cleanup_r>:
 8007b10:	4901      	ldr	r1, [pc, #4]	; (8007b18 <_cleanup_r+0x8>)
 8007b12:	f000 b8af 	b.w	8007c74 <_fwalk_reent>
 8007b16:	bf00      	nop
 8007b18:	08007a51 	.word	0x08007a51

08007b1c <__sfmoreglue>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	1e4a      	subs	r2, r1, #1
 8007b20:	2568      	movs	r5, #104	; 0x68
 8007b22:	4355      	muls	r5, r2
 8007b24:	460e      	mov	r6, r1
 8007b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b2a:	f7ff fd41 	bl	80075b0 <_malloc_r>
 8007b2e:	4604      	mov	r4, r0
 8007b30:	b140      	cbz	r0, 8007b44 <__sfmoreglue+0x28>
 8007b32:	2100      	movs	r1, #0
 8007b34:	e9c0 1600 	strd	r1, r6, [r0]
 8007b38:	300c      	adds	r0, #12
 8007b3a:	60a0      	str	r0, [r4, #8]
 8007b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b40:	f7ff fcde 	bl	8007500 <memset>
 8007b44:	4620      	mov	r0, r4
 8007b46:	bd70      	pop	{r4, r5, r6, pc}

08007b48 <__sfp_lock_acquire>:
 8007b48:	4801      	ldr	r0, [pc, #4]	; (8007b50 <__sfp_lock_acquire+0x8>)
 8007b4a:	f000 b8b3 	b.w	8007cb4 <__retarget_lock_acquire_recursive>
 8007b4e:	bf00      	nop
 8007b50:	20001680 	.word	0x20001680

08007b54 <__sfp_lock_release>:
 8007b54:	4801      	ldr	r0, [pc, #4]	; (8007b5c <__sfp_lock_release+0x8>)
 8007b56:	f000 b8ae 	b.w	8007cb6 <__retarget_lock_release_recursive>
 8007b5a:	bf00      	nop
 8007b5c:	20001680 	.word	0x20001680

08007b60 <__sinit_lock_acquire>:
 8007b60:	4801      	ldr	r0, [pc, #4]	; (8007b68 <__sinit_lock_acquire+0x8>)
 8007b62:	f000 b8a7 	b.w	8007cb4 <__retarget_lock_acquire_recursive>
 8007b66:	bf00      	nop
 8007b68:	2000167b 	.word	0x2000167b

08007b6c <__sinit_lock_release>:
 8007b6c:	4801      	ldr	r0, [pc, #4]	; (8007b74 <__sinit_lock_release+0x8>)
 8007b6e:	f000 b8a2 	b.w	8007cb6 <__retarget_lock_release_recursive>
 8007b72:	bf00      	nop
 8007b74:	2000167b 	.word	0x2000167b

08007b78 <__sinit>:
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	f7ff fff0 	bl	8007b60 <__sinit_lock_acquire>
 8007b80:	69a3      	ldr	r3, [r4, #24]
 8007b82:	b11b      	cbz	r3, 8007b8c <__sinit+0x14>
 8007b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b88:	f7ff bff0 	b.w	8007b6c <__sinit_lock_release>
 8007b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b90:	6523      	str	r3, [r4, #80]	; 0x50
 8007b92:	4b13      	ldr	r3, [pc, #76]	; (8007be0 <__sinit+0x68>)
 8007b94:	4a13      	ldr	r2, [pc, #76]	; (8007be4 <__sinit+0x6c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b9a:	42a3      	cmp	r3, r4
 8007b9c:	bf04      	itt	eq
 8007b9e:	2301      	moveq	r3, #1
 8007ba0:	61a3      	streq	r3, [r4, #24]
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 f820 	bl	8007be8 <__sfp>
 8007ba8:	6060      	str	r0, [r4, #4]
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 f81c 	bl	8007be8 <__sfp>
 8007bb0:	60a0      	str	r0, [r4, #8]
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f000 f818 	bl	8007be8 <__sfp>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	60e0      	str	r0, [r4, #12]
 8007bbc:	2104      	movs	r1, #4
 8007bbe:	6860      	ldr	r0, [r4, #4]
 8007bc0:	f7ff ff82 	bl	8007ac8 <std>
 8007bc4:	68a0      	ldr	r0, [r4, #8]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	2109      	movs	r1, #9
 8007bca:	f7ff ff7d 	bl	8007ac8 <std>
 8007bce:	68e0      	ldr	r0, [r4, #12]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	2112      	movs	r1, #18
 8007bd4:	f7ff ff78 	bl	8007ac8 <std>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	61a3      	str	r3, [r4, #24]
 8007bdc:	e7d2      	b.n	8007b84 <__sinit+0xc>
 8007bde:	bf00      	nop
 8007be0:	08008ccc 	.word	0x08008ccc
 8007be4:	08007b11 	.word	0x08007b11

08007be8 <__sfp>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	4607      	mov	r7, r0
 8007bec:	f7ff ffac 	bl	8007b48 <__sfp_lock_acquire>
 8007bf0:	4b1e      	ldr	r3, [pc, #120]	; (8007c6c <__sfp+0x84>)
 8007bf2:	681e      	ldr	r6, [r3, #0]
 8007bf4:	69b3      	ldr	r3, [r6, #24]
 8007bf6:	b913      	cbnz	r3, 8007bfe <__sfp+0x16>
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f7ff ffbd 	bl	8007b78 <__sinit>
 8007bfe:	3648      	adds	r6, #72	; 0x48
 8007c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	d503      	bpl.n	8007c10 <__sfp+0x28>
 8007c08:	6833      	ldr	r3, [r6, #0]
 8007c0a:	b30b      	cbz	r3, 8007c50 <__sfp+0x68>
 8007c0c:	6836      	ldr	r6, [r6, #0]
 8007c0e:	e7f7      	b.n	8007c00 <__sfp+0x18>
 8007c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c14:	b9d5      	cbnz	r5, 8007c4c <__sfp+0x64>
 8007c16:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <__sfp+0x88>)
 8007c18:	60e3      	str	r3, [r4, #12]
 8007c1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8007c20:	f000 f847 	bl	8007cb2 <__retarget_lock_init_recursive>
 8007c24:	f7ff ff96 	bl	8007b54 <__sfp_lock_release>
 8007c28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c30:	6025      	str	r5, [r4, #0]
 8007c32:	61a5      	str	r5, [r4, #24]
 8007c34:	2208      	movs	r2, #8
 8007c36:	4629      	mov	r1, r5
 8007c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c3c:	f7ff fc60 	bl	8007500 <memset>
 8007c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c48:	4620      	mov	r0, r4
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c4c:	3468      	adds	r4, #104	; 0x68
 8007c4e:	e7d9      	b.n	8007c04 <__sfp+0x1c>
 8007c50:	2104      	movs	r1, #4
 8007c52:	4638      	mov	r0, r7
 8007c54:	f7ff ff62 	bl	8007b1c <__sfmoreglue>
 8007c58:	4604      	mov	r4, r0
 8007c5a:	6030      	str	r0, [r6, #0]
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d1d5      	bne.n	8007c0c <__sfp+0x24>
 8007c60:	f7ff ff78 	bl	8007b54 <__sfp_lock_release>
 8007c64:	230c      	movs	r3, #12
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	e7ee      	b.n	8007c48 <__sfp+0x60>
 8007c6a:	bf00      	nop
 8007c6c:	08008ccc 	.word	0x08008ccc
 8007c70:	ffff0001 	.word	0xffff0001

08007c74 <_fwalk_reent>:
 8007c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c78:	4606      	mov	r6, r0
 8007c7a:	4688      	mov	r8, r1
 8007c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c80:	2700      	movs	r7, #0
 8007c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c86:	f1b9 0901 	subs.w	r9, r9, #1
 8007c8a:	d505      	bpl.n	8007c98 <_fwalk_reent+0x24>
 8007c8c:	6824      	ldr	r4, [r4, #0]
 8007c8e:	2c00      	cmp	r4, #0
 8007c90:	d1f7      	bne.n	8007c82 <_fwalk_reent+0xe>
 8007c92:	4638      	mov	r0, r7
 8007c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c98:	89ab      	ldrh	r3, [r5, #12]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d907      	bls.n	8007cae <_fwalk_reent+0x3a>
 8007c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	d003      	beq.n	8007cae <_fwalk_reent+0x3a>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4630      	mov	r0, r6
 8007caa:	47c0      	blx	r8
 8007cac:	4307      	orrs	r7, r0
 8007cae:	3568      	adds	r5, #104	; 0x68
 8007cb0:	e7e9      	b.n	8007c86 <_fwalk_reent+0x12>

08007cb2 <__retarget_lock_init_recursive>:
 8007cb2:	4770      	bx	lr

08007cb4 <__retarget_lock_acquire_recursive>:
 8007cb4:	4770      	bx	lr

08007cb6 <__retarget_lock_release_recursive>:
 8007cb6:	4770      	bx	lr

08007cb8 <__swhatbuf_r>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	460e      	mov	r6, r1
 8007cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	b096      	sub	sp, #88	; 0x58
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	461d      	mov	r5, r3
 8007cc8:	da07      	bge.n	8007cda <__swhatbuf_r+0x22>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	602b      	str	r3, [r5, #0]
 8007cce:	89b3      	ldrh	r3, [r6, #12]
 8007cd0:	061a      	lsls	r2, r3, #24
 8007cd2:	d410      	bmi.n	8007cf6 <__swhatbuf_r+0x3e>
 8007cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd8:	e00e      	b.n	8007cf8 <__swhatbuf_r+0x40>
 8007cda:	466a      	mov	r2, sp
 8007cdc:	f000 fbb0 	bl	8008440 <_fstat_r>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	dbf2      	blt.n	8007cca <__swhatbuf_r+0x12>
 8007ce4:	9a01      	ldr	r2, [sp, #4]
 8007ce6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007cea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cee:	425a      	negs	r2, r3
 8007cf0:	415a      	adcs	r2, r3
 8007cf2:	602a      	str	r2, [r5, #0]
 8007cf4:	e7ee      	b.n	8007cd4 <__swhatbuf_r+0x1c>
 8007cf6:	2340      	movs	r3, #64	; 0x40
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	6023      	str	r3, [r4, #0]
 8007cfc:	b016      	add	sp, #88	; 0x58
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}

08007d00 <__smakebuf_r>:
 8007d00:	898b      	ldrh	r3, [r1, #12]
 8007d02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d04:	079d      	lsls	r5, r3, #30
 8007d06:	4606      	mov	r6, r0
 8007d08:	460c      	mov	r4, r1
 8007d0a:	d507      	bpl.n	8007d1c <__smakebuf_r+0x1c>
 8007d0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	6123      	str	r3, [r4, #16]
 8007d14:	2301      	movs	r3, #1
 8007d16:	6163      	str	r3, [r4, #20]
 8007d18:	b002      	add	sp, #8
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	ab01      	add	r3, sp, #4
 8007d1e:	466a      	mov	r2, sp
 8007d20:	f7ff ffca 	bl	8007cb8 <__swhatbuf_r>
 8007d24:	9900      	ldr	r1, [sp, #0]
 8007d26:	4605      	mov	r5, r0
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7ff fc41 	bl	80075b0 <_malloc_r>
 8007d2e:	b948      	cbnz	r0, 8007d44 <__smakebuf_r+0x44>
 8007d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d34:	059a      	lsls	r2, r3, #22
 8007d36:	d4ef      	bmi.n	8007d18 <__smakebuf_r+0x18>
 8007d38:	f023 0303 	bic.w	r3, r3, #3
 8007d3c:	f043 0302 	orr.w	r3, r3, #2
 8007d40:	81a3      	strh	r3, [r4, #12]
 8007d42:	e7e3      	b.n	8007d0c <__smakebuf_r+0xc>
 8007d44:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <__smakebuf_r+0x7c>)
 8007d46:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	6020      	str	r0, [r4, #0]
 8007d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	9b00      	ldr	r3, [sp, #0]
 8007d54:	6163      	str	r3, [r4, #20]
 8007d56:	9b01      	ldr	r3, [sp, #4]
 8007d58:	6120      	str	r0, [r4, #16]
 8007d5a:	b15b      	cbz	r3, 8007d74 <__smakebuf_r+0x74>
 8007d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d60:	4630      	mov	r0, r6
 8007d62:	f000 fb7f 	bl	8008464 <_isatty_r>
 8007d66:	b128      	cbz	r0, 8007d74 <__smakebuf_r+0x74>
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	f023 0303 	bic.w	r3, r3, #3
 8007d6e:	f043 0301 	orr.w	r3, r3, #1
 8007d72:	81a3      	strh	r3, [r4, #12]
 8007d74:	89a0      	ldrh	r0, [r4, #12]
 8007d76:	4305      	orrs	r5, r0
 8007d78:	81a5      	strh	r5, [r4, #12]
 8007d7a:	e7cd      	b.n	8007d18 <__smakebuf_r+0x18>
 8007d7c:	08007b11 	.word	0x08007b11

08007d80 <__malloc_lock>:
 8007d80:	4801      	ldr	r0, [pc, #4]	; (8007d88 <__malloc_lock+0x8>)
 8007d82:	f7ff bf97 	b.w	8007cb4 <__retarget_lock_acquire_recursive>
 8007d86:	bf00      	nop
 8007d88:	2000167c 	.word	0x2000167c

08007d8c <__malloc_unlock>:
 8007d8c:	4801      	ldr	r0, [pc, #4]	; (8007d94 <__malloc_unlock+0x8>)
 8007d8e:	f7ff bf92 	b.w	8007cb6 <__retarget_lock_release_recursive>
 8007d92:	bf00      	nop
 8007d94:	2000167c 	.word	0x2000167c

08007d98 <__sfputc_r>:
 8007d98:	6893      	ldr	r3, [r2, #8]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	b410      	push	{r4}
 8007da0:	6093      	str	r3, [r2, #8]
 8007da2:	da08      	bge.n	8007db6 <__sfputc_r+0x1e>
 8007da4:	6994      	ldr	r4, [r2, #24]
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	db01      	blt.n	8007dae <__sfputc_r+0x16>
 8007daa:	290a      	cmp	r1, #10
 8007dac:	d103      	bne.n	8007db6 <__sfputc_r+0x1e>
 8007dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007db2:	f7ff bd07 	b.w	80077c4 <__swbuf_r>
 8007db6:	6813      	ldr	r3, [r2, #0]
 8007db8:	1c58      	adds	r0, r3, #1
 8007dba:	6010      	str	r0, [r2, #0]
 8007dbc:	7019      	strb	r1, [r3, #0]
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <__sfputs_r>:
 8007dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc8:	4606      	mov	r6, r0
 8007dca:	460f      	mov	r7, r1
 8007dcc:	4614      	mov	r4, r2
 8007dce:	18d5      	adds	r5, r2, r3
 8007dd0:	42ac      	cmp	r4, r5
 8007dd2:	d101      	bne.n	8007dd8 <__sfputs_r+0x12>
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	e007      	b.n	8007de8 <__sfputs_r+0x22>
 8007dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ddc:	463a      	mov	r2, r7
 8007dde:	4630      	mov	r0, r6
 8007de0:	f7ff ffda 	bl	8007d98 <__sfputc_r>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d1f3      	bne.n	8007dd0 <__sfputs_r+0xa>
 8007de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dec <_vfiprintf_r>:
 8007dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	460d      	mov	r5, r1
 8007df2:	b09d      	sub	sp, #116	; 0x74
 8007df4:	4614      	mov	r4, r2
 8007df6:	4698      	mov	r8, r3
 8007df8:	4606      	mov	r6, r0
 8007dfa:	b118      	cbz	r0, 8007e04 <_vfiprintf_r+0x18>
 8007dfc:	6983      	ldr	r3, [r0, #24]
 8007dfe:	b90b      	cbnz	r3, 8007e04 <_vfiprintf_r+0x18>
 8007e00:	f7ff feba 	bl	8007b78 <__sinit>
 8007e04:	4b89      	ldr	r3, [pc, #548]	; (800802c <_vfiprintf_r+0x240>)
 8007e06:	429d      	cmp	r5, r3
 8007e08:	d11b      	bne.n	8007e42 <_vfiprintf_r+0x56>
 8007e0a:	6875      	ldr	r5, [r6, #4]
 8007e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e0e:	07d9      	lsls	r1, r3, #31
 8007e10:	d405      	bmi.n	8007e1e <_vfiprintf_r+0x32>
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	059a      	lsls	r2, r3, #22
 8007e16:	d402      	bmi.n	8007e1e <_vfiprintf_r+0x32>
 8007e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e1a:	f7ff ff4b 	bl	8007cb4 <__retarget_lock_acquire_recursive>
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	071b      	lsls	r3, r3, #28
 8007e22:	d501      	bpl.n	8007e28 <_vfiprintf_r+0x3c>
 8007e24:	692b      	ldr	r3, [r5, #16]
 8007e26:	b9eb      	cbnz	r3, 8007e64 <_vfiprintf_r+0x78>
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7ff fd1c 	bl	8007868 <__swsetup_r>
 8007e30:	b1c0      	cbz	r0, 8007e64 <_vfiprintf_r+0x78>
 8007e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e34:	07dc      	lsls	r4, r3, #31
 8007e36:	d50e      	bpl.n	8007e56 <_vfiprintf_r+0x6a>
 8007e38:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3c:	b01d      	add	sp, #116	; 0x74
 8007e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e42:	4b7b      	ldr	r3, [pc, #492]	; (8008030 <_vfiprintf_r+0x244>)
 8007e44:	429d      	cmp	r5, r3
 8007e46:	d101      	bne.n	8007e4c <_vfiprintf_r+0x60>
 8007e48:	68b5      	ldr	r5, [r6, #8]
 8007e4a:	e7df      	b.n	8007e0c <_vfiprintf_r+0x20>
 8007e4c:	4b79      	ldr	r3, [pc, #484]	; (8008034 <_vfiprintf_r+0x248>)
 8007e4e:	429d      	cmp	r5, r3
 8007e50:	bf08      	it	eq
 8007e52:	68f5      	ldreq	r5, [r6, #12]
 8007e54:	e7da      	b.n	8007e0c <_vfiprintf_r+0x20>
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	0598      	lsls	r0, r3, #22
 8007e5a:	d4ed      	bmi.n	8007e38 <_vfiprintf_r+0x4c>
 8007e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e5e:	f7ff ff2a 	bl	8007cb6 <__retarget_lock_release_recursive>
 8007e62:	e7e9      	b.n	8007e38 <_vfiprintf_r+0x4c>
 8007e64:	2300      	movs	r3, #0
 8007e66:	9309      	str	r3, [sp, #36]	; 0x24
 8007e68:	2320      	movs	r3, #32
 8007e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e72:	2330      	movs	r3, #48	; 0x30
 8007e74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008038 <_vfiprintf_r+0x24c>
 8007e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e7c:	f04f 0901 	mov.w	r9, #1
 8007e80:	4623      	mov	r3, r4
 8007e82:	469a      	mov	sl, r3
 8007e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e88:	b10a      	cbz	r2, 8007e8e <_vfiprintf_r+0xa2>
 8007e8a:	2a25      	cmp	r2, #37	; 0x25
 8007e8c:	d1f9      	bne.n	8007e82 <_vfiprintf_r+0x96>
 8007e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e92:	d00b      	beq.n	8007eac <_vfiprintf_r+0xc0>
 8007e94:	465b      	mov	r3, fp
 8007e96:	4622      	mov	r2, r4
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff ff93 	bl	8007dc6 <__sfputs_r>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	f000 80aa 	beq.w	8007ffa <_vfiprintf_r+0x20e>
 8007ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea8:	445a      	add	r2, fp
 8007eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8007eac:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 80a2 	beq.w	8007ffa <_vfiprintf_r+0x20e>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ec0:	f10a 0a01 	add.w	sl, sl, #1
 8007ec4:	9304      	str	r3, [sp, #16]
 8007ec6:	9307      	str	r3, [sp, #28]
 8007ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8007ece:	4654      	mov	r4, sl
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed6:	4858      	ldr	r0, [pc, #352]	; (8008038 <_vfiprintf_r+0x24c>)
 8007ed8:	f7f8 f97a 	bl	80001d0 <memchr>
 8007edc:	9a04      	ldr	r2, [sp, #16]
 8007ede:	b9d8      	cbnz	r0, 8007f18 <_vfiprintf_r+0x12c>
 8007ee0:	06d1      	lsls	r1, r2, #27
 8007ee2:	bf44      	itt	mi
 8007ee4:	2320      	movmi	r3, #32
 8007ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eea:	0713      	lsls	r3, r2, #28
 8007eec:	bf44      	itt	mi
 8007eee:	232b      	movmi	r3, #43	; 0x2b
 8007ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8007efa:	d015      	beq.n	8007f28 <_vfiprintf_r+0x13c>
 8007efc:	9a07      	ldr	r2, [sp, #28]
 8007efe:	4654      	mov	r4, sl
 8007f00:	2000      	movs	r0, #0
 8007f02:	f04f 0c0a 	mov.w	ip, #10
 8007f06:	4621      	mov	r1, r4
 8007f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f0c:	3b30      	subs	r3, #48	; 0x30
 8007f0e:	2b09      	cmp	r3, #9
 8007f10:	d94e      	bls.n	8007fb0 <_vfiprintf_r+0x1c4>
 8007f12:	b1b0      	cbz	r0, 8007f42 <_vfiprintf_r+0x156>
 8007f14:	9207      	str	r2, [sp, #28]
 8007f16:	e014      	b.n	8007f42 <_vfiprintf_r+0x156>
 8007f18:	eba0 0308 	sub.w	r3, r0, r8
 8007f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f20:	4313      	orrs	r3, r2
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	46a2      	mov	sl, r4
 8007f26:	e7d2      	b.n	8007ece <_vfiprintf_r+0xe2>
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	1d19      	adds	r1, r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	9103      	str	r1, [sp, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	bfbb      	ittet	lt
 8007f34:	425b      	neglt	r3, r3
 8007f36:	f042 0202 	orrlt.w	r2, r2, #2
 8007f3a:	9307      	strge	r3, [sp, #28]
 8007f3c:	9307      	strlt	r3, [sp, #28]
 8007f3e:	bfb8      	it	lt
 8007f40:	9204      	strlt	r2, [sp, #16]
 8007f42:	7823      	ldrb	r3, [r4, #0]
 8007f44:	2b2e      	cmp	r3, #46	; 0x2e
 8007f46:	d10c      	bne.n	8007f62 <_vfiprintf_r+0x176>
 8007f48:	7863      	ldrb	r3, [r4, #1]
 8007f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f4c:	d135      	bne.n	8007fba <_vfiprintf_r+0x1ce>
 8007f4e:	9b03      	ldr	r3, [sp, #12]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	9203      	str	r2, [sp, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	bfb8      	it	lt
 8007f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f5e:	3402      	adds	r4, #2
 8007f60:	9305      	str	r3, [sp, #20]
 8007f62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008048 <_vfiprintf_r+0x25c>
 8007f66:	7821      	ldrb	r1, [r4, #0]
 8007f68:	2203      	movs	r2, #3
 8007f6a:	4650      	mov	r0, sl
 8007f6c:	f7f8 f930 	bl	80001d0 <memchr>
 8007f70:	b140      	cbz	r0, 8007f84 <_vfiprintf_r+0x198>
 8007f72:	2340      	movs	r3, #64	; 0x40
 8007f74:	eba0 000a 	sub.w	r0, r0, sl
 8007f78:	fa03 f000 	lsl.w	r0, r3, r0
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	4303      	orrs	r3, r0
 8007f80:	3401      	adds	r4, #1
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f88:	482c      	ldr	r0, [pc, #176]	; (800803c <_vfiprintf_r+0x250>)
 8007f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f8e:	2206      	movs	r2, #6
 8007f90:	f7f8 f91e 	bl	80001d0 <memchr>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d03f      	beq.n	8008018 <_vfiprintf_r+0x22c>
 8007f98:	4b29      	ldr	r3, [pc, #164]	; (8008040 <_vfiprintf_r+0x254>)
 8007f9a:	bb1b      	cbnz	r3, 8007fe4 <_vfiprintf_r+0x1f8>
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	3307      	adds	r3, #7
 8007fa0:	f023 0307 	bic.w	r3, r3, #7
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007faa:	443b      	add	r3, r7
 8007fac:	9309      	str	r3, [sp, #36]	; 0x24
 8007fae:	e767      	b.n	8007e80 <_vfiprintf_r+0x94>
 8007fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	e7a5      	b.n	8007f06 <_vfiprintf_r+0x11a>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	3401      	adds	r4, #1
 8007fbe:	9305      	str	r3, [sp, #20]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f04f 0c0a 	mov.w	ip, #10
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fcc:	3a30      	subs	r2, #48	; 0x30
 8007fce:	2a09      	cmp	r2, #9
 8007fd0:	d903      	bls.n	8007fda <_vfiprintf_r+0x1ee>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0c5      	beq.n	8007f62 <_vfiprintf_r+0x176>
 8007fd6:	9105      	str	r1, [sp, #20]
 8007fd8:	e7c3      	b.n	8007f62 <_vfiprintf_r+0x176>
 8007fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fde:	4604      	mov	r4, r0
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e7f0      	b.n	8007fc6 <_vfiprintf_r+0x1da>
 8007fe4:	ab03      	add	r3, sp, #12
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4b16      	ldr	r3, [pc, #88]	; (8008044 <_vfiprintf_r+0x258>)
 8007fec:	a904      	add	r1, sp, #16
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f3af 8000 	nop.w
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	1c78      	adds	r0, r7, #1
 8007ff8:	d1d6      	bne.n	8007fa8 <_vfiprintf_r+0x1bc>
 8007ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ffc:	07d9      	lsls	r1, r3, #31
 8007ffe:	d405      	bmi.n	800800c <_vfiprintf_r+0x220>
 8008000:	89ab      	ldrh	r3, [r5, #12]
 8008002:	059a      	lsls	r2, r3, #22
 8008004:	d402      	bmi.n	800800c <_vfiprintf_r+0x220>
 8008006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008008:	f7ff fe55 	bl	8007cb6 <__retarget_lock_release_recursive>
 800800c:	89ab      	ldrh	r3, [r5, #12]
 800800e:	065b      	lsls	r3, r3, #25
 8008010:	f53f af12 	bmi.w	8007e38 <_vfiprintf_r+0x4c>
 8008014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008016:	e711      	b.n	8007e3c <_vfiprintf_r+0x50>
 8008018:	ab03      	add	r3, sp, #12
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	462a      	mov	r2, r5
 800801e:	4b09      	ldr	r3, [pc, #36]	; (8008044 <_vfiprintf_r+0x258>)
 8008020:	a904      	add	r1, sp, #16
 8008022:	4630      	mov	r0, r6
 8008024:	f000 f880 	bl	8008128 <_printf_i>
 8008028:	e7e4      	b.n	8007ff4 <_vfiprintf_r+0x208>
 800802a:	bf00      	nop
 800802c:	08008cf0 	.word	0x08008cf0
 8008030:	08008d10 	.word	0x08008d10
 8008034:	08008cd0 	.word	0x08008cd0
 8008038:	08008d30 	.word	0x08008d30
 800803c:	08008d3a 	.word	0x08008d3a
 8008040:	00000000 	.word	0x00000000
 8008044:	08007dc7 	.word	0x08007dc7
 8008048:	08008d36 	.word	0x08008d36

0800804c <_printf_common>:
 800804c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	4616      	mov	r6, r2
 8008052:	4699      	mov	r9, r3
 8008054:	688a      	ldr	r2, [r1, #8]
 8008056:	690b      	ldr	r3, [r1, #16]
 8008058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800805c:	4293      	cmp	r3, r2
 800805e:	bfb8      	it	lt
 8008060:	4613      	movlt	r3, r2
 8008062:	6033      	str	r3, [r6, #0]
 8008064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008068:	4607      	mov	r7, r0
 800806a:	460c      	mov	r4, r1
 800806c:	b10a      	cbz	r2, 8008072 <_printf_common+0x26>
 800806e:	3301      	adds	r3, #1
 8008070:	6033      	str	r3, [r6, #0]
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	0699      	lsls	r1, r3, #26
 8008076:	bf42      	ittt	mi
 8008078:	6833      	ldrmi	r3, [r6, #0]
 800807a:	3302      	addmi	r3, #2
 800807c:	6033      	strmi	r3, [r6, #0]
 800807e:	6825      	ldr	r5, [r4, #0]
 8008080:	f015 0506 	ands.w	r5, r5, #6
 8008084:	d106      	bne.n	8008094 <_printf_common+0x48>
 8008086:	f104 0a19 	add.w	sl, r4, #25
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	6832      	ldr	r2, [r6, #0]
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	42ab      	cmp	r3, r5
 8008092:	dc26      	bgt.n	80080e2 <_printf_common+0x96>
 8008094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008098:	1e13      	subs	r3, r2, #0
 800809a:	6822      	ldr	r2, [r4, #0]
 800809c:	bf18      	it	ne
 800809e:	2301      	movne	r3, #1
 80080a0:	0692      	lsls	r2, r2, #26
 80080a2:	d42b      	bmi.n	80080fc <_printf_common+0xb0>
 80080a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080a8:	4649      	mov	r1, r9
 80080aa:	4638      	mov	r0, r7
 80080ac:	47c0      	blx	r8
 80080ae:	3001      	adds	r0, #1
 80080b0:	d01e      	beq.n	80080f0 <_printf_common+0xa4>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	68e5      	ldr	r5, [r4, #12]
 80080b6:	6832      	ldr	r2, [r6, #0]
 80080b8:	f003 0306 	and.w	r3, r3, #6
 80080bc:	2b04      	cmp	r3, #4
 80080be:	bf08      	it	eq
 80080c0:	1aad      	subeq	r5, r5, r2
 80080c2:	68a3      	ldr	r3, [r4, #8]
 80080c4:	6922      	ldr	r2, [r4, #16]
 80080c6:	bf0c      	ite	eq
 80080c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080cc:	2500      	movne	r5, #0
 80080ce:	4293      	cmp	r3, r2
 80080d0:	bfc4      	itt	gt
 80080d2:	1a9b      	subgt	r3, r3, r2
 80080d4:	18ed      	addgt	r5, r5, r3
 80080d6:	2600      	movs	r6, #0
 80080d8:	341a      	adds	r4, #26
 80080da:	42b5      	cmp	r5, r6
 80080dc:	d11a      	bne.n	8008114 <_printf_common+0xc8>
 80080de:	2000      	movs	r0, #0
 80080e0:	e008      	b.n	80080f4 <_printf_common+0xa8>
 80080e2:	2301      	movs	r3, #1
 80080e4:	4652      	mov	r2, sl
 80080e6:	4649      	mov	r1, r9
 80080e8:	4638      	mov	r0, r7
 80080ea:	47c0      	blx	r8
 80080ec:	3001      	adds	r0, #1
 80080ee:	d103      	bne.n	80080f8 <_printf_common+0xac>
 80080f0:	f04f 30ff 	mov.w	r0, #4294967295
 80080f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f8:	3501      	adds	r5, #1
 80080fa:	e7c6      	b.n	800808a <_printf_common+0x3e>
 80080fc:	18e1      	adds	r1, r4, r3
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	2030      	movs	r0, #48	; 0x30
 8008102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008106:	4422      	add	r2, r4
 8008108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800810c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008110:	3302      	adds	r3, #2
 8008112:	e7c7      	b.n	80080a4 <_printf_common+0x58>
 8008114:	2301      	movs	r3, #1
 8008116:	4622      	mov	r2, r4
 8008118:	4649      	mov	r1, r9
 800811a:	4638      	mov	r0, r7
 800811c:	47c0      	blx	r8
 800811e:	3001      	adds	r0, #1
 8008120:	d0e6      	beq.n	80080f0 <_printf_common+0xa4>
 8008122:	3601      	adds	r6, #1
 8008124:	e7d9      	b.n	80080da <_printf_common+0x8e>
	...

08008128 <_printf_i>:
 8008128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800812c:	460c      	mov	r4, r1
 800812e:	4691      	mov	r9, r2
 8008130:	7e27      	ldrb	r7, [r4, #24]
 8008132:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008134:	2f78      	cmp	r7, #120	; 0x78
 8008136:	4680      	mov	r8, r0
 8008138:	469a      	mov	sl, r3
 800813a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800813e:	d807      	bhi.n	8008150 <_printf_i+0x28>
 8008140:	2f62      	cmp	r7, #98	; 0x62
 8008142:	d80a      	bhi.n	800815a <_printf_i+0x32>
 8008144:	2f00      	cmp	r7, #0
 8008146:	f000 80d8 	beq.w	80082fa <_printf_i+0x1d2>
 800814a:	2f58      	cmp	r7, #88	; 0x58
 800814c:	f000 80a3 	beq.w	8008296 <_printf_i+0x16e>
 8008150:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008158:	e03a      	b.n	80081d0 <_printf_i+0xa8>
 800815a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800815e:	2b15      	cmp	r3, #21
 8008160:	d8f6      	bhi.n	8008150 <_printf_i+0x28>
 8008162:	a001      	add	r0, pc, #4	; (adr r0, 8008168 <_printf_i+0x40>)
 8008164:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008168:	080081c1 	.word	0x080081c1
 800816c:	080081d5 	.word	0x080081d5
 8008170:	08008151 	.word	0x08008151
 8008174:	08008151 	.word	0x08008151
 8008178:	08008151 	.word	0x08008151
 800817c:	08008151 	.word	0x08008151
 8008180:	080081d5 	.word	0x080081d5
 8008184:	08008151 	.word	0x08008151
 8008188:	08008151 	.word	0x08008151
 800818c:	08008151 	.word	0x08008151
 8008190:	08008151 	.word	0x08008151
 8008194:	080082e1 	.word	0x080082e1
 8008198:	08008205 	.word	0x08008205
 800819c:	080082c3 	.word	0x080082c3
 80081a0:	08008151 	.word	0x08008151
 80081a4:	08008151 	.word	0x08008151
 80081a8:	08008303 	.word	0x08008303
 80081ac:	08008151 	.word	0x08008151
 80081b0:	08008205 	.word	0x08008205
 80081b4:	08008151 	.word	0x08008151
 80081b8:	08008151 	.word	0x08008151
 80081bc:	080082cb 	.word	0x080082cb
 80081c0:	680b      	ldr	r3, [r1, #0]
 80081c2:	1d1a      	adds	r2, r3, #4
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	600a      	str	r2, [r1, #0]
 80081c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0a3      	b.n	800831c <_printf_i+0x1f4>
 80081d4:	6825      	ldr	r5, [r4, #0]
 80081d6:	6808      	ldr	r0, [r1, #0]
 80081d8:	062e      	lsls	r6, r5, #24
 80081da:	f100 0304 	add.w	r3, r0, #4
 80081de:	d50a      	bpl.n	80081f6 <_printf_i+0xce>
 80081e0:	6805      	ldr	r5, [r0, #0]
 80081e2:	600b      	str	r3, [r1, #0]
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	da03      	bge.n	80081f0 <_printf_i+0xc8>
 80081e8:	232d      	movs	r3, #45	; 0x2d
 80081ea:	426d      	negs	r5, r5
 80081ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081f0:	485e      	ldr	r0, [pc, #376]	; (800836c <_printf_i+0x244>)
 80081f2:	230a      	movs	r3, #10
 80081f4:	e019      	b.n	800822a <_printf_i+0x102>
 80081f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081fa:	6805      	ldr	r5, [r0, #0]
 80081fc:	600b      	str	r3, [r1, #0]
 80081fe:	bf18      	it	ne
 8008200:	b22d      	sxthne	r5, r5
 8008202:	e7ef      	b.n	80081e4 <_printf_i+0xbc>
 8008204:	680b      	ldr	r3, [r1, #0]
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	1d18      	adds	r0, r3, #4
 800820a:	6008      	str	r0, [r1, #0]
 800820c:	0628      	lsls	r0, r5, #24
 800820e:	d501      	bpl.n	8008214 <_printf_i+0xec>
 8008210:	681d      	ldr	r5, [r3, #0]
 8008212:	e002      	b.n	800821a <_printf_i+0xf2>
 8008214:	0669      	lsls	r1, r5, #25
 8008216:	d5fb      	bpl.n	8008210 <_printf_i+0xe8>
 8008218:	881d      	ldrh	r5, [r3, #0]
 800821a:	4854      	ldr	r0, [pc, #336]	; (800836c <_printf_i+0x244>)
 800821c:	2f6f      	cmp	r7, #111	; 0x6f
 800821e:	bf0c      	ite	eq
 8008220:	2308      	moveq	r3, #8
 8008222:	230a      	movne	r3, #10
 8008224:	2100      	movs	r1, #0
 8008226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800822a:	6866      	ldr	r6, [r4, #4]
 800822c:	60a6      	str	r6, [r4, #8]
 800822e:	2e00      	cmp	r6, #0
 8008230:	bfa2      	ittt	ge
 8008232:	6821      	ldrge	r1, [r4, #0]
 8008234:	f021 0104 	bicge.w	r1, r1, #4
 8008238:	6021      	strge	r1, [r4, #0]
 800823a:	b90d      	cbnz	r5, 8008240 <_printf_i+0x118>
 800823c:	2e00      	cmp	r6, #0
 800823e:	d04d      	beq.n	80082dc <_printf_i+0x1b4>
 8008240:	4616      	mov	r6, r2
 8008242:	fbb5 f1f3 	udiv	r1, r5, r3
 8008246:	fb03 5711 	mls	r7, r3, r1, r5
 800824a:	5dc7      	ldrb	r7, [r0, r7]
 800824c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008250:	462f      	mov	r7, r5
 8008252:	42bb      	cmp	r3, r7
 8008254:	460d      	mov	r5, r1
 8008256:	d9f4      	bls.n	8008242 <_printf_i+0x11a>
 8008258:	2b08      	cmp	r3, #8
 800825a:	d10b      	bne.n	8008274 <_printf_i+0x14c>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	07df      	lsls	r7, r3, #31
 8008260:	d508      	bpl.n	8008274 <_printf_i+0x14c>
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	6861      	ldr	r1, [r4, #4]
 8008266:	4299      	cmp	r1, r3
 8008268:	bfde      	ittt	le
 800826a:	2330      	movle	r3, #48	; 0x30
 800826c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008270:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008274:	1b92      	subs	r2, r2, r6
 8008276:	6122      	str	r2, [r4, #16]
 8008278:	f8cd a000 	str.w	sl, [sp]
 800827c:	464b      	mov	r3, r9
 800827e:	aa03      	add	r2, sp, #12
 8008280:	4621      	mov	r1, r4
 8008282:	4640      	mov	r0, r8
 8008284:	f7ff fee2 	bl	800804c <_printf_common>
 8008288:	3001      	adds	r0, #1
 800828a:	d14c      	bne.n	8008326 <_printf_i+0x1fe>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	b004      	add	sp, #16
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	4835      	ldr	r0, [pc, #212]	; (800836c <_printf_i+0x244>)
 8008298:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	680e      	ldr	r6, [r1, #0]
 80082a0:	061f      	lsls	r7, r3, #24
 80082a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80082a6:	600e      	str	r6, [r1, #0]
 80082a8:	d514      	bpl.n	80082d4 <_printf_i+0x1ac>
 80082aa:	07d9      	lsls	r1, r3, #31
 80082ac:	bf44      	itt	mi
 80082ae:	f043 0320 	orrmi.w	r3, r3, #32
 80082b2:	6023      	strmi	r3, [r4, #0]
 80082b4:	b91d      	cbnz	r5, 80082be <_printf_i+0x196>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	f023 0320 	bic.w	r3, r3, #32
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	2310      	movs	r3, #16
 80082c0:	e7b0      	b.n	8008224 <_printf_i+0xfc>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	f043 0320 	orr.w	r3, r3, #32
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	2378      	movs	r3, #120	; 0x78
 80082cc:	4828      	ldr	r0, [pc, #160]	; (8008370 <_printf_i+0x248>)
 80082ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082d2:	e7e3      	b.n	800829c <_printf_i+0x174>
 80082d4:	065e      	lsls	r6, r3, #25
 80082d6:	bf48      	it	mi
 80082d8:	b2ad      	uxthmi	r5, r5
 80082da:	e7e6      	b.n	80082aa <_printf_i+0x182>
 80082dc:	4616      	mov	r6, r2
 80082de:	e7bb      	b.n	8008258 <_printf_i+0x130>
 80082e0:	680b      	ldr	r3, [r1, #0]
 80082e2:	6826      	ldr	r6, [r4, #0]
 80082e4:	6960      	ldr	r0, [r4, #20]
 80082e6:	1d1d      	adds	r5, r3, #4
 80082e8:	600d      	str	r5, [r1, #0]
 80082ea:	0635      	lsls	r5, r6, #24
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	d501      	bpl.n	80082f4 <_printf_i+0x1cc>
 80082f0:	6018      	str	r0, [r3, #0]
 80082f2:	e002      	b.n	80082fa <_printf_i+0x1d2>
 80082f4:	0671      	lsls	r1, r6, #25
 80082f6:	d5fb      	bpl.n	80082f0 <_printf_i+0x1c8>
 80082f8:	8018      	strh	r0, [r3, #0]
 80082fa:	2300      	movs	r3, #0
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	4616      	mov	r6, r2
 8008300:	e7ba      	b.n	8008278 <_printf_i+0x150>
 8008302:	680b      	ldr	r3, [r1, #0]
 8008304:	1d1a      	adds	r2, r3, #4
 8008306:	600a      	str	r2, [r1, #0]
 8008308:	681e      	ldr	r6, [r3, #0]
 800830a:	6862      	ldr	r2, [r4, #4]
 800830c:	2100      	movs	r1, #0
 800830e:	4630      	mov	r0, r6
 8008310:	f7f7 ff5e 	bl	80001d0 <memchr>
 8008314:	b108      	cbz	r0, 800831a <_printf_i+0x1f2>
 8008316:	1b80      	subs	r0, r0, r6
 8008318:	6060      	str	r0, [r4, #4]
 800831a:	6863      	ldr	r3, [r4, #4]
 800831c:	6123      	str	r3, [r4, #16]
 800831e:	2300      	movs	r3, #0
 8008320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008324:	e7a8      	b.n	8008278 <_printf_i+0x150>
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	4632      	mov	r2, r6
 800832a:	4649      	mov	r1, r9
 800832c:	4640      	mov	r0, r8
 800832e:	47d0      	blx	sl
 8008330:	3001      	adds	r0, #1
 8008332:	d0ab      	beq.n	800828c <_printf_i+0x164>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	079b      	lsls	r3, r3, #30
 8008338:	d413      	bmi.n	8008362 <_printf_i+0x23a>
 800833a:	68e0      	ldr	r0, [r4, #12]
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	4298      	cmp	r0, r3
 8008340:	bfb8      	it	lt
 8008342:	4618      	movlt	r0, r3
 8008344:	e7a4      	b.n	8008290 <_printf_i+0x168>
 8008346:	2301      	movs	r3, #1
 8008348:	4632      	mov	r2, r6
 800834a:	4649      	mov	r1, r9
 800834c:	4640      	mov	r0, r8
 800834e:	47d0      	blx	sl
 8008350:	3001      	adds	r0, #1
 8008352:	d09b      	beq.n	800828c <_printf_i+0x164>
 8008354:	3501      	adds	r5, #1
 8008356:	68e3      	ldr	r3, [r4, #12]
 8008358:	9903      	ldr	r1, [sp, #12]
 800835a:	1a5b      	subs	r3, r3, r1
 800835c:	42ab      	cmp	r3, r5
 800835e:	dcf2      	bgt.n	8008346 <_printf_i+0x21e>
 8008360:	e7eb      	b.n	800833a <_printf_i+0x212>
 8008362:	2500      	movs	r5, #0
 8008364:	f104 0619 	add.w	r6, r4, #25
 8008368:	e7f5      	b.n	8008356 <_printf_i+0x22e>
 800836a:	bf00      	nop
 800836c:	08008d41 	.word	0x08008d41
 8008370:	08008d52 	.word	0x08008d52

08008374 <__sread>:
 8008374:	b510      	push	{r4, lr}
 8008376:	460c      	mov	r4, r1
 8008378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800837c:	f000 f894 	bl	80084a8 <_read_r>
 8008380:	2800      	cmp	r0, #0
 8008382:	bfab      	itete	ge
 8008384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008386:	89a3      	ldrhlt	r3, [r4, #12]
 8008388:	181b      	addge	r3, r3, r0
 800838a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800838e:	bfac      	ite	ge
 8008390:	6563      	strge	r3, [r4, #84]	; 0x54
 8008392:	81a3      	strhlt	r3, [r4, #12]
 8008394:	bd10      	pop	{r4, pc}

08008396 <__swrite>:
 8008396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839a:	461f      	mov	r7, r3
 800839c:	898b      	ldrh	r3, [r1, #12]
 800839e:	05db      	lsls	r3, r3, #23
 80083a0:	4605      	mov	r5, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	4616      	mov	r6, r2
 80083a6:	d505      	bpl.n	80083b4 <__swrite+0x1e>
 80083a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ac:	2302      	movs	r3, #2
 80083ae:	2200      	movs	r2, #0
 80083b0:	f000 f868 	bl	8008484 <_lseek_r>
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083be:	81a3      	strh	r3, [r4, #12]
 80083c0:	4632      	mov	r2, r6
 80083c2:	463b      	mov	r3, r7
 80083c4:	4628      	mov	r0, r5
 80083c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ca:	f000 b817 	b.w	80083fc <_write_r>

080083ce <__sseek>:
 80083ce:	b510      	push	{r4, lr}
 80083d0:	460c      	mov	r4, r1
 80083d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d6:	f000 f855 	bl	8008484 <_lseek_r>
 80083da:	1c43      	adds	r3, r0, #1
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	bf15      	itete	ne
 80083e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80083e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083ea:	81a3      	strheq	r3, [r4, #12]
 80083ec:	bf18      	it	ne
 80083ee:	81a3      	strhne	r3, [r4, #12]
 80083f0:	bd10      	pop	{r4, pc}

080083f2 <__sclose>:
 80083f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f6:	f000 b813 	b.w	8008420 <_close_r>
	...

080083fc <_write_r>:
 80083fc:	b538      	push	{r3, r4, r5, lr}
 80083fe:	4d07      	ldr	r5, [pc, #28]	; (800841c <_write_r+0x20>)
 8008400:	4604      	mov	r4, r0
 8008402:	4608      	mov	r0, r1
 8008404:	4611      	mov	r1, r2
 8008406:	2200      	movs	r2, #0
 8008408:	602a      	str	r2, [r5, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	f7f9 f89f 	bl	800154e <_write>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d102      	bne.n	800841a <_write_r+0x1e>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	b103      	cbz	r3, 800841a <_write_r+0x1e>
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	20001684 	.word	0x20001684

08008420 <_close_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d06      	ldr	r5, [pc, #24]	; (800843c <_close_r+0x1c>)
 8008424:	2300      	movs	r3, #0
 8008426:	4604      	mov	r4, r0
 8008428:	4608      	mov	r0, r1
 800842a:	602b      	str	r3, [r5, #0]
 800842c:	f7f9 f8ab 	bl	8001586 <_close>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_close_r+0x1a>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_close_r+0x1a>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	20001684 	.word	0x20001684

08008440 <_fstat_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4d07      	ldr	r5, [pc, #28]	; (8008460 <_fstat_r+0x20>)
 8008444:	2300      	movs	r3, #0
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	4611      	mov	r1, r2
 800844c:	602b      	str	r3, [r5, #0]
 800844e:	f7f9 f8a6 	bl	800159e <_fstat>
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	d102      	bne.n	800845c <_fstat_r+0x1c>
 8008456:	682b      	ldr	r3, [r5, #0]
 8008458:	b103      	cbz	r3, 800845c <_fstat_r+0x1c>
 800845a:	6023      	str	r3, [r4, #0]
 800845c:	bd38      	pop	{r3, r4, r5, pc}
 800845e:	bf00      	nop
 8008460:	20001684 	.word	0x20001684

08008464 <_isatty_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d06      	ldr	r5, [pc, #24]	; (8008480 <_isatty_r+0x1c>)
 8008468:	2300      	movs	r3, #0
 800846a:	4604      	mov	r4, r0
 800846c:	4608      	mov	r0, r1
 800846e:	602b      	str	r3, [r5, #0]
 8008470:	f7f9 f8a5 	bl	80015be <_isatty>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d102      	bne.n	800847e <_isatty_r+0x1a>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	b103      	cbz	r3, 800847e <_isatty_r+0x1a>
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	20001684 	.word	0x20001684

08008484 <_lseek_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	4d07      	ldr	r5, [pc, #28]	; (80084a4 <_lseek_r+0x20>)
 8008488:	4604      	mov	r4, r0
 800848a:	4608      	mov	r0, r1
 800848c:	4611      	mov	r1, r2
 800848e:	2200      	movs	r2, #0
 8008490:	602a      	str	r2, [r5, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	f7f9 f89e 	bl	80015d4 <_lseek>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d102      	bne.n	80084a2 <_lseek_r+0x1e>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	b103      	cbz	r3, 80084a2 <_lseek_r+0x1e>
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	20001684 	.word	0x20001684

080084a8 <_read_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4d07      	ldr	r5, [pc, #28]	; (80084c8 <_read_r+0x20>)
 80084ac:	4604      	mov	r4, r0
 80084ae:	4608      	mov	r0, r1
 80084b0:	4611      	mov	r1, r2
 80084b2:	2200      	movs	r2, #0
 80084b4:	602a      	str	r2, [r5, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	f7f9 f82c 	bl	8001514 <_read>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d102      	bne.n	80084c6 <_read_r+0x1e>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	b103      	cbz	r3, 80084c6 <_read_r+0x1e>
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	20001684 	.word	0x20001684

080084cc <_init>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr

080084d8 <_fini>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr
